"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[179],{628:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'header > h1 {\n  padding-left: 6rem;\n  font-weight: 100;\n}\nheader > h1::after {\n  font-weight: 900;\n  content: "Todo";\n  color: var(--eerie-black);\n}\n',"",{version:3,sources:["webpack://./src/css/header-style.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,yBAAyB;AAC3B",sourcesContent:['header > h1 {\n  padding-left: 6rem;\n  font-weight: 100;\n}\nheader > h1::after {\n  font-weight: 900;\n  content: "Todo";\n  color: var(--eerie-black);\n}\n'],sourceRoot:""}]);const s=o},480:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.left-section__projects__add-btn {\n  margin: 0 auto;\n  min-width: 140px;\n  display: none;\n}\n\n/* Make span relative for the after content */\n.left-section__projects__add-btn span {\n  transition: 0.5s;\n  position: relative;\n}\n\n/* Add content  */\n.left-section__projects__add-btn span::after {\n  content: "\\00bb";\n  position: absolute;\n  top: 0;\n  right: -18px;\n  transition: 0.5s;\n  opacity: 0;\n}\n\n/* On span hover use padding */\n.left-section__projects__add-btn:hover span {\n  padding-right: 20px;\n}\n\n/* On span hover make the after content visible and change its position */\n.left-section__projects__add-btn:hover span::after {\n  opacity: 1;\n  right: 0px;\n}\n',"",{version:3,sources:["webpack://./src/css/left-section/add-project-btn.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,gBAAgB;EAChB,aAAa;AACf;;AAEA,6CAA6C;AAC7C;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA,iBAAiB;AACjB;EACE,gBAAgB;EAChB,kBAAkB;EAClB,MAAM;EACN,YAAY;EACZ,gBAAgB;EAChB,UAAU;AACZ;;AAEA,8BAA8B;AAC9B;EACE,mBAAmB;AACrB;;AAEA,yEAAyE;AACzE;EACE,UAAU;EACV,UAAU;AACZ",sourcesContent:['.left-section__projects__add-btn {\n  margin: 0 auto;\n  min-width: 140px;\n  display: none;\n}\n\n/* Make span relative for the after content */\n.left-section__projects__add-btn span {\n  transition: 0.5s;\n  position: relative;\n}\n\n/* Add content  */\n.left-section__projects__add-btn span::after {\n  content: "\\00bb";\n  position: absolute;\n  top: 0;\n  right: -18px;\n  transition: 0.5s;\n  opacity: 0;\n}\n\n/* On span hover use padding */\n.left-section__projects__add-btn:hover span {\n  padding-right: 20px;\n}\n\n/* On span hover make the after content visible and change its position */\n.left-section__projects__add-btn:hover span::after {\n  opacity: 1;\n  right: 0px;\n}\n'],sourceRoot:""}]);const s=o},239:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".left-section__home-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.left-section__home-container > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n  padding-bottom: 1rem;\n  /* color: var(--Ultramarine-blue); */\n}\n\n/* Select the divs in home container  */\n.left-section__home-container > div {\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  position: relative;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 1rem;\n}\n\n.left-section__home-container > div:hover {\n  background-color: var(--Ghost-white);\n\n  cursor: pointer;\n  box-shadow: var(--box-shadows);\n}\n.left-section__home-container > div:hover * {\n  fill: var(--Ultramarine-blue);\n  color: var(--Ultramarine-blue);\n}\n\n.left-section__home-container > div > svg:hover {\n  transition: 0.5s ease-in-out;\n  transform: rotate(360deg);\n}\n","",{version:3,sources:["webpack://./src/css/left-section/home-container.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,2CAA2C;EAC3C,oBAAoB;EACpB,oCAAoC;AACtC;;AAEA,uCAAuC;AACvC;EACE,aAAa;EACb,yCAAyC;EACzC,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,oCAAoC;EACpC,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,oCAAoC;;EAEpC,eAAe;EACf,8BAA8B;AAChC;AACA;EACE,6BAA6B;EAC7B,8BAA8B;AAChC;;AAEA;EACE,4BAA4B;EAC5B,yBAAyB;AAC3B",sourcesContent:[".left-section__home-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.left-section__home-container > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n  padding-bottom: 1rem;\n  /* color: var(--Ultramarine-blue); */\n}\n\n/* Select the divs in home container  */\n.left-section__home-container > div {\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  position: relative;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 1rem;\n}\n\n.left-section__home-container > div:hover {\n  background-color: var(--Ghost-white);\n\n  cursor: pointer;\n  box-shadow: var(--box-shadows);\n}\n.left-section__home-container > div:hover * {\n  fill: var(--Ultramarine-blue);\n  color: var(--Ultramarine-blue);\n}\n\n.left-section__home-container > div > svg:hover {\n  transition: 0.5s ease-in-out;\n  transform: rotate(360deg);\n}\n"],sourceRoot:""}]);const s=o},112:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"#left-section {\n  flex: 1;\n  max-width: 400px;\n  background-color: var(--White);\n  padding: 2rem;\n  border-radius: var(--bottom-radius-section);\n\n  display: flex;\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/css/left-section/main-left-style.css"],names:[],mappings:"AAAA;EACE,OAAO;EACP,gBAAgB;EAChB,8BAA8B;EAC9B,aAAa;EACb,2CAA2C;;EAE3C,aAAa;EACb,sBAAsB;AACxB",sourcesContent:["#left-section {\n  flex: 1;\n  max-width: 400px;\n  background-color: var(--White);\n  padding: 2rem;\n  border-radius: var(--bottom-radius-section);\n\n  display: flex;\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const s=o},78:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".left-section__projects {\n  padding: 1rem;\n}\n.left-section__projects > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n\n  padding-bottom: 1rem;\n}\n\n.left-section__projects__container ul {\n  display: flex;\n  flex-direction: column;\n}\n\n.left-section__projects__container ul > li {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto max-content;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n#projectInput {\n  width: 100%;\n  border: none;\n  padding: 0.8rem 1rem;\n  border-radius: 4px;\n}\n\n#projectInput:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n#garbageIcon {\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#garbageIcon:hover {\n  transform: scale(1.2);\n}\n\n.left-section__projects__container ul > li:hover {\n  background-color: var(--Ghost-white);\n  box-shadow: var(--box-shadows);\n  cursor: pointer;\n}\n\n/* Select all p when li is hover */\n.left-section__projects__container ul > li:hover p {\n  color: var(--Ultramarine-blue);\n}\n\n/* Select all svg when li is hover */\n\n.left-section__projects__container ul > li:hover svg {\n  fill: var(--Ultramarine-blue);\n}\n\n.left-section__projects__container ul > li:hover #garbageIcon {\n  filter: invert(38%) sepia(72%) saturate(1087%) hue-rotate(208deg) brightness(93%) contrast(97%);\n}\n","",{version:3,sources:["webpack://./src/css/left-section/project-container.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;AACA;EACE,2CAA2C;;EAE3C,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,uCAAuC;EACvC,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,8FAA8F;AAChG;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;EAC9B,eAAe;AACjB;;AAEA,kCAAkC;AAClC;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;;AAEpC;EACE,6BAA6B;AAC/B;;AAEA;EACE,+FAA+F;AACjG",sourcesContent:[".left-section__projects {\n  padding: 1rem;\n}\n.left-section__projects > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n\n  padding-bottom: 1rem;\n}\n\n.left-section__projects__container ul {\n  display: flex;\n  flex-direction: column;\n}\n\n.left-section__projects__container ul > li {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto max-content;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n#projectInput {\n  width: 100%;\n  border: none;\n  padding: 0.8rem 1rem;\n  border-radius: 4px;\n}\n\n#projectInput:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n#garbageIcon {\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#garbageIcon:hover {\n  transform: scale(1.2);\n}\n\n.left-section__projects__container ul > li:hover {\n  background-color: var(--Ghost-white);\n  box-shadow: var(--box-shadows);\n  cursor: pointer;\n}\n\n/* Select all p when li is hover */\n.left-section__projects__container ul > li:hover p {\n  color: var(--Ultramarine-blue);\n}\n\n/* Select all svg when li is hover */\n\n.left-section__projects__container ul > li:hover svg {\n  fill: var(--Ultramarine-blue);\n}\n\n.left-section__projects__container ul > li:hover #garbageIcon {\n  filter: invert(38%) sepia(72%) saturate(1087%) hue-rotate(208deg) brightness(93%) contrast(97%);\n}\n"],sourceRoot:""}]);const s=o},993:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"/* Add Task style */\n.main__task-list__add-task_container {\n  width: 100%;\n  display: flex;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n}\n\n.main__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus {\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/css/left-section/project-create-form.css"],names:[],mappings:"AAAA,mBAAmB;AACnB;EACE,WAAW;EACX,aAAa;EACb,oBAAoB;EACpB,WAAW;EACX,yCAAyC;EACzC,8BAA8B;AAChC;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf",sourcesContent:["/* Add Task style */\n.main__task-list__add-task_container {\n  width: 100%;\n  display: flex;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n}\n\n.main__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus {\n  outline: none;\n}\n"],sourceRoot:""}]);const s=o},973:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"#middle-section {\n  flex: 5;\n  background-color: var(--Ghost-white);\n  /* inside main border */\n  border-top-left-radius: 35px;\n  padding: 1rem 3rem;\n  position: relative;\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/main-middle-style.css"],names:[],mappings:"AAAA;EACE,OAAO;EACP,oCAAoC;EACpC,uBAAuB;EACvB,4BAA4B;EAC5B,kBAAkB;EAClB,kBAAkB;AACpB",sourcesContent:["#middle-section {\n  flex: 5;\n  background-color: var(--Ghost-white);\n  /* inside main border */\n  border-top-left-radius: 35px;\n  padding: 1rem 3rem;\n  position: relative;\n}\n"],sourceRoot:""}]);const s=o},243:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".main__container__header {\n  display: none;\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.main__container__header.visible {\n  display: flex;\n}\n\n.main__container__header h2 {\n  width: 50%;\n  font-size: 2.4rem;\n  padding: 1.6rem 2rem;\n  border-radius: var(--border-radius-value);\n  /* background-color: var(--White); */\n  user-select: none;\n}\n\n.main__header__sort-container {\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  padding: 0.8rem;\n  border-radius: var(--border-radius-value);\n  user-select: none;\n}\n\n.main__header__sort-container svg {\n  width: 20px;\n}\n\n.main__header__sort-container:hover {\n  background-color: var(--Ghost-white3);\n  box-shadow: var(--box-shadows);\n  transform: scale(1.02);\n}\n\n.main__header__sort-container:active {\n  transform: translateY(1px);\n}\n\n.main__header__sort-container:hover,\n.main__header__sort-container:hover svg {\n  color: var(--Ultramarine-blue);\n  cursor: pointer;\n  fill: var(--Ultramarine-blue);\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/middle-header.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,oBAAoB;EACpB,yCAAyC;EACzC,oCAAoC;EACpC,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,eAAe;EACf,yCAAyC;EACzC,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,qCAAqC;EACrC,8BAA8B;EAC9B,sBAAsB;AACxB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;;EAEE,8BAA8B;EAC9B,eAAe;EACf,6BAA6B;AAC/B",sourcesContent:[".main__container__header {\n  display: none;\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.main__container__header.visible {\n  display: flex;\n}\n\n.main__container__header h2 {\n  width: 50%;\n  font-size: 2.4rem;\n  padding: 1.6rem 2rem;\n  border-radius: var(--border-radius-value);\n  /* background-color: var(--White); */\n  user-select: none;\n}\n\n.main__header__sort-container {\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  padding: 0.8rem;\n  border-radius: var(--border-radius-value);\n  user-select: none;\n}\n\n.main__header__sort-container svg {\n  width: 20px;\n}\n\n.main__header__sort-container:hover {\n  background-color: var(--Ghost-white3);\n  box-shadow: var(--box-shadows);\n  transform: scale(1.02);\n}\n\n.main__header__sort-container:active {\n  transform: translateY(1px);\n}\n\n.main__header__sort-container:hover,\n.main__header__sort-container:hover svg {\n  color: var(--Ultramarine-blue);\n  cursor: pointer;\n  fill: var(--Ultramarine-blue);\n}\n"],sourceRoot:""}]);const s=o},413:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".main__sorting-order {\n  visibility: hidden;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.2rem;\n  padding: 0.5rem 0.8rem;\n  align-items: center;\n}\n\n.main__sorting-order.visibility {\n  visibility: visible;\n}\n\n.main__sorting-order > svg {\n  padding: 0.1rem;\n  width: 20px;\n}\n\n.main__sorting-order > svg:hover {\n  background-color: var(--battleship-gray);\n}\n\n/* ----------------------------------------- */\n\n.main__header__sort-container__options {\n  width: 200px;\n  padding: 2rem 0rem 1rem;\n  position: absolute;\n  right: 0;\n  top: 50px;\n\n  background-color: var(--White);\n  box-shadow: var(--box-shadows);\n\n  display: none;\n  flex-direction: column;\n  gap: 1.5rem;\n  border-radius: var(--border-radius-value);\n  z-index: 10;\n}\n.main__header__sort-container__options.visible {\n  display: flex;\n}\n\n.main__header__sort-container__options > p {\n  padding-bottom: 2rem;\n  font-weight: 800;\n  text-align: center;\n  border-bottom: 1px solid var(--Ghost-white);\n}\n\n.main__header__sort-container__options > div {\n  padding: 0.8rem 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.main__header__sort-container__options > div p {\n  width: 100%;\n  padding: 0.5rem;\n}\n\n.main__header__sort-container__options > div:hover,\n.main__header__sort-container__options > div:hover svg {\n  color: var(--Ultramarine-blue);\n  background-color: var(--Ghost-white);\n\n  fill: var(--Ultramarine-blue);\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/middle-sorting-box.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,WAAW;EACX,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,wCAAwC;AAC1C;;AAEA,8CAA8C;;AAE9C;EACE,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,QAAQ;EACR,SAAS;;EAET,8BAA8B;EAC9B,8BAA8B;;EAE9B,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,yCAAyC;EACzC,WAAW;AACb;AACA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,gBAAgB;EAChB,kBAAkB;EAClB,2CAA2C;AAC7C;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,eAAe;AACjB;;AAEA;;EAEE,8BAA8B;EAC9B,oCAAoC;;EAEpC,6BAA6B;AAC/B",sourcesContent:[".main__sorting-order {\n  visibility: hidden;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.2rem;\n  padding: 0.5rem 0.8rem;\n  align-items: center;\n}\n\n.main__sorting-order.visibility {\n  visibility: visible;\n}\n\n.main__sorting-order > svg {\n  padding: 0.1rem;\n  width: 20px;\n}\n\n.main__sorting-order > svg:hover {\n  background-color: var(--battleship-gray);\n}\n\n/* ----------------------------------------- */\n\n.main__header__sort-container__options {\n  width: 200px;\n  padding: 2rem 0rem 1rem;\n  position: absolute;\n  right: 0;\n  top: 50px;\n\n  background-color: var(--White);\n  box-shadow: var(--box-shadows);\n\n  display: none;\n  flex-direction: column;\n  gap: 1.5rem;\n  border-radius: var(--border-radius-value);\n  z-index: 10;\n}\n.main__header__sort-container__options.visible {\n  display: flex;\n}\n\n.main__header__sort-container__options > p {\n  padding-bottom: 2rem;\n  font-weight: 800;\n  text-align: center;\n  border-bottom: 1px solid var(--Ghost-white);\n}\n\n.main__header__sort-container__options > div {\n  padding: 0.8rem 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.main__header__sort-container__options > div p {\n  width: 100%;\n  padding: 0.5rem;\n}\n\n.main__header__sort-container__options > div:hover,\n.main__header__sort-container__options > div:hover svg {\n  color: var(--Ultramarine-blue);\n  background-color: var(--Ghost-white);\n\n  fill: var(--Ultramarine-blue);\n}\n"],sourceRoot:""}]);const s=o},356:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.main__task-list__container {\n  width: 100%;\n  /* display: none; */\n}\n\n/* List Style */\n.main__task-list__list {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* ----------------------------------------------------------- */\n\n/* List item style */\n\n.main__task-list__list-item {\n  padding: 2rem;\n  background-color: var(--White);\n  /* min-height: 260px; */\n\n  border-radius: var(--border-radius-value);\n  border-left: 8px solid var(--battleship-gray);\n\n  display: grid;\n  grid-template-columns: 3fr 330px;\n  grid-template-rows: auto auto 1fr 2fr;\n  column-gap: 0.8rem;\n  row-gap: 1rem;\n}\n.main__task-list__list-item.visible {\n  display: block;\n}\n\n.main__task-list__list-item.low {\n  border-left: 8px solid var(--Carolina-blue);\n}\n.main__task-list__list-item.medium {\n  border-left: 8px solid var(--Maximum-yellow-red);\n}\n.main__task-list__list-item.high {\n  border-left: 8px solid var(--Orange-red-crayola);\n}\n.main__task-list__list-item.none {\n  border-left: 8px solid var(--battleship-gray);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List item header */\n.main__task-list__list-item__title-container {\n  grid-column: 1/-1;\n  grid-row: 1/2;\n  display: flex;\n  align-items: center;\n  padding: 0.4rem;\n}\n\n.main__task-list__list-item__title-container div {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n#main__task-list__list-item__title {\n  flex: 1;\n  margin-right: 1rem;\n  padding: 0.4rem;\n  border: none;\n  border-radius: 5px;\n}\n\n/* when checkbox is active */\n.checked {\n  text-decoration: line-through;\n  color: var(--Dark-liver);\n  user-select: none;\n}\n\n#main__task-list__list-item__title:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__list-item__title-container div:nth-child(1) {\n  flex: 1;\n}\n\n#list-arrow {\n  transition: 0.2s;\n  border-radius: 5px;\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#list-arrow:hover {\n  filter: invert(39%) sepia(36%) saturate(2261%) hue-rotate(210deg) brightness(95%) contrast(93%);\n}\n\n#list-arrow.rotate {\n  transform: rotate(180deg);\n}\n\n/* -------------------------------------------------------------- */\n/* List Item Notes */\n.main__task-list__list-item__notes-container {\n  grid-column: 1/2;\n  grid-row: 2/5;\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__notes-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__textarea {\n  resize: none;\n  height: 100%;\n  width: 100%;\n  background-color: var(--Ghost-white);\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  color: var(--Dark-liver);\n  border: none;\n}\n\n#main__task-list__list-item__textarea:focus {\n  outline: 2px solid var(--Ghost-white3);\n}\n\n/* ---------------------------------------------------------------- */\n\n/* List Item Date */\n.main__task-list__list-item__date-container {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n.main__task-list__list-item__date-title {\n  margin-bottom: 0.4rem;\n}\n\n.main__task-list__list-item__date-container > div {\n  display: flex;\n}\n\n#today-btn {\n  border-top-left-radius: var(--border-radius-value);\n  border-bottom-left-radius: var(--border-radius-value);\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n\n#tomorrow-btn {\n  border-radius: 0px;\n}\n\n#main__task-list__list-item__date {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  padding: 1rem;\n  border-top-right-radius: var(--border-radius-value);\n  border-bottom-right-radius: var(--border-radius-value);\n}\n\n.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date:hover,\n.main__task-list__list-item__date-container > div > button:hover {\n  background-color: var(--Ultra-Red);\n}\n\n#main__task-list__list-item__date:active,\n.main__task-list__list-item__date-container > div > button:active {\n  transform: translateY(1px);\n}\n\n#main__task-list__list-item__date:focus,\n.main__task-list__list-item__date-container > div > button:focus {\n  outline: none;\n  background-color: var(--Paradise-Pink);\n  position: relative;\n}\n\n/* change the color of date icon */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n  filter: invert(100%);\n}\n\n/* -------------------------------------------------------------------- */\n\n/* List Item Priority */\n.main__task-list__list-item__priority-container {\n  grid-column: 2/3;\n  grid-row: 3/4;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__priority-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__priority {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  border-radius: var(--border-radius-value);\n  outline: none;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n#main__task-list__list-item__priority option {\n  background: var(--Ghost-white);\n  color: var(--Dark-liver);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List Item Btn */\n.main__task-list__list-item__delete-task__btn {\n  justify-self: end;\n  align-self: flex-end;\n}\n\n/* ------------------------------------------------------------------------------ */\n\n/* Add Task style */\n.middle__task-list__add-task_container {\n  width: 100%;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n  display: none;\n}\n\n.middle__task-list__add-task_container.visible {\n  display: flex;\n}\n\n.middle__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.middle__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task,\n#todo__task-list__add-todo {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus,\n#todo__task-list__add-todo:focus {\n  outline: none;\n}\n',"",{version:3,sources:["webpack://./src/css/middle-section/middle-todo-list.css"],names:[],mappings:"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",sourcesContent:['.main__task-list__container {\n  width: 100%;\n  /* display: none; */\n}\n\n/* List Style */\n.main__task-list__list {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* ----------------------------------------------------------- */\n\n/* List item style */\n\n.main__task-list__list-item {\n  padding: 2rem;\n  background-color: var(--White);\n  /* min-height: 260px; */\n\n  border-radius: var(--border-radius-value);\n  border-left: 8px solid var(--battleship-gray);\n\n  display: grid;\n  grid-template-columns: 3fr 330px;\n  grid-template-rows: auto auto 1fr 2fr;\n  column-gap: 0.8rem;\n  row-gap: 1rem;\n}\n.main__task-list__list-item.visible {\n  display: block;\n}\n\n.main__task-list__list-item.low {\n  border-left: 8px solid var(--Carolina-blue);\n}\n.main__task-list__list-item.medium {\n  border-left: 8px solid var(--Maximum-yellow-red);\n}\n.main__task-list__list-item.high {\n  border-left: 8px solid var(--Orange-red-crayola);\n}\n.main__task-list__list-item.none {\n  border-left: 8px solid var(--battleship-gray);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List item header */\n.main__task-list__list-item__title-container {\n  grid-column: 1/-1;\n  grid-row: 1/2;\n  display: flex;\n  align-items: center;\n  padding: 0.4rem;\n}\n\n.main__task-list__list-item__title-container div {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n#main__task-list__list-item__title {\n  flex: 1;\n  margin-right: 1rem;\n  padding: 0.4rem;\n  border: none;\n  border-radius: 5px;\n}\n\n/* when checkbox is active */\n.checked {\n  text-decoration: line-through;\n  color: var(--Dark-liver);\n  user-select: none;\n}\n\n#main__task-list__list-item__title:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__list-item__title-container div:nth-child(1) {\n  flex: 1;\n}\n\n#list-arrow {\n  transition: 0.2s;\n  border-radius: 5px;\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#list-arrow:hover {\n  filter: invert(39%) sepia(36%) saturate(2261%) hue-rotate(210deg) brightness(95%) contrast(93%);\n}\n\n#list-arrow.rotate {\n  transform: rotate(180deg);\n}\n\n/* -------------------------------------------------------------- */\n/* List Item Notes */\n.main__task-list__list-item__notes-container {\n  grid-column: 1/2;\n  grid-row: 2/5;\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__notes-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__textarea {\n  resize: none;\n  height: 100%;\n  width: 100%;\n  background-color: var(--Ghost-white);\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  color: var(--Dark-liver);\n  border: none;\n}\n\n#main__task-list__list-item__textarea:focus {\n  outline: 2px solid var(--Ghost-white3);\n}\n\n/* ---------------------------------------------------------------- */\n\n/* List Item Date */\n.main__task-list__list-item__date-container {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n.main__task-list__list-item__date-title {\n  margin-bottom: 0.4rem;\n}\n\n.main__task-list__list-item__date-container > div {\n  display: flex;\n}\n\n#today-btn {\n  border-top-left-radius: var(--border-radius-value);\n  border-bottom-left-radius: var(--border-radius-value);\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n\n#tomorrow-btn {\n  border-radius: 0px;\n}\n\n#main__task-list__list-item__date {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  padding: 1rem;\n  border-top-right-radius: var(--border-radius-value);\n  border-bottom-right-radius: var(--border-radius-value);\n}\n\n.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date:hover,\n.main__task-list__list-item__date-container > div > button:hover {\n  background-color: var(--Ultra-Red);\n}\n\n#main__task-list__list-item__date:active,\n.main__task-list__list-item__date-container > div > button:active {\n  transform: translateY(1px);\n}\n\n#main__task-list__list-item__date:focus,\n.main__task-list__list-item__date-container > div > button:focus {\n  outline: none;\n  background-color: var(--Paradise-Pink);\n  position: relative;\n}\n\n/* change the color of date icon */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n  filter: invert(100%);\n}\n\n/* -------------------------------------------------------------------- */\n\n/* List Item Priority */\n.main__task-list__list-item__priority-container {\n  grid-column: 2/3;\n  grid-row: 3/4;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__priority-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__priority {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  border-radius: var(--border-radius-value);\n  outline: none;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n#main__task-list__list-item__priority option {\n  background: var(--Ghost-white);\n  color: var(--Dark-liver);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List Item Btn */\n.main__task-list__list-item__delete-task__btn {\n  justify-self: end;\n  align-self: flex-end;\n}\n\n/* ------------------------------------------------------------------------------ */\n\n/* Add Task style */\n.middle__task-list__add-task_container {\n  width: 100%;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n  display: none;\n}\n\n.middle__task-list__add-task_container.visible {\n  display: flex;\n}\n\n.middle__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.middle__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task,\n#todo__task-list__add-todo {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus,\n#todo__task-list__add-todo:focus {\n  outline: none;\n}\n'],sourceRoot:""}]);const s=o},511:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".middle-section__noprojects__container {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transition: var(--opacity-transition);\n  text-align: center;\n}\n\n.middle-section__noprojects__container.visible {\n  /* display: flex; */\n}\n\n.middle-section__noprojects__container > svg {\n  height: auto;\n  width: 200px;\n}\n\n.middle-section__noprojects__container h2 {\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/noproject-style.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,gCAAgC;EAChC,qCAAqC;EACrC,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;AACA",sourcesContent:[".middle-section__noprojects__container {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transition: var(--opacity-transition);\n  text-align: center;\n}\n\n.middle-section__noprojects__container.visible {\n  /* display: flex; */\n}\n\n.middle-section__noprojects__container > svg {\n  height: auto;\n  width: 200px;\n}\n\n.middle-section__noprojects__container h2 {\n}\n"],sourceRoot:""}]);const s=o},534:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,":root {\n  --rich-black: #0e0e0f;\n  --eerie-black: #212121;\n  --gainsboro: #dbd6dd;\n  --battleship-gray: #898989;\n  --desert-sand: #ebbca1;\n  --white: #ffff;\n  --canary: #fff689;\n  --Verdigris: #28afb0;\n  --Orange-Yellow-Crayola: #f4d35e;\n  --Orange-red-crayola: #ff5757;\n  --Paradise-Pink: #ef476f;\n  --Caribian-Green: #06cfd6;\n  --Ultra-Red: #ff6978;\n  --Baby-Powder: #fffcf9;\n  --Celeste: #b1ede8;\n  --Carolina-blue: #4e9fd1;\n  --Robin-egg-blue: #42c7c8;\n  --Blue-yonder: #4874a8;\n  --Cyber-grape: #5e4170;\n  --Purple-Navy: #595386;\n  --Pistachio: #8ac06d;\n  --Maximum-yellow-red: #ffcc74;\n  --Blue-sapphire: #125d82;\n  --Magnolia: #e5e2eb;\n  --Ghost-white: #f1f4fd;\n  --Ghost-white2: #f7f6fb;\n  --Ghost-white3: #e3e6ed;\n  --Ultramarine-blue: #5468ea;\n  --White: #ffffff;\n  --Dark-liver: #7b7c8e;\n\n  /* ----border--- */\n  --top-radius: 30px 30px 0px 0px;\n  --bottom-radius: 0px 0px 30px 30px;\n  --bottom-radius-section: 0px 0px 0px 30px;\n\n  /* DATE Input border radius */\n  --border-radius-value: 10px;\n\n  /* Box-Shadows */\n  --box-shadows: 1px 1px 2px 1px #ededed;\n\n  /* Opacity transition */\n  --opacity-transition: 0.25s;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 62.5%;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 5rem;\n  background-color: var(--Magnolia);\n  display: grid;\n  font-size: 1.6rem;\n  color: var(--Dark-liver);\n  font-family: Arial, Helvetica, sans-serif;\n  /*   --jb-date-input-value-color: var(--White);\n  --jb-date-input-bgcolor: var(--Ultramarine-blue);\n  --jb-date-input-box-height: max-content;\n  --jb-date-input-margin: 1rem; */\n}\n\nbutton {\n  padding: 1.2rem 2rem;\n  border: none;\n  cursor: pointer;\n  border-radius: var(--border-radius-value);\n  background-color: var(--Ultramarine-blue);\n  color: var(--Ghost-white);\n}\n\nbutton:hover {\n  transform: scaleX(1.025);\n  transition: 0.1s;\n  background-color: var(--Ultra-Red);\n}\n\nbutton:active {\n  transform: translateY(2px);\n  transition: 0.1s;\n  background-color: var(--Paradise-Pink);\n}\n\nbutton,\nlabel,\ninput,\ntextarea,\nselect,\noption {\n  font-size: 1.6rem;\n  font-family: inherit;\n}\n\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\nh2,\nh3 {\n  color: var(--eerie-black);\n}\n\nsvg {\n  fill: var(--Dark-liver);\n  height: auto;\n  width: 24px;\n}\n\n#bg {\n  border-radius: 35px;\n  background-color: var(--White);\n  display: grid;\n  grid-template-rows: max-content auto;\n}\n\nheader {\n  background-color: var(--White);\n  padding: 2rem;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n}\n\nmain {\n  display: flex;\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\n\n.visible {\n  display: block;\n}\n\n.flex {\n  display: flex !important;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.active {\n  background-color: var(--Ghost-white);\n}\n\n.opacityOn {\n  opacity: 1 !important;\n}\n\n.opacityOff {\n  opacity: 0 !important;\n}\n","",{version:3,sources:["webpack://./src/css/shared-style.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,oBAAoB;EACpB,0BAA0B;EAC1B,sBAAsB;EACtB,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,gCAAgC;EAChC,6BAA6B;EAC7B,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;EACpB,sBAAsB;EACtB,kBAAkB;EAClB,wBAAwB;EACxB,yBAAyB;EACzB,sBAAsB;EACtB,sBAAsB;EACtB,sBAAsB;EACtB,oBAAoB;EACpB,6BAA6B;EAC7B,wBAAwB;EACxB,mBAAmB;EACnB,sBAAsB;EACtB,uBAAuB;EACvB,uBAAuB;EACvB,2BAA2B;EAC3B,gBAAgB;EAChB,qBAAqB;;EAErB,kBAAkB;EAClB,+BAA+B;EAC/B,kCAAkC;EAClC,yCAAyC;;EAEzC,6BAA6B;EAC7B,2BAA2B;;EAE3B,gBAAgB;EAChB,sCAAsC;;EAEtC,uBAAuB;EACvB,2BAA2B;AAC7B;;AAEA;;;EAGE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,iCAAiC;EACjC,aAAa;EACb,iBAAiB;EACjB,wBAAwB;EACxB,yCAAyC;EACzC;;;iCAG+B;AACjC;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,eAAe;EACf,yCAAyC;EACzC,yCAAyC;EACzC,yBAAyB;AAC3B;;AAEA;EACE,wBAAwB;EACxB,gBAAgB;EAChB,kCAAkC;AACpC;;AAEA;EACE,0BAA0B;EAC1B,gBAAgB;EAChB,sCAAsC;AACxC;;AAEA;;;;;;EAME,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;;EAEE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;EAC9B,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,+BAA+B;EAC/B,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,mCAAmC;AACrC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:[":root {\n  --rich-black: #0e0e0f;\n  --eerie-black: #212121;\n  --gainsboro: #dbd6dd;\n  --battleship-gray: #898989;\n  --desert-sand: #ebbca1;\n  --white: #ffff;\n  --canary: #fff689;\n  --Verdigris: #28afb0;\n  --Orange-Yellow-Crayola: #f4d35e;\n  --Orange-red-crayola: #ff5757;\n  --Paradise-Pink: #ef476f;\n  --Caribian-Green: #06cfd6;\n  --Ultra-Red: #ff6978;\n  --Baby-Powder: #fffcf9;\n  --Celeste: #b1ede8;\n  --Carolina-blue: #4e9fd1;\n  --Robin-egg-blue: #42c7c8;\n  --Blue-yonder: #4874a8;\n  --Cyber-grape: #5e4170;\n  --Purple-Navy: #595386;\n  --Pistachio: #8ac06d;\n  --Maximum-yellow-red: #ffcc74;\n  --Blue-sapphire: #125d82;\n  --Magnolia: #e5e2eb;\n  --Ghost-white: #f1f4fd;\n  --Ghost-white2: #f7f6fb;\n  --Ghost-white3: #e3e6ed;\n  --Ultramarine-blue: #5468ea;\n  --White: #ffffff;\n  --Dark-liver: #7b7c8e;\n\n  /* ----border--- */\n  --top-radius: 30px 30px 0px 0px;\n  --bottom-radius: 0px 0px 30px 30px;\n  --bottom-radius-section: 0px 0px 0px 30px;\n\n  /* DATE Input border radius */\n  --border-radius-value: 10px;\n\n  /* Box-Shadows */\n  --box-shadows: 1px 1px 2px 1px #ededed;\n\n  /* Opacity transition */\n  --opacity-transition: 0.25s;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 62.5%;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 5rem;\n  background-color: var(--Magnolia);\n  display: grid;\n  font-size: 1.6rem;\n  color: var(--Dark-liver);\n  font-family: Arial, Helvetica, sans-serif;\n  /*   --jb-date-input-value-color: var(--White);\n  --jb-date-input-bgcolor: var(--Ultramarine-blue);\n  --jb-date-input-box-height: max-content;\n  --jb-date-input-margin: 1rem; */\n}\n\nbutton {\n  padding: 1.2rem 2rem;\n  border: none;\n  cursor: pointer;\n  border-radius: var(--border-radius-value);\n  background-color: var(--Ultramarine-blue);\n  color: var(--Ghost-white);\n}\n\nbutton:hover {\n  transform: scaleX(1.025);\n  transition: 0.1s;\n  background-color: var(--Ultra-Red);\n}\n\nbutton:active {\n  transform: translateY(2px);\n  transition: 0.1s;\n  background-color: var(--Paradise-Pink);\n}\n\nbutton,\nlabel,\ninput,\ntextarea,\nselect,\noption {\n  font-size: 1.6rem;\n  font-family: inherit;\n}\n\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\nh2,\nh3 {\n  color: var(--eerie-black);\n}\n\nsvg {\n  fill: var(--Dark-liver);\n  height: auto;\n  width: 24px;\n}\n\n#bg {\n  border-radius: 35px;\n  background-color: var(--White);\n  display: grid;\n  grid-template-rows: max-content auto;\n}\n\nheader {\n  background-color: var(--White);\n  padding: 2rem;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n}\n\nmain {\n  display: flex;\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\n\n.visible {\n  display: block;\n}\n\n.flex {\n  display: flex !important;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.active {\n  background-color: var(--Ghost-white);\n}\n\n.opacityOn {\n  opacity: 1 !important;\n}\n\n.opacityOff {\n  opacity: 0 !important;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var d=n[s],l=r.base?d[0]+r.base:d[0],A=i[l]||0,c="".concat(l," ").concat(A);i[l]=A+1;var u=e(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var _=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:c,updater:_,references:1})}o.push(c)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var d=r(n,a),l=0;l<i.length;l++){var A=e(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=d}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},312:(n,t,e)=>{var r=e(379),a=e.n(r),i=e(795),o=e.n(i),s=e(569),d=e.n(s),l=e(565),A=e.n(l),c=e(216),u=e.n(c),m=e(589),_=e.n(m),h=e(534),f={};f.styleTagTransform=_(),f.setAttributes=A(),f.insert=d().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=u(),a()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var p=e(973),C={};C.styleTagTransform=_(),C.setAttributes=A(),C.insert=d().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=u(),a()(p.Z,C),p.Z&&p.Z.locals&&p.Z.locals;var g=e(112),b={};b.styleTagTransform=_(),b.setAttributes=A(),b.insert=d().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=u(),a()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;var v=e(480),E={};E.styleTagTransform=_(),E.setAttributes=A(),E.insert=d().bind(null,"head"),E.domAPI=o(),E.insertStyleElement=u(),a()(v.Z,E),v.Z&&v.Z.locals&&v.Z.locals;var B=e(239),y={};y.styleTagTransform=_(),y.setAttributes=A(),y.insert=d().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=u(),a()(B.Z,y),B.Z&&B.Z.locals&&B.Z.locals;var w=e(78),k={};k.styleTagTransform=_(),k.setAttributes=A(),k.insert=d().bind(null,"head"),k.domAPI=o(),k.insertStyleElement=u(),a()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var x=e(993),T={};T.styleTagTransform=_(),T.setAttributes=A(),T.insert=d().bind(null,"head"),T.domAPI=o(),T.insertStyleElement=u(),a()(x.Z,T),x.Z&&x.Z.locals&&x.Z.locals;var D=e(243),S={};S.styleTagTransform=_(),S.setAttributes=A(),S.insert=d().bind(null,"head"),S.domAPI=o(),S.insertStyleElement=u(),a()(D.Z,S),D.Z&&D.Z.locals&&D.Z.locals;var j=e(413),M={};M.styleTagTransform=_(),M.setAttributes=A(),M.insert=d().bind(null,"head"),M.domAPI=o(),M.insertStyleElement=u(),a()(j.Z,M),j.Z&&j.Z.locals&&j.Z.locals;var U=e(356),W={};W.styleTagTransform=_(),W.setAttributes=A(),W.insert=d().bind(null,"head"),W.domAPI=o(),W.insertStyleElement=u(),a()(U.Z,W),U.Z&&U.Z.locals&&U.Z.locals;var P=e(511),L={};L.styleTagTransform=_(),L.setAttributes=A(),L.insert=d().bind(null,"head"),L.domAPI=o(),L.insertStyleElement=u(),a()(P.Z,L),P.Z&&P.Z.locals&&P.Z.locals;var I=e(628),q={};q.styleTagTransform=_(),q.setAttributes=A(),q.insert=d().bind(null,"head"),q.domAPI=o(),q.insertStyleElement=u(),a()(I.Z,q),I.Z&&I.Z.locals&&I.Z.locals;const Y=document.querySelector("#main__task-list__add-task"),Z=document.querySelector(".left-section__projects__container ul"),N=(document.querySelectorAll(".project-list__item"),document.querySelector("#project"),document.querySelector(".left-section__home-container")),G=document.querySelector(".middle-section__noprojects__container"),O=(document.getElementById("middle-section"),document.querySelector(".main__container__header")),z=document.querySelector(".main__container__header h2"),R=document.querySelector(".main__header__sort-container__options"),F=(document.querySelector(".main__sorting-order"),document.querySelector(".middle__task-list__add-task_container")),$=document.querySelector(".main__task-list__list"),H=document.querySelector(".main__header__sort-container"),X=(document.querySelector(".main__sorting-order svg"),[]);function Q(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function J(n){Q(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function V(n){Q(1,arguments);var t=J(n);return t.setHours(0,0,0,0),t}function K(n,t){Q(2,arguments);var e=V(n),r=V(t);return e.getTime()===r.getTime()}function nn(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function tn(n,t){Q(2,arguments);var e=J(n),r=nn(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}const en=e.p+"0be814bb653e77d8cd3d.png",rn=e.p+"d2b37933bf5bce199fde.png";function an(){const n=document.createElement("li");n.id=this.id,n.setAttribute("data-project-id",this.id),n.className="project-list__item";const t=`\n         <input value="${this.name}" id="projectInput">\n            <img src=${en} id="garbageIcon">`;return n.insertAdjacentHTML("beforeend",t),Z.append(n),Z}function on(){const n=document.querySelector(".main__task-list__list"),t=`<li \n  class="main__task-list__list-item ${_n.call(this)} visible" \n  data-todo-id = ${this.todoId} data-projectId = ${this.projectId} >\n   \x3c!-- Header --\x3e\n   <div class="main__task-list__list-item__title-container">\n      <div>\n         <label for="main__task-list__list-item__checkbox"></label>\n         <input\n         type="checkbox" ${this.checkbox}\n         id="main__task-list__list-item__checkbox "\n         />\n         <label for="main__task-list__list-item__title"></label>\n         <input type="text" id="main__task-list__list-item__title" class="${this.checkbox}"\n         value="${this.todoName}"\n         ${hn.call(this)} />\n      </div>\n      <div>\n         <p class="main__task-list__list-item__date-reference"\n         data-reference-id = ${this.todoId}>\n         Due Date ${gn.call(this)}</p>\n        <img src=${rn} id="list-arrow" data-chevron-id=${this.todoId} alt="chevron icon" />\n\n      </div>\n   </div>\n   \x3c!-- Notes --\x3e\n   <div class="main__task-list__list-item__notes-container hidden">\n      <label for="main__task-list__list-item__textarea"\n         >Notes</label\n         >\n      <textarea\n         id="main__task-list__list-item__textarea"\n         data-textarea-id = ${this.todoId}\n         placeholder = "Add your notes here..."\n         >${this.notes}</textarea>\n   </div>\n   \x3c!-- Date --\x3e\n   <div class="main__task-list__list-item__date-container hidden">\n      <p class="main__task-list__list-item__date-title">Due Date</p>\n      <div>\n         <button \n         id="today-btn" \n         data-date="today" \n         data-today-id=${this.todoId}\n         class="${fn.call(this)}" >\n         Today\n         </button>\n\n         <button \n         id="tomorrow-btn"\n         data-date="tomorrow" \n         data-tomorrow-id = ${this.todoId}\n         class="${pn.call(this)}"\n         >Tomorrow\n         </button>\n\n         <label for="main__task-list__list-item__date">\n         </label>\n         <input type="date" \n         value ="${bn.call(this)}" \n         id="main__task-list__list-item__date" \n         class="${Cn.call(this)}"\n         data-date="specific" \n         data-specific-id="${this.todoId}">\n      </div>\n   </div>\n   \x3c!-- Priority --\x3e\n   <div class="main__task-list__list-item__priority-container hidden">\n      <label for="main__task-list__list-item__priority"\n         >Priority</label\n         >\n      <select\n         name="select-priority"\n         id="main__task-list__list-item__priority"\n         data-select-id = ${this.todoId}\n         >\n         <option value="none" selected="Select an option" disabled hidden>\n            ${mn.call(this)}\n         </option>\n         <option value="low">Low</option>\n         <option value="medium">Medium</option>\n         <option value="high">High</option>\n         <option value="no">None</option>\n      </select>\n   </div>\n   \x3c!-- Delete Btn --\x3e\n   <button id="delete" class="main__task-list__list-item__delete-task__btn hidden">\n   Delete\n   </button>\n</li>`;return n.insertAdjacentHTML("beforeend",t)}let sn;function dn(n){sn&&sn.classList.remove("active"),sn=n,sn.classList.add("active")}function ln(){X.length||localStorage.length?G.classList.add("hidden"):G.classList.remove("hidden")}function An(){return Math.floor(9999*Math.random())}function cn(){return JSON.parse(localStorage.getItem("projects")||[])}function un(n){localStorage.setItem("projects",JSON.stringify(n))}function mn(){return this.priority?this.priority?this.priority.charAt(0).toUpperCase()+this.priority.slice(1):void 0:"Select an option"}function _n(){return this.priority?this.priority?this.priority.toLowerCase():void 0:this.priority}function hn(){return this.checkbox?this.checkbox?"disabled":void 0:""}function fn(){return this.dateId?"today"===this.dateId?"activeDate":void 0:""}function pn(){return this.dateId?"tomorrow"===this.dateId?"activeDate":void 0:""}function Cn(){return this.dateId?"specific"===this.dateId?"activeDate":void 0:""}function gn(){return this.date}function bn(){const n=new Date(this.date),t=function(n){return Q(1,arguments),K(n,Date.now())}(n),e=function(n){return Q(1,arguments),K(n,tn(Date.now(),1))}(n);return t||e?"":this.date}function vn(){let n=[];cn().forEach((t=>{n.push(...t.todoList)}));const t=n.filter((n=>"today"===n.dateId)),e=n.filter((n=>"tomorrow"===n.dateId)),r=n.filter((n=>"specific"===n.dateId));return{allArray:n,todayArray:t,tomorrowArray:e,scheduledArray:r}}function En(){const n=vn(),t=document.querySelector(".left-section__home-container__all-tasks"),e=document.querySelector(".left-section__home-container__today"),r=document.querySelector(".left-section__home-container__tomorrow"),a=document.querySelector(".left-section__home-container__scheduled");t.lastElementChild.textContent=n.allArray.length,e.lastElementChild.textContent=n.todayArray.length,r.lastElementChild.textContent=n.tomorrowArray.length,a.lastElementChild.textContent=n.scheduledArray.length}function Bn(n,t){return n.findIndex((n=>n.id===+t))}class yn{constructor(n,t){this.name=n,this.id=t,this.todoList=[]}}class wn{constructor(n,t,e){this.todoName=n,this.projectId=t,this.todoId=e,this.date="",this.notes="",this.priority="",this.checkbox="",this.dateId=""}}function kn(){O.setAttribute("data-project-id",this.id),F.lastElementChild.setAttribute("data-project-Todo-ID",this.id)}function xn(n){return Q(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function Tn(n){if(Q(1,arguments),!xn(n)&&"number"!=typeof n)return!1;var t=J(n);return!isNaN(Number(t))}var Dn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Sn(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}const jn={date:Sn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Sn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Sn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Mn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Un(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,d=a.width?String(a.width):n.defaultWidth;r=n.values[d]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const Wn={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:Un({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Un({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Un({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Un({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Un({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Pn(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(d)?In(d,(function(n){return n.test(s)})):Ln(d,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=e.valueCallback?e.valueCallback(o):o;var A=t.slice(s.length);return{value:o,rest:A}}}function Ln(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function In(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var qn,Yn={ordinalNumber:(qn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(qn.matchPattern);if(!e)return null;var r=e[0],a=n.match(qn.parsePattern);if(!a)return null;var i=qn.valueCallback?qn.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:Pn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Pn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Pn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Pn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Pn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Zn={code:"en-US",formatDistance:function(n,t,e){var r,a=Dn[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:jn,formatRelative:function(n,t,e,r){return Mn[n]},localize:Wn,match:Yn,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Nn(n,t){Q(2,arguments);var e=J(n).getTime(),r=nn(t);return new Date(e+r)}function Gn(n,t){Q(2,arguments);var e=nn(t);return Nn(n,-e)}var On=864e5;function zn(n){Q(1,arguments);var t=1,e=J(n),r=e.getUTCDay(),a=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function Rn(n){Q(1,arguments);var t=J(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=zn(r),i=new Date(0);i.setUTCFullYear(e,0,4),i.setUTCHours(0,0,0,0);var o=zn(i);return t.getTime()>=a.getTime()?e+1:t.getTime()>=o.getTime()?e:e-1}function Fn(n){Q(1,arguments);var t=Rn(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=zn(e);return r}var $n=6048e5;function Hn(n,t){Q(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:nn(a),o=null==e.weekStartsOn?i:nn(e.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=J(n),d=s.getUTCDay(),l=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-l),s.setUTCHours(0,0,0,0),s}function Xn(n,t){Q(1,arguments);var e=J(n),r=e.getUTCFullYear(),a=t||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:nn(o),d=null==a.firstWeekContainsDate?s:nn(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,d),l.setUTCHours(0,0,0,0);var A=Hn(l,t),c=new Date(0);c.setUTCFullYear(r,0,d),c.setUTCHours(0,0,0,0);var u=Hn(c,t);return e.getTime()>=A.getTime()?r+1:e.getTime()>=u.getTime()?r:r-1}function Qn(n,t){Q(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:nn(a),o=null==e.firstWeekContainsDate?i:nn(e.firstWeekContainsDate),s=Xn(n,t),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var l=Hn(d,t);return l}var Jn=6048e5;function Vn(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const Kn=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return Vn("yy"===t?r%100:r,t.length)},nt=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):Vn(e+1,2)},tt=function(n,t){return Vn(n.getUTCDate(),t.length)},et=function(n,t){return Vn(n.getUTCHours()%12||12,t.length)},rt=function(n,t){return Vn(n.getUTCHours(),t.length)},at=function(n,t){return Vn(n.getUTCMinutes(),t.length)},it=function(n,t){return Vn(n.getUTCSeconds(),t.length)},ot=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return Vn(Math.floor(r*Math.pow(10,e-3)),t.length)};var st={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return Kn(n,t)},Y:function(n,t,e,r){var a=Xn(n,r),i=a>0?a:1-a;return"YY"===t?Vn(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):Vn(i,t.length)},R:function(n,t){return Vn(Rn(n),t.length)},u:function(n,t){return Vn(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return Vn(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return Vn(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return nt(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return Vn(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){Q(1,arguments);var e=J(n),r=Hn(e,t).getTime()-Qn(e,t).getTime();return Math.round(r/Jn)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):Vn(a,t.length)},I:function(n,t,e){var r=function(n){Q(1,arguments);var t=J(n),e=zn(t).getTime()-Fn(t).getTime();return Math.round(e/$n)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):Vn(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):tt(n,t)},D:function(n,t,e){var r=function(n){Q(1,arguments);var t=J(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=e-r;return Math.floor(a/On)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):Vn(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return Vn(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return Vn(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return Vn(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return et(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):rt(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):Vn(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):Vn(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):at(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):it(n,t)},S:function(n,t){return ot(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return lt(a);case"XXXX":case"XX":return At(a);default:return At(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return lt(a);case"xxxx":case"xx":return At(a);default:return At(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+dt(a,":");default:return"GMT"+At(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+dt(a,":");default:return"GMT"+At(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return Vn(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return Vn((r._originalDate||n).getTime(),t.length)}};function dt(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+Vn(i,2)}function lt(n,t){return n%60==0?(n>0?"-":"+")+Vn(Math.abs(n)/60,2):At(n,t)}function At(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+Vn(Math.floor(a/60),2)+e+Vn(a%60,2)}const ct=st;function ut(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function mt(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const _t={p:mt,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return ut(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",ut(a,t)).replace("{{time}}",mt(i,t))}};function ht(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var ft=["D","DD"],pt=["YY","YYYY"];function Ct(n){return-1!==ft.indexOf(n)}function gt(n){return-1!==pt.indexOf(n)}function bt(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var vt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Bt=/^'([^]*?)'?$/,yt=/''/g,wt=/[a-zA-Z]/;function kt(n,t,e){Q(2,arguments);var r=String(t),a=e||{},i=a.locale||Zn,o=i.options&&i.options.firstWeekContainsDate,s=null==o?1:nn(o),d=null==a.firstWeekContainsDate?s:nn(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=i.options&&i.options.weekStartsOn,A=null==l?0:nn(l),c=null==a.weekStartsOn?A:nn(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var u=J(n);if(!Tn(u))throw new RangeError("Invalid time value");var m=ht(u),_=Gn(u,m),h={firstWeekContainsDate:d,weekStartsOn:c,locale:i,_originalDate:u},f=r.match(Et).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,_t[t])(n,i.formatLong,h):n})).join("").match(vt).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return xt(e);var o=ct[r];if(o)return!a.useAdditionalWeekYearTokens&&gt(e)&&bt(e,t,n),!a.useAdditionalDayOfYearTokens&&Ct(e)&&bt(e,t,n),o(_,e,i.localize,h);if(r.match(wt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return f}function xt(n){return n.match(Bt)[1].replace(yt,"'")}const Tt="today",Dt="tomorrow",St="specific";function jt(n,t){const e=document.querySelector(`[data-specific-id="${t}"]`),r=document.querySelector(`[data-reference-id="${t}"]`);var a,i,o,s,d;"today"===n&&(this.dateId=n,this.date=kt(new Date,"yyyy-MM-dd")),"tomorrow"===n&&(this.dateId=n,this.date=kt((i=(a=new Date).getFullYear(),o=a.getMonth(),s=a.getDate(),(d=new Date(0)).setFullYear(i,o,s+1),d.setHours(0,0,0,0),d),"yyyy-MM-dd")),"specific"===n&&(this.dateId=n,this.date=e.value),r.textContent=`Due Date ${this.date}`,un(X)}const Mt=function(){let n=!0;return function(){return n=!n,n}}();function Ut(n){let t;return"low"===n?(t=3,t):"medium"===n?(t=2,t):"high"===n?(t=1,t):n&&"no"!==n?void 0:(t=4,t)}window.addEventListener("load",(function(){localStorage.length&&(cn().forEach((n=>{X.push(n),an.call(n)})),En(),ln())})),N.addEventListener("click",(function(n){const t=n.target.closest("div"),e=t.children[1].textContent,r=n.target.closest("div").dataset.array;if(!localStorage.length||!r)return;const{[r]:a}=vn();var i,o,s;a.length&&(i=r,o=e,s=a,dn(t),H.setAttribute("data-mode",`${i}`),z.textContent=o,O.classList.add("visible"),F.classList.remove("visible"),$.replaceChildren(),s.forEach((n=>on.call(n))))})),Y.addEventListener("keypress",(function(n){const t=n.target.value,e=An(),r=new yn(t,e);"Enter"===n.key&&""!==Y.value&&(X.push(r),un(X),Y.value="",an.call(r)),ln()})),Z.addEventListener("click",(function(n){const t=n.target.closest("li");if(!t)return;const e=t.parentElement,r=n.target.parentElement.dataset.projectId||t.dataset.projectId,a=Bn(X,r),i=X[a];var o,s,d,l;dn(t),z.textContent=i.name,kn.call(i),O.classList.add("visible"),F.classList.add("visible"),o=i,H.setAttribute("data-mode",!1),$.replaceChildren(),o.todoList.forEach((n=>{on.call(n)})),"garbageIcon"===n.target.id&&(s=t,d=e,l=a,O.classList.remove("visible"),F.classList.remove("visible"),z.textContent="",function(n,t,e){!function(n,t){n.splice(t,1)}(X,e),t.removeChild(n),$.replaceChildren()}(s,d,l),un(X),En(),X.length||($.replaceChildren(),localStorage.clear(),ln()))})),Z.addEventListener("keypress",(function(n){const t=n.target.value,e=n.target.parentElement.dataset.projectId;"Enter"===n.key&&t&&X.filter((n=>n.id===Number(e))).map((n=>(n.name=t,z.textContent=n.name,un(X),n)))})),F.addEventListener("keypress",(function(n){const t=n.target.closest("input"),e=t.value,r=n.target.dataset.projectTodoId,a=Bn(X,r);if("Enter"===n.key&&""!==t.value){const n=new wn(e,r,An());X[a].todoList.push(n),un(X),on.call(n),t.value="",En()}})),$.addEventListener("click",(function(n){const t=n.target.closest("li");if(!t)return;const e=t.dataset.todoId,r=t.dataset.projectid,a=Bn(X,r),i=X[a].todoList,o=(s=e,i.findIndex((n=>n.todoId===+s)));var s;X[a];const d=n.target.dataset,l=n.target.id,A=n.target.checked,c=n.target.parentElement.lastElementChild,u=document.querySelector(`[data-select-id ="${e}"]`),m=i[o],_=document.getElementById("main__task-list__list-item__date");!function(n,t,e){const r=document.querySelector(`[data-chevron-id="${e}"]`);if("list-arrow"===n){r.classList.toggle("rotate"),t.classList.toggle("visible");for(let n=1;n<t.childElementCount;n++)t.children[n].classList.toggle("hidden")}}(l,t,e),function(n,t,e,r){"delete"===n&&(X[t].todoList.splice(e,1),$.removeChild(r),un(X),En())}(l,a,o,t),function(n,t,e,r,a){"checkbox"===n.target.type&&t.classList.toggle("checked",e),e&&"checkbox"===n.target.type&&(r[a].checkbox="checked",t.disabled=e,un(X)),e||"checkbox"!==n.target.type||(r[a].checkbox="",t.disabled=e,un(X))}(n,c,A,i,o),function(n,t,e,r){n.date!==Tt&&n.date!==Dt&&n.date!==St||(jt.call(e,n.date,t),$.addEventListener("change",(()=>{const r=document.querySelector(`[data-reference-id="${t}"]`),{date:a}=e;r.textContent=a,jt.call(e,n.date,t),En()})),En(),function(n,t,e,r,a){const i=document.querySelector(`[data-today-id="${n}"]`),o=document.querySelector(`[data-tomorrow-id="${n}"]`),s=document.querySelector(`[data-specific-id ="${n}"]`);i.classList.toggle("activeDate","today"===a.date),o.classList.toggle("activeDate","tomorrow"===a.date),s.classList.toggle("activeDate","specific"===a.date)}(t,0,0,0,n),function(n,t){n.date!==Tt&&n.date!==Dt||(t.value="")}(n,r))}(d,e,m,_),function(n,t,e){"none"!==e.value&&n.hasOwnProperty("priority")&&(n.priority=e.value,t.classList.toggle("low","low"===e.value),t.classList.toggle("medium","medium"===e.value),t.classList.toggle("high","high"===e.value),un(X))}(m,t,u)})),$.addEventListener("keypress",(function(n){const t=n.target.closest("input");if(!t)return;const e=n.target.value,r=Number(t.parentElement.parentElement.parentElement.dataset.projectid),a=Number(t.parentElement.parentElement.parentElement.dataset.todoId),i=Bn(X,r);!function(n,t,e,r,a){"Enter"===n.key&&t.filter((n=>n.todoId===a)).map((n=>(n.todoName=r,e.value=n.todoName,un(X),n)))}(n,X[i].todoList,t,e,a)})),$.addEventListener("keypress",(function(n){const t=n.target.closest("textarea");if(!t)return;const e=t.dataset.textareaId,r=Number(t.parentElement.parentElement.dataset.projectid),a=X.findIndex((n=>n.id===Number(r))),i=X[a].todoList.findIndex((n=>n.todoId===Number(e))),o=X[a];X.includes(o)&&function(n,t,e,r){"Enter"===n.key&&(t[r].notes=e.value,un(X))}(n,X[a].todoList,t,i)})),H.addEventListener("click",(function(){R.classList.toggle("visible")})),R.addEventListener("click",(function(n){const t=n.target.closest("div div > p");if(!t)return;const e=+O.dataset.projectId||X[0].id,r=Bn(X,e),a=X[r].todoList,i="Priority"===(o=t.textContent)?"priority":"Alphabetically"===o?"todoName":"Due Date"===o?"date":"";var o;const s=function(n,t,e,r){const{[n]:a=t}=vn();return a.sort(function(n,t){return"priority"===n?t?function(t,e){return Ut(t[n])<Ut(e[n])?-1:Ut(t[n])>Ut(e[n])?1:0}:function(t,e){return Ut(t[n])>Ut(e[n])?-1:Ut(t[n])<Ut(e[n])?1:0}:t?function(t,e){if(t[n]&&e[n])return t[n].toLowerCase()<e[n].toLowerCase()?-1:t[n].toLowerCase()>e[n].toLowerCase()?1:0}:function(t,e){if(t[n]&&e[n])return t[n].toLowerCase()>e[n].toLowerCase()?-1:t[n].toLowerCase()<e[n].toLowerCase()?1:0}}(e,r))}(H.getAttribute("data-mode"),a,i,Mt());var d;d=t,R.classList.toggle("visible",!d),function(n){$.innerHTML="",n.forEach((n=>{on.call(n)}))}(s)}))}},n=>{n(n.s=312)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBVTNFLEVBQUdFLEdBQ2xCLE9BQU8wRSxHQUFZNUUsRUFBRTRJLElBQWFoRSxHQUFZMUUsRUFBRTBJLEtBQzNDLEVBQ0RoRSxHQUFZNUUsRUFBRTRJLElBQWFoRSxHQUFZMUUsRUFBRTBJLElBQ3pDLEVBQ0EsR0FHQyxTQUFVNUksRUFBR0UsR0FDbEIsT0FBTzBFLEdBQVk1RSxFQUFFNEksSUFBYWhFLEdBQVkxRSxFQUFFMEksS0FDM0MsRUFDRGhFLEdBQVk1RSxFQUFFNEksSUFBYWhFLEdBQVkxRSxFQUFFMEksSUFDekMsRUFDQSxHQUtOakUsRUFDSyxTQUFVM0UsRUFBR0UsR0FDbEIsR0FBS0YsRUFBRTRJLElBQWMxSSxFQUFFMEksR0FDdkIsT0FBTzVJLEVBQUU0SSxHQUFVeFcsY0FBZ0I4TixFQUFFMEksR0FBVXhXLGVBQzFDLEVBQ0Q0TixFQUFFNEksR0FBVXhXLGNBQWdCOE4sRUFBRTBJLEdBQVV4VyxjQUN4QyxFQUNBLEdBR0MsU0FBVTROLEVBQUdFLEdBQ2xCLEdBQUtGLEVBQUU0SSxJQUFjMUksRUFBRTBJLEdBQ3ZCLE9BQU81SSxFQUFFNEksR0FBVXhXLGNBQWdCOE4sRUFBRTBJLEdBQVV4VyxlQUMxQyxFQUNENE4sRUFBRTRJLEdBQVV4VyxjQUFnQjhOLEVBQUUwSSxHQUFVeFcsY0FDeEMsRUFDQSxHQVF5QjBXLENBQVFGLEVBQVVqRSxJQWtEL0JvRSxDQURILGVBQW1DLGFBQ2JyQyxFQUFXZ0MsRUFBY2hFLE1BZGxFLElBQXVDc0UsRUFBQUEsRUFnQlBQLEVBZjlCLG1CQUFxRCxXQUFZTyxHQWxDbkUsU0FBMkJMLEdBQ3pCLFlBQWdDLEdBQ2hDQSxFQUFZMVYsU0FBU2dULElBQ25CLFFBQTRDQSxNQWdEOUNnRCxDQUFrQk4sUSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvaGVhZGVyLXN0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9hZGQtcHJvamVjdC1idG4uY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbGVmdC1zZWN0aW9uL2hvbWUtY29udGFpbmVyLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9tYWluLWxlZnQtc3R5bGUuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbGVmdC1zZWN0aW9uL3Byb2plY3QtY29udGFpbmVyLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9wcm9qZWN0LWNyZWF0ZS1mb3JtLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21haW4tbWlkZGxlLXN0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21pZGRsZS1oZWFkZXIuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbWlkZGxlLXNvcnRpbmctYm94LmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21pZGRsZS10b2RvLWxpc3QuY3NzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbm9wcm9qZWN0LXN0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL3NoYXJlZC1zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3Mvc2hhcmVkLXN0eWxlLmNzcz82OThmIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbWFpbi1taWRkbGUtc3R5bGUuY3NzPzA0MmIiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2Nzcy9sZWZ0LXNlY3Rpb24vbWFpbi1sZWZ0LXN0eWxlLmNzcz82ZGMxIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbGVmdC1zZWN0aW9uL2FkZC1wcm9qZWN0LWJ0bi5jc3M/YTgyZSIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9ob21lLWNvbnRhaW5lci5jc3M/OWM0MSIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9wcm9qZWN0LWNvbnRhaW5lci5jc3M/NDI5NyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9wcm9qZWN0LWNyZWF0ZS1mb3JtLmNzcz8xOWFmIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbWlkZGxlLWhlYWRlci5jc3M/ZWM0YyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21pZGRsZS1zb3J0aW5nLWJveC5jc3M/MmJmMiIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21pZGRsZS10b2RvLWxpc3QuY3NzP2ZlMDAiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2Nzcy9taWRkbGUtc2VjdGlvbi9ub3Byb2plY3Qtc3R5bGUuY3NzPzA3MWIiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2Nzcy9oZWFkZXItc3R5bGUuY3NzP2QyZTEiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvZG9tLWVsZW1lbnRzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vdG9EYXRlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZkRheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzU2FtZURheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9yZW5kZXItcHJvamVjdC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vaXNUb2RheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVG9tb3Jyb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvcHJvamVjdC1jbGFzcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvcHJvamVjdC1JdGVtLUZ1bmN0aW9uYWxpdHkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc0RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9pc1ZhbGlkL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvbWF0Y2gvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvZm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9mb3JtYXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8tRGF0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mVG9tb3Jyb3cvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3NvcnQtdG9kb3MuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvZXZlbnQtbGlzdGVuZXJzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9qcy1tb2R1bGVzL21haW5FdmVudEZ1bmN0aW9ucy93aW5kb3ctTG9hZC5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvaG9tZS1TZWN0aW9uLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9qcy1tb2R1bGVzL21haW5FdmVudEZ1bmN0aW9ucy9wcm9qZWN0LUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvcHJvamVjdC1SZW5kZXItVG9kby5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvcHJvamVjdC1EZWxldGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3Byb2plY3QtUmVuYW1lLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9qcy1tb2R1bGVzL21haW5FdmVudEZ1bmN0aW9ucy90b2RvLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvdG9kby1pdGVtLWZ1bmN0aW9uYWxpdHkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8td2luZG93LXRvZ2dsZS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvanMtbW9kdWxlcy9tYWluRXZlbnRGdW5jdGlvbnMvdG9kby1kZWxldGUuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8tY2hlY2tib3guanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8tcHJpb3JpdHkuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8tcmVuYW1lLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9qcy1tb2R1bGVzL21haW5FdmVudEZ1bmN0aW9ucy90b2RvLXRleHRBcmVhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaGVhZGVyID4gaDEge1xcbiAgcGFkZGluZy1sZWZ0OiA2cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDEwMDtcXG59XFxuaGVhZGVyID4gaDE6OmFmdGVyIHtcXG4gIGZvbnQtd2VpZ2h0OiA5MDA7XFxuICBjb250ZW50OiBcXFwiVG9kb1xcXCI7XFxuICBjb2xvcjogdmFyKC0tZWVyaWUtYmxhY2spO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2hlYWRlci1zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsZ0JBQWdCO0FBQ2xCO0FBQ0E7RUFDRSxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJoZWFkZXIgPiBoMSB7XFxuICBwYWRkaW5nLWxlZnQ6IDZyZW07XFxuICBmb250LXdlaWdodDogMTAwO1xcbn1cXG5oZWFkZXIgPiBoMTo6YWZ0ZXIge1xcbiAgZm9udC13ZWlnaHQ6IDkwMDtcXG4gIGNvbnRlbnQ6IFxcXCJUb2RvXFxcIjtcXG4gIGNvbG9yOiB2YXIoLS1lZXJpZS1ibGFjayk7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19hZGQtYnRuIHtcXG4gIG1hcmdpbjogMCBhdXRvO1xcbiAgbWluLXdpZHRoOiAxNDBweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi8qIE1ha2Ugc3BhbiByZWxhdGl2ZSBmb3IgdGhlIGFmdGVyIGNvbnRlbnQgKi9cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fYWRkLWJ0biBzcGFuIHtcXG4gIHRyYW5zaXRpb246IDAuNXM7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi8qIEFkZCBjb250ZW50ICAqL1xcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19hZGQtYnRuIHNwYW46OmFmdGVyIHtcXG4gIGNvbnRlbnQ6IFxcXCJcXFxcMDBiYlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDA7XFxuICByaWdodDogLTE4cHg7XFxuICB0cmFuc2l0aW9uOiAwLjVzO1xcbiAgb3BhY2l0eTogMDtcXG59XFxuXFxuLyogT24gc3BhbiBob3ZlciB1c2UgcGFkZGluZyAqL1xcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19hZGQtYnRuOmhvdmVyIHNwYW4ge1xcbiAgcGFkZGluZy1yaWdodDogMjBweDtcXG59XFxuXFxuLyogT24gc3BhbiBob3ZlciBtYWtlIHRoZSBhZnRlciBjb250ZW50IHZpc2libGUgYW5kIGNoYW5nZSBpdHMgcG9zaXRpb24gKi9cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fYWRkLWJ0bjpob3ZlciBzcGFuOjphZnRlciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgcmlnaHQ6IDBweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9sZWZ0LXNlY3Rpb24vYWRkLXByb2plY3QtYnRuLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsYUFBYTtBQUNmOztBQUVBLDZDQUE2QztBQUM3QztFQUNFLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEI7O0FBRUEsaUJBQWlCO0FBQ2pCO0VBQ0UsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sWUFBWTtFQUNaLGdCQUFnQjtFQUNoQixVQUFVO0FBQ1o7O0FBRUEsOEJBQThCO0FBQzlCO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBLHlFQUF5RTtBQUN6RTtFQUNFLFVBQVU7RUFDVixVQUFVO0FBQ1pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2FkZC1idG4ge1xcbiAgbWFyZ2luOiAwIGF1dG87XFxuICBtaW4td2lkdGg6IDE0MHB4O1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLyogTWFrZSBzcGFuIHJlbGF0aXZlIGZvciB0aGUgYWZ0ZXIgY29udGVudCAqL1xcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19hZGQtYnRuIHNwYW4ge1xcbiAgdHJhbnNpdGlvbjogMC41cztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLyogQWRkIGNvbnRlbnQgICovXFxuLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2FkZC1idG4gc3Bhbjo6YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXFwwMGJiXFxcIjtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIHJpZ2h0OiAtMThweDtcXG4gIHRyYW5zaXRpb246IDAuNXM7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4vKiBPbiBzcGFuIGhvdmVyIHVzZSBwYWRkaW5nICovXFxuLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2FkZC1idG46aG92ZXIgc3BhbiB7XFxuICBwYWRkaW5nLXJpZ2h0OiAyMHB4O1xcbn1cXG5cXG4vKiBPbiBzcGFuIGhvdmVyIG1ha2UgdGhlIGFmdGVyIGNvbnRlbnQgdmlzaWJsZSBhbmQgY2hhbmdlIGl0cyBwb3NpdGlvbiAqL1xcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19hZGQtYnRuOmhvdmVyIHNwYW46OmFmdGVyIHtcXG4gIG9wYWNpdHk6IDE7XFxuICByaWdodDogMHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMXJlbTtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcblxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gaDIge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlKTtcXG4gIHBhZGRpbmctYm90dG9tOiAxcmVtO1xcbiAgLyogY29sb3I6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpOyAqL1xcbn1cXG5cXG4vKiBTZWxlY3QgdGhlIGRpdnMgaW4gaG9tZSBjb250YWluZXIgICovXFxuLmxlZnQtc2VjdGlvbl9faG9tZS1jb250YWluZXIgPiBkaXYge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG87XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lciA+IGRpdjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1HaG9zdC13aGl0ZSk7XFxuXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3gtc2hhZG93OiB2YXIoLS1ib3gtc2hhZG93cyk7XFxufVxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gZGl2OmhvdmVyICoge1xcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gZGl2ID4gc3ZnOmhvdmVyIHtcXG4gIHRyYW5zaXRpb246IDAuNXMgZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9ob21lLWNvbnRhaW5lci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFNBQVM7RUFDVCxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSwyQ0FBMkM7RUFDM0Msb0JBQW9CO0VBQ3BCLG9DQUFvQztBQUN0Qzs7QUFFQSx1Q0FBdUM7QUFDdkM7RUFDRSxhQUFhO0VBQ2IseUNBQXlDO0VBQ3pDLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLG9DQUFvQztFQUNwQyxtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0Usb0NBQW9DOztFQUVwQyxlQUFlO0VBQ2YsOEJBQThCO0FBQ2hDO0FBQ0E7RUFDRSw2QkFBNkI7RUFDN0IsOEJBQThCO0FBQ2hDOztBQUVBO0VBQ0UsNEJBQTRCO0VBQzVCLHlCQUF5QjtBQUMzQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMXJlbTtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcblxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gaDIge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlKTtcXG4gIHBhZGRpbmctYm90dG9tOiAxcmVtO1xcbiAgLyogY29sb3I6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpOyAqL1xcbn1cXG5cXG4vKiBTZWxlY3QgdGhlIGRpdnMgaW4gaG9tZSBjb250YWluZXIgICovXFxuLmxlZnQtc2VjdGlvbl9faG9tZS1jb250YWluZXIgPiBkaXYge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtYXV0by1mbG93OiBjb2x1bW47XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG8gMWZyIGF1dG87XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lciA+IGRpdjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1HaG9zdC13aGl0ZSk7XFxuXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3gtc2hhZG93OiB2YXIoLS1ib3gtc2hhZG93cyk7XFxufVxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gZGl2OmhvdmVyICoge1xcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyID4gZGl2ID4gc3ZnOmhvdmVyIHtcXG4gIHRyYW5zaXRpb246IDAuNXMgZWFzZS1pbi1vdXQ7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjbGVmdC1zZWN0aW9uIHtcXG4gIGZsZXg6IDE7XFxuICBtYXgtd2lkdGg6IDQwMHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgcGFkZGluZzogMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvdHRvbS1yYWRpdXMtc2VjdGlvbik7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9sZWZ0LXNlY3Rpb24vbWFpbi1sZWZ0LXN0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLE9BQU87RUFDUCxnQkFBZ0I7RUFDaEIsOEJBQThCO0VBQzlCLGFBQWE7RUFDYiwyQ0FBMkM7O0VBRTNDLGFBQWE7RUFDYixzQkFBc0I7QUFDeEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiI2xlZnQtc2VjdGlvbiB7XFxuICBmbGV4OiAxO1xcbiAgbWF4LXdpZHRoOiA0MDBweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVdoaXRlKTtcXG4gIHBhZGRpbmc6IDJyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3R0b20tcmFkaXVzLXNlY3Rpb24pO1xcblxcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzIHtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzID4gaDIge1xcbiAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlKTtcXG5cXG4gIHBhZGRpbmctYm90dG9tOiAxcmVtO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsID4gbGkge1xcbiAgbWFyZ2luLXRvcDogMXJlbTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLWF1dG8tZmxvdzogY29sdW1uO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIG1heC1jb250ZW50O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC41cmVtO1xcbn1cXG5cXG4jcHJvamVjdElucHV0IHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMC44cmVtIDFyZW07XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcblxcbiNwcm9qZWN0SW5wdXQ6Zm9jdXMge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlMyk7XFxufVxcblxcbiNnYXJiYWdlSWNvbiB7XFxuICBmaWx0ZXI6IGludmVydCg1MyUpIHNlcGlhKDE2JSkgc2F0dXJhdGUoMzI2JSkgaHVlLXJvdGF0ZSgxOTlkZWcpIGJyaWdodG5lc3MoOTAlKSBjb250cmFzdCg4OCUpO1xcbn1cXG5cXG4jZ2FyYmFnZUljb246aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjIpO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsID4gbGk6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcbiAgYm94LXNoYWRvdzogdmFyKC0tYm94LXNoYWRvd3MpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4vKiBTZWxlY3QgYWxsIHAgd2hlbiBsaSBpcyBob3ZlciAqL1xcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19jb250YWluZXIgdWwgPiBsaTpob3ZlciBwIHtcXG4gIGNvbG9yOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG59XFxuXFxuLyogU2VsZWN0IGFsbCBzdmcgd2hlbiBsaSBpcyBob3ZlciAqL1xcblxcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19jb250YWluZXIgdWwgPiBsaTpob3ZlciBzdmcge1xcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19jb250YWluZXIgdWwgPiBsaTpob3ZlciAjZ2FyYmFnZUljb24ge1xcbiAgZmlsdGVyOiBpbnZlcnQoMzglKSBzZXBpYSg3MiUpIHNhdHVyYXRlKDEwODclKSBodWUtcm90YXRlKDIwOGRlZykgYnJpZ2h0bmVzcyg5MyUpIGNvbnRyYXN0KDk3JSk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvbGVmdC1zZWN0aW9uL3Byb2plY3QtY29udGFpbmVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7QUFDZjtBQUNBO0VBQ0UsMkNBQTJDOztFQUUzQyxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGFBQWE7RUFDYix5Q0FBeUM7RUFDekMsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1Q0FBdUM7RUFDdkMsbUJBQW1CO0VBQ25CLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLDhGQUE4RjtBQUNoRzs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLG9DQUFvQztFQUNwQyw4QkFBOEI7RUFDOUIsZUFBZTtBQUNqQjs7QUFFQSxrQ0FBa0M7QUFDbEM7RUFDRSw4QkFBOEI7QUFDaEM7O0FBRUEsb0NBQW9DOztBQUVwQztFQUNFLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLCtGQUErRjtBQUNqR1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGVmdC1zZWN0aW9uX19wcm9qZWN0cyB7XFxuICBwYWRkaW5nOiAxcmVtO1xcbn1cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0cyA+IGgyIHtcXG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCB2YXIoLS1HaG9zdC13aGl0ZSk7XFxuXFxuICBwYWRkaW5nLWJvdHRvbTogMXJlbTtcXG59XFxuXFxuLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2NvbnRhaW5lciB1bCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2NvbnRhaW5lciB1bCA+IGxpIHtcXG4gIG1hcmdpbi10b3A6IDFyZW07XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC1hdXRvLWZsb3c6IGNvbHVtbjtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byBtYXgtY29udGVudDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDAuNXJlbTtcXG59XFxuXFxuI3Byb2plY3RJbnB1dCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDAuOHJlbSAxcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5cXG4jcHJvamVjdElucHV0OmZvY3VzIHtcXG4gIG91dGxpbmU6IDFweCBzb2xpZCB2YXIoLS1HaG9zdC13aGl0ZTMpO1xcbn1cXG5cXG4jZ2FyYmFnZUljb24ge1xcbiAgZmlsdGVyOiBpbnZlcnQoNTMlKSBzZXBpYSgxNiUpIHNhdHVyYXRlKDMyNiUpIGh1ZS1yb3RhdGUoMTk5ZGVnKSBicmlnaHRuZXNzKDkwJSkgY29udHJhc3QoODglKTtcXG59XFxuXFxuI2dhcmJhZ2VJY29uOmhvdmVyIHtcXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4yKTtcXG59XFxuXFxuLmxlZnQtc2VjdGlvbl9fcHJvamVjdHNfX2NvbnRhaW5lciB1bCA+IGxpOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlKTtcXG4gIGJveC1zaGFkb3c6IHZhcigtLWJveC1zaGFkb3dzKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLyogU2VsZWN0IGFsbCBwIHdoZW4gbGkgaXMgaG92ZXIgKi9cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsID4gbGk6aG92ZXIgcCB7XFxuICBjb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbi8qIFNlbGVjdCBhbGwgc3ZnIHdoZW4gbGkgaXMgaG92ZXIgKi9cXG5cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsID4gbGk6aG92ZXIgc3ZnIHtcXG4gIGZpbGw6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbn1cXG5cXG4ubGVmdC1zZWN0aW9uX19wcm9qZWN0c19fY29udGFpbmVyIHVsID4gbGk6aG92ZXIgI2dhcmJhZ2VJY29uIHtcXG4gIGZpbHRlcjogaW52ZXJ0KDM4JSkgc2VwaWEoNzIlKSBzYXR1cmF0ZSgxMDg3JSkgaHVlLXJvdGF0ZSgyMDhkZWcpIGJyaWdodG5lc3MoOTMlKSBjb250cmFzdCg5NyUpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIvKiBBZGQgVGFzayBzdHlsZSAqL1xcbi5tYWluX190YXNrLWxpc3RfX2FkZC10YXNrX2NvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiAxcmVtIDAuOHJlbTtcXG4gIGdhcDogMC4ycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2FkZC10YXNrX2NvbnRhaW5lcjpmb2N1cy13aXRoaW4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tR2hvc3Qtd2hpdGUzKTtcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyID4gc3ZnOmhvdmVyIHtcXG4gIGZpbGw6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19hZGQtdGFzayB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIHBhZGRpbmc6IDByZW0gMC4ycmVtO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19hZGQtdGFzazpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL2xlZnQtc2VjdGlvbi9wcm9qZWN0LWNyZWF0ZS1mb3JtLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxtQkFBbUI7QUFDbkI7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLG9CQUFvQjtFQUNwQixXQUFXO0VBQ1gseUNBQXlDO0VBQ3pDLDhCQUE4QjtBQUNoQzs7QUFFQTtFQUNFLHFDQUFxQztBQUN2Qzs7QUFFQTtFQUNFLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi8qIEFkZCBUYXNrIHN0eWxlICovXFxuLm1haW5fX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDFyZW0gMC44cmVtO1xcbiAgZ2FwOiAwLjJyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVdoaXRlKTtcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyOmZvY3VzLXdpdGhpbiB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1HaG9zdC13aGl0ZTMpO1xcbn1cXG5cXG4ubWFpbl9fdGFzay1saXN0X19hZGQtdGFza19jb250YWluZXIgPiBzdmc6aG92ZXIge1xcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2FkZC10YXNrIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMHJlbSAwLjJyZW07XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2FkZC10YXNrOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNtaWRkbGUtc2VjdGlvbiB7XFxuICBmbGV4OiA1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcbiAgLyogaW5zaWRlIG1haW4gYm9yZGVyICovXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzNXB4O1xcbiAgcGFkZGluZzogMXJlbSAzcmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY3NzL21pZGRsZS1zZWN0aW9uL21haW4tbWlkZGxlLXN0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLE9BQU87RUFDUCxvQ0FBb0M7RUFDcEMsdUJBQXVCO0VBQ3ZCLDRCQUE0QjtFQUM1QixrQkFBa0I7RUFDbEIsa0JBQWtCO0FBQ3BCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIiNtaWRkbGUtc2VjdGlvbiB7XFxuICBmbGV4OiA1O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcbiAgLyogaW5zaWRlIG1haW4gYm9yZGVyICovXFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiAzNXB4O1xcbiAgcGFkZGluZzogMXJlbSAzcmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWFpbl9fY29udGFpbmVyX19oZWFkZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5tYWluX19jb250YWluZXJfX2hlYWRlci52aXNpYmxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5tYWluX19jb250YWluZXJfX2hlYWRlciBoMiB7XFxuICB3aWR0aDogNTAlO1xcbiAgZm9udC1zaXplOiAyLjRyZW07XFxuICBwYWRkaW5nOiAxLjZyZW0gMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpOyAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAwLjRyZW07XFxuICBwYWRkaW5nOiAwLjhyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lciBzdmcge1xcbiAgd2lkdGg6IDIwcHg7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlMyk7XFxuICBib3gtc2hhZG93OiB2YXIoLS1ib3gtc2hhZG93cyk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMDIpO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcjphY3RpdmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyLFxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyIHN2ZyB7XFxuICBjb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmaWxsOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2Nzcy9taWRkbGUtc2VjdGlvbi9taWRkbGUtaGVhZGVyLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsOEJBQThCO0VBQzlCLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLFVBQVU7RUFDVixpQkFBaUI7RUFDakIsb0JBQW9CO0VBQ3BCLHlDQUF5QztFQUN6QyxvQ0FBb0M7RUFDcEMsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsZUFBZTtFQUNmLHlDQUF5QztFQUN6QyxpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxxQ0FBcUM7RUFDckMsOEJBQThCO0VBQzlCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLDBCQUEwQjtBQUM1Qjs7QUFFQTs7RUFFRSw4QkFBOEI7RUFDOUIsZUFBZTtFQUNmLDZCQUE2QjtBQUMvQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubWFpbl9fY29udGFpbmVyX19oZWFkZXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5tYWluX19jb250YWluZXJfX2hlYWRlci52aXNpYmxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5tYWluX19jb250YWluZXJfX2hlYWRlciBoMiB7XFxuICB3aWR0aDogNTAlO1xcbiAgZm9udC1zaXplOiAyLjRyZW07XFxuICBwYWRkaW5nOiAxLjZyZW0gMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgLyogYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpOyAqL1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAwLjRyZW07XFxuICBwYWRkaW5nOiAwLjhyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lciBzdmcge1xcbiAgd2lkdGg6IDIwcHg7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlMyk7XFxuICBib3gtc2hhZG93OiB2YXIoLS1ib3gtc2hhZG93cyk7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMDIpO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcjphY3RpdmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyLFxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyOmhvdmVyIHN2ZyB7XFxuICBjb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmaWxsOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1haW5fX3NvcnRpbmctb3JkZXIge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XFxuICBnYXA6IDAuMnJlbTtcXG4gIHBhZGRpbmc6IDAuNXJlbSAwLjhyZW07XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubWFpbl9fc29ydGluZy1vcmRlci52aXNpYmlsaXR5IHtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxufVxcblxcbi5tYWluX19zb3J0aW5nLW9yZGVyID4gc3ZnIHtcXG4gIHBhZGRpbmc6IDAuMXJlbTtcXG4gIHdpZHRoOiAyMHB4O1xcbn1cXG5cXG4ubWFpbl9fc29ydGluZy1vcmRlciA+IHN2Zzpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYXR0bGVzaGlwLWdyYXkpO1xcbn1cXG5cXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyX19vcHRpb25zIHtcXG4gIHdpZHRoOiAyMDBweDtcXG4gIHBhZGRpbmc6IDJyZW0gMHJlbSAxcmVtO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IDUwcHg7XFxuXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICBib3gtc2hhZG93OiB2YXIoLS1ib3gtc2hhZG93cyk7XFxuXFxuICBkaXNwbGF5OiBub25lO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMS41cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICB6LWluZGV4OiAxMDtcXG59XFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMudmlzaWJsZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9ucyA+IHAge1xcbiAgcGFkZGluZy1ib3R0b206IDJyZW07XFxuICBmb250LXdlaWdodDogODAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlKTtcXG59XFxuXFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMgPiBkaXYge1xcbiAgcGFkZGluZzogMC44cmVtIDAuNXJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxcmVtO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9ucyA+IGRpdiBwIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMC41cmVtO1xcbn1cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9ucyA+IGRpdjpob3ZlcixcXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9ucyA+IGRpdjpob3ZlciBzdmcge1xcbiAgY29sb3I6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcblxcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbWlkZGxlLXNvcnRpbmctYm94LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IseUJBQXlCO0VBQ3pCLFdBQVc7RUFDWCxzQkFBc0I7RUFDdEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHdDQUF3QztBQUMxQzs7QUFFQSw4Q0FBOEM7O0FBRTlDO0VBQ0UsWUFBWTtFQUNaLHVCQUF1QjtFQUN2QixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7O0VBRVQsOEJBQThCO0VBQzlCLDhCQUE4Qjs7RUFFOUIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixXQUFXO0VBQ1gseUNBQXlDO0VBQ3pDLFdBQVc7QUFDYjtBQUNBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0Usb0JBQW9CO0VBQ3BCLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsMkNBQTJDO0FBQzdDOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0UsV0FBVztFQUNYLGVBQWU7QUFDakI7O0FBRUE7O0VBRUUsOEJBQThCO0VBQzlCLG9DQUFvQzs7RUFFcEMsNkJBQTZCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tYWluX19zb3J0aW5nLW9yZGVyIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgZ2FwOiAwLjJyZW07XFxuICBwYWRkaW5nOiAwLjVyZW0gMC44cmVtO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuXFxuLm1haW5fX3NvcnRpbmctb3JkZXIudmlzaWJpbGl0eSB7XFxuICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xcbn1cXG5cXG4ubWFpbl9fc29ydGluZy1vcmRlciA+IHN2ZyB7XFxuICBwYWRkaW5nOiAwLjFyZW07XFxuICB3aWR0aDogMjBweDtcXG59XFxuXFxuLm1haW5fX3NvcnRpbmctb3JkZXIgPiBzdmc6aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmF0dGxlc2hpcC1ncmF5KTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4ubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9ucyB7XFxuICB3aWR0aDogMjAwcHg7XFxuICBwYWRkaW5nOiAycmVtIDByZW0gMXJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiA1MHB4O1xcblxcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgYm94LXNoYWRvdzogdmFyKC0tYm94LXNoYWRvd3MpO1xcblxcbiAgZGlzcGxheTogbm9uZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDEuNXJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgei1pbmRleDogMTA7XFxufVxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyX19vcHRpb25zLnZpc2libGUge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMgPiBwIHtcXG4gIHBhZGRpbmctYm90dG9tOiAycmVtO1xcbiAgZm9udC13ZWlnaHQ6IDgwMDtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1HaG9zdC13aGl0ZSk7XFxufVxcblxcbi5tYWluX19oZWFkZXJfX3NvcnQtY29udGFpbmVyX19vcHRpb25zID4gZGl2IHtcXG4gIHBhZGRpbmc6IDAuOHJlbSAwLjVyZW07XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMXJlbTtcXG59XFxuXFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMgPiBkaXYgcCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIHBhZGRpbmc6IDAuNXJlbTtcXG59XFxuXFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMgPiBkaXY6aG92ZXIsXFxuLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJfX29wdGlvbnMgPiBkaXY6aG92ZXIgc3ZnIHtcXG4gIGNvbG9yOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlKTtcXG5cXG4gIGZpbGw6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubWFpbl9fdGFzay1saXN0X19jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICAvKiBkaXNwbGF5OiBub25lOyAqL1xcbn1cXG5cXG4vKiBMaXN0IFN0eWxlICovXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogMnJlbTtcXG4gIG1hcmdpbi1ib3R0b206IDJyZW07XFxufVxcblxcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXFxuXFxuLyogTGlzdCBpdGVtIHN0eWxlICovXFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtIHtcXG4gIHBhZGRpbmc6IDJyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICAvKiBtaW4taGVpZ2h0OiAyNjBweDsgKi9cXG5cXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCB2YXIoLS1iYXR0bGVzaGlwLWdyYXkpO1xcblxcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtY29sdW1uczogM2ZyIDMzMHB4O1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvIGF1dG8gMWZyIDJmcjtcXG4gIGNvbHVtbi1nYXA6IDAuOHJlbTtcXG4gIHJvdy1nYXA6IDFyZW07XFxufVxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbS52aXNpYmxlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW0ubG93IHtcXG4gIGJvcmRlci1sZWZ0OiA4cHggc29saWQgdmFyKC0tQ2Fyb2xpbmEtYmx1ZSk7XFxufVxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbS5tZWRpdW0ge1xcbiAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCB2YXIoLS1NYXhpbXVtLXllbGxvdy1yZWQpO1xcbn1cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW0uaGlnaCB7XFxuICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHZhcigtLU9yYW5nZS1yZWQtY3JheW9sYSk7XFxufVxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbS5ub25lIHtcXG4gIGJvcmRlci1sZWZ0OiA4cHggc29saWQgdmFyKC0tYmF0dGxlc2hpcC1ncmF5KTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXFxuXFxuLyogTGlzdCBpdGVtIGhlYWRlciAqL1xcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGl0bGUtY29udGFpbmVyIHtcXG4gIGdyaWQtY29sdW1uOiAxLy0xO1xcbiAgZ3JpZC1yb3c6IDEvMjtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcGFkZGluZzogMC40cmVtO1xcbn1cXG5cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3RpdGxlLWNvbnRhaW5lciBkaXYge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDAuM3JlbTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZSB7XFxuICBmbGV4OiAxO1xcbiAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbiAgcGFkZGluZzogMC40cmVtO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbn1cXG5cXG4vKiB3aGVuIGNoZWNrYm94IGlzIGFjdGl2ZSAqL1xcbi5jaGVja2VkIHtcXG4gIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbiAgY29sb3I6IHZhcigtLURhcmstbGl2ZXIpO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGl0bGU6Zm9jdXMge1xcbiAgb3V0bGluZTogMXB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlMyk7XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGl0bGUtY29udGFpbmVyIGRpdjpudGgtY2hpbGQoMSkge1xcbiAgZmxleDogMTtcXG59XFxuXFxuI2xpc3QtYXJyb3cge1xcbiAgdHJhbnNpdGlvbjogMC4ycztcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXG4gIGZpbHRlcjogaW52ZXJ0KDUzJSkgc2VwaWEoMTYlKSBzYXR1cmF0ZSgzMjYlKSBodWUtcm90YXRlKDE5OWRlZykgYnJpZ2h0bmVzcyg5MCUpIGNvbnRyYXN0KDg4JSk7XFxufVxcblxcbiNsaXN0LWFycm93OmhvdmVyIHtcXG4gIGZpbHRlcjogaW52ZXJ0KDM5JSkgc2VwaWEoMzYlKSBzYXR1cmF0ZSgyMjYxJSkgaHVlLXJvdGF0ZSgyMTBkZWcpIGJyaWdodG5lc3MoOTUlKSBjb250cmFzdCg5MyUpO1xcbn1cXG5cXG4jbGlzdC1hcnJvdy5yb3RhdGUge1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG4vKiBMaXN0IEl0ZW0gTm90ZXMgKi9cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX25vdGVzLWNvbnRhaW5lciB7XFxuICBncmlkLWNvbHVtbjogMS8yO1xcbiAgZ3JpZC1yb3c6IDIvNTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX25vdGVzLWNvbnRhaW5lciBsYWJlbCB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjRyZW07XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGV4dGFyZWEge1xcbiAgcmVzaXplOiBub25lO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1HaG9zdC13aGl0ZSk7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBjb2xvcjogdmFyKC0tRGFyay1saXZlcik7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGV4dGFyZWE6Zm9jdXMge1xcbiAgb3V0bGluZTogMnB4IHNvbGlkIHZhcigtLUdob3N0LXdoaXRlMyk7XFxufVxcblxcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBMaXN0IEl0ZW0gRGF0ZSAqL1xcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS1jb250YWluZXIge1xcbiAgZ3JpZC1jb2x1bW46IDIvMztcXG4gIGdyaWQtcm93OiAyLzM7XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjRyZW07XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS1jb250YWluZXIgPiBkaXYge1xcbiAgZGlzcGxheTogZmxleDtcXG59XFxuXFxuI3RvZGF5LWJ0biB7XFxuICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDBweDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwcHg7XFxufVxcblxcbiN0b21vcnJvdy1idG4ge1xcbiAgYm9yZGVyLXJhZGl1czogMHB4O1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGUge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG59XFxuXFxuLmFjdGl2ZURhdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tUGFyYWRpc2UtUGluayk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS5hY3RpdmVEYXRlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVBhcmFkaXNlLVBpbmspO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGU6aG92ZXIsXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLWNvbnRhaW5lciA+IGRpdiA+IGJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1VbHRyYS1SZWQpO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGU6YWN0aXZlLFxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS1jb250YWluZXIgPiBkaXYgPiBidXR0b246YWN0aXZlIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxcHgpO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGU6Zm9jdXMsXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLWNvbnRhaW5lciA+IGRpdiA+IGJ1dHRvbjpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tUGFyYWRpc2UtUGluayk7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi8qIGNoYW5nZSB0aGUgY29sb3Igb2YgZGF0ZSBpY29uICovXFxuaW5wdXRbdHlwZT1cXFwiZGF0ZVxcXCJdOjotd2Via2l0LWNhbGVuZGFyLXBpY2tlci1pbmRpY2F0b3Ige1xcbiAgZmlsdGVyOiBpbnZlcnQoMTAwJSk7XFxufVxcblxcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXFxuXFxuLyogTGlzdCBJdGVtIFByaW9yaXR5ICovXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19wcmlvcml0eS1jb250YWluZXIge1xcbiAgZ3JpZC1jb2x1bW46IDIvMztcXG4gIGdyaWQtcm93OiAzLzQ7XFxuXFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19wcmlvcml0eS1jb250YWluZXIgbGFiZWwge1xcbiAgbWFyZ2luLWJvdHRvbTogMC40cmVtO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3ByaW9yaXR5IHtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbiAgY29sb3I6IHZhcigtLVdoaXRlKTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fcHJpb3JpdHkgb3B0aW9uIHtcXG4gIGJhY2tncm91bmQ6IHZhcigtLUdob3N0LXdoaXRlKTtcXG4gIGNvbG9yOiB2YXIoLS1EYXJrLWxpdmVyKTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXFxuXFxuLyogTGlzdCBJdGVtIEJ0biAqL1xcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGVsZXRlLXRhc2tfX2J0biB7XFxuICBqdXN0aWZ5LXNlbGY6IGVuZDtcXG4gIGFsaWduLXNlbGY6IGZsZXgtZW5kO1xcbn1cXG5cXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBBZGQgVGFzayBzdHlsZSAqL1xcbi5taWRkbGVfX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMXJlbSAwLjhyZW07XFxuICBnYXA6IDAuMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLm1pZGRsZV9fdGFzay1saXN0X19hZGQtdGFza19jb250YWluZXIudmlzaWJsZSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4ubWlkZGxlX190YXNrLWxpc3RfX2FkZC10YXNrX2NvbnRhaW5lcjpmb2N1cy13aXRoaW4ge1xcbiAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tR2hvc3Qtd2hpdGUzKTtcXG59XFxuXFxuLm1pZGRsZV9fdGFzay1saXN0X19hZGQtdGFza19jb250YWluZXIgPiBzdmc6aG92ZXIge1xcbiAgZmlsbDogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2FkZC10YXNrLFxcbiN0b2RvX190YXNrLWxpc3RfX2FkZC10b2RvIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgcGFkZGluZzogMHJlbSAwLjJyZW07XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2FkZC10YXNrOmZvY3VzLFxcbiN0b2RvX190YXNrLWxpc3RfX2FkZC10b2RvOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbWlkZGxlLXRvZG8tbGlzdC5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCOztBQUVBLGVBQWU7QUFDZjtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztFQUNULG1CQUFtQjtBQUNyQjs7QUFFQSxnRUFBZ0U7O0FBRWhFLG9CQUFvQjs7QUFFcEI7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLHVCQUF1Qjs7RUFFdkIseUNBQXlDO0VBQ3pDLDZDQUE2Qzs7RUFFN0MsYUFBYTtFQUNiLGdDQUFnQztFQUNoQyxxQ0FBcUM7RUFDckMsa0JBQWtCO0VBQ2xCLGFBQWE7QUFDZjtBQUNBO0VBQ0UsY0FBYztBQUNoQjs7QUFFQTtFQUNFLDJDQUEyQztBQUM3QztBQUNBO0VBQ0UsZ0RBQWdEO0FBQ2xEO0FBQ0E7RUFDRSxnREFBZ0Q7QUFDbEQ7QUFDQTtFQUNFLDZDQUE2QztBQUMvQzs7QUFFQSxpRUFBaUU7O0FBRWpFLHFCQUFxQjtBQUNyQjtFQUNFLGlCQUFpQjtFQUNqQixhQUFhO0VBQ2IsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxPQUFPO0VBQ1Asa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixZQUFZO0VBQ1osa0JBQWtCO0FBQ3BCOztBQUVBLDRCQUE0QjtBQUM1QjtFQUNFLDZCQUE2QjtFQUM3Qix3QkFBd0I7RUFDeEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usc0NBQXNDO0FBQ3hDOztBQUVBO0VBQ0UsT0FBTztBQUNUOztBQUVBO0VBQ0UsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQiw4RkFBOEY7QUFDaEc7O0FBRUE7RUFDRSwrRkFBK0Y7QUFDakc7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUEsbUVBQW1FO0FBQ25FLG9CQUFvQjtBQUNwQjtFQUNFLGdCQUFnQjtFQUNoQixhQUFhO0VBQ2IsYUFBYTtFQUNiLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLFlBQVk7RUFDWixZQUFZO0VBQ1osV0FBVztFQUNYLG9DQUFvQztFQUNwQyxhQUFhO0VBQ2IseUNBQXlDO0VBQ3pDLHdCQUF3QjtFQUN4QixZQUFZO0FBQ2Q7O0FBRUE7RUFDRSxzQ0FBc0M7QUFDeEM7O0FBRUEscUVBQXFFOztBQUVyRSxtQkFBbUI7QUFDbkI7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTtBQUNmOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtBQUNmOztBQUVBO0VBQ0Usa0RBQWtEO0VBQ2xELHFEQUFxRDtFQUNyRCwrQkFBK0I7RUFDL0IsNEJBQTRCO0FBQzlCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHlDQUF5QztFQUN6QyxtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLG1EQUFtRDtFQUNuRCxzREFBc0Q7QUFDeEQ7O0FBRUE7RUFDRSxzQ0FBc0M7QUFDeEM7O0FBRUE7RUFDRSxzQ0FBc0M7QUFDeEM7O0FBRUE7O0VBRUUsa0NBQWtDO0FBQ3BDOztBQUVBOztFQUVFLDBCQUEwQjtBQUM1Qjs7QUFFQTs7RUFFRSxhQUFhO0VBQ2Isc0NBQXNDO0VBQ3RDLGtCQUFrQjtBQUNwQjs7QUFFQSxrQ0FBa0M7QUFDbEM7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUEseUVBQXlFOztBQUV6RSx1QkFBdUI7QUFDdkI7RUFDRSxnQkFBZ0I7RUFDaEIsYUFBYTs7RUFFYixhQUFhO0VBQ2Isc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLHlDQUF5QztFQUN6QyxtQkFBbUI7RUFDbkIseUNBQXlDO0VBQ3pDLGFBQWE7RUFDYixhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5Qix3QkFBd0I7QUFDMUI7O0FBRUEsaUVBQWlFOztBQUVqRSxrQkFBa0I7QUFDbEI7RUFDRSxpQkFBaUI7RUFDakIsb0JBQW9CO0FBQ3RCOztBQUVBLG1GQUFtRjs7QUFFbkYsbUJBQW1CO0FBQ25CO0VBQ0UsV0FBVztFQUNYLG9CQUFvQjtFQUNwQixXQUFXO0VBQ1gseUNBQXlDO0VBQ3pDLDhCQUE4QjtFQUM5QixhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxhQUFhO0FBQ2Y7O0FBRUE7RUFDRSxxQ0FBcUM7QUFDdkM7O0FBRUE7RUFDRSw2QkFBNkI7QUFDL0I7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixvQkFBb0I7QUFDdEI7O0FBRUE7O0VBRUUsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5tYWluX190YXNrLWxpc3RfX2NvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIC8qIGRpc3BsYXk6IG5vbmU7ICovXFxufVxcblxcbi8qIExpc3QgU3R5bGUgKi9cXG4ubWFpbl9fdGFzay1saXN0X19saXN0IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAycmVtO1xcbiAgbWFyZ2luLWJvdHRvbTogMnJlbTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBMaXN0IGl0ZW0gc3R5bGUgKi9cXG5cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW0ge1xcbiAgcGFkZGluZzogMnJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVdoaXRlKTtcXG4gIC8qIG1pbi1oZWlnaHQ6IDI2MHB4OyAqL1xcblxcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHZhcigtLWJhdHRsZXNoaXAtZ3JheSk7XFxuXFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzZnIgMzMwcHg7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG8gYXV0byAxZnIgMmZyO1xcbiAgY29sdW1uLWdhcDogMC44cmVtO1xcbiAgcm93LWdhcDogMXJlbTtcXG59XFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtLnZpc2libGUge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbS5sb3cge1xcbiAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCB2YXIoLS1DYXJvbGluYS1ibHVlKTtcXG59XFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtLm1lZGl1bSB7XFxuICBib3JkZXItbGVmdDogOHB4IHNvbGlkIHZhcigtLU1heGltdW0teWVsbG93LXJlZCk7XFxufVxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbS5oaWdoIHtcXG4gIGJvcmRlci1sZWZ0OiA4cHggc29saWQgdmFyKC0tT3JhbmdlLXJlZC1jcmF5b2xhKTtcXG59XFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtLm5vbmUge1xcbiAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCB2YXIoLS1iYXR0bGVzaGlwLWdyYXkpO1xcbn1cXG5cXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBMaXN0IGl0ZW0gaGVhZGVyICovXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZS1jb250YWluZXIge1xcbiAgZ3JpZC1jb2x1bW46IDEvLTE7XFxuICBncmlkLXJvdzogMS8yO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwYWRkaW5nOiAwLjRyZW07XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGl0bGUtY29udGFpbmVyIGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogMC4zcmVtO1xcbn1cXG5cXG4jbWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3RpdGxlIHtcXG4gIGZsZXg6IDE7XFxuICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICBwYWRkaW5nOiAwLjRyZW07XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxufVxcblxcbi8qIHdoZW4gY2hlY2tib3ggaXMgYWN0aXZlICovXFxuLmNoZWNrZWQge1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XFxuICBjb2xvcjogdmFyKC0tRGFyay1saXZlcik7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZTpmb2N1cyB7XFxuICBvdXRsaW5lOiAxcHggc29saWQgdmFyKC0tR2hvc3Qtd2hpdGUzKTtcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZS1jb250YWluZXIgZGl2Om50aC1jaGlsZCgxKSB7XFxuICBmbGV4OiAxO1xcbn1cXG5cXG4jbGlzdC1hcnJvdyB7XFxuICB0cmFuc2l0aW9uOiAwLjJzO1xcbiAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgZmlsdGVyOiBpbnZlcnQoNTMlKSBzZXBpYSgxNiUpIHNhdHVyYXRlKDMyNiUpIGh1ZS1yb3RhdGUoMTk5ZGVnKSBicmlnaHRuZXNzKDkwJSkgY29udHJhc3QoODglKTtcXG59XFxuXFxuI2xpc3QtYXJyb3c6aG92ZXIge1xcbiAgZmlsdGVyOiBpbnZlcnQoMzklKSBzZXBpYSgzNiUpIHNhdHVyYXRlKDIyNjElKSBodWUtcm90YXRlKDIxMGRlZykgYnJpZ2h0bmVzcyg5NSUpIGNvbnRyYXN0KDkzJSk7XFxufVxcblxcbiNsaXN0LWFycm93LnJvdGF0ZSB7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xcbn1cXG5cXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcbi8qIExpc3QgSXRlbSBOb3RlcyAqL1xcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fbm90ZXMtY29udGFpbmVyIHtcXG4gIGdyaWQtY29sdW1uOiAxLzI7XFxuICBncmlkLXJvdzogMi81O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5tYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fbm90ZXMtY29udGFpbmVyIGxhYmVsIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNHJlbTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190ZXh0YXJlYSB7XFxuICByZXNpemU6IG5vbmU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlKTtcXG4gIHBhZGRpbmc6IDFyZW07XFxuICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzLXZhbHVlKTtcXG4gIGNvbG9yOiB2YXIoLS1EYXJrLWxpdmVyKTtcXG4gIGJvcmRlcjogbm9uZTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190ZXh0YXJlYTpmb2N1cyB7XFxuICBvdXRsaW5lOiAycHggc29saWQgdmFyKC0tR2hvc3Qtd2hpdGUzKTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcblxcbi8qIExpc3QgSXRlbSBEYXRlICovXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLWNvbnRhaW5lciB7XFxuICBncmlkLWNvbHVtbjogMi8zO1xcbiAgZ3JpZC1yb3c6IDIvMztcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNHJlbTtcXG59XFxuXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLWNvbnRhaW5lciA+IGRpdiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4jdG9kYXktYnRuIHtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMHB4O1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDBweDtcXG59XFxuXFxuI3RvbW9ycm93LWJ0biB7XFxuICBib3JkZXItcmFkaXVzOiAwcHg7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZSB7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG4gIGNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICBwYWRkaW5nOiAxcmVtO1xcbiAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbn1cXG5cXG4uYWN0aXZlRGF0ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1QYXJhZGlzZS1QaW5rKTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLmFjdGl2ZURhdGUge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tUGFyYWRpc2UtUGluayk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZTpob3ZlcixcXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGUtY29udGFpbmVyID4gZGl2ID4gYnV0dG9uOmhvdmVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVVsdHJhLVJlZCk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZTphY3RpdmUsXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLWNvbnRhaW5lciA+IGRpdiA+IGJ1dHRvbjphY3RpdmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDFweCk7XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZTpmb2N1cyxcXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2RhdGUtY29udGFpbmVyID4gZGl2ID4gYnV0dG9uOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1QYXJhZGlzZS1QaW5rKTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuXFxuLyogY2hhbmdlIHRoZSBjb2xvciBvZiBkYXRlIGljb24gKi9cXG5pbnB1dFt0eXBlPVxcXCJkYXRlXFxcIl06Oi13ZWJraXQtY2FsZW5kYXItcGlja2VyLWluZGljYXRvciB7XFxuICBmaWx0ZXI6IGludmVydCgxMDAlKTtcXG59XFxuXFxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBMaXN0IEl0ZW0gUHJpb3JpdHkgKi9cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3ByaW9yaXR5LWNvbnRhaW5lciB7XFxuICBncmlkLWNvbHVtbjogMi8zO1xcbiAgZ3JpZC1yb3c6IDMvNDtcXG5cXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ubWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3ByaW9yaXR5LWNvbnRhaW5lciBsYWJlbCB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjRyZW07XFxufVxcblxcbiNtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fcHJpb3JpdHkge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBvdXRsaW5lOiBub25lO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19wcmlvcml0eSBvcHRpb24ge1xcbiAgYmFja2dyb3VuZDogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcbiAgY29sb3I6IHZhcigtLURhcmstbGl2ZXIpO1xcbn1cXG5cXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cXG5cXG4vKiBMaXN0IEl0ZW0gQnRuICovXFxuLm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kZWxldGUtdGFza19fYnRuIHtcXG4gIGp1c3RpZnktc2VsZjogZW5kO1xcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XFxufVxcblxcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xcblxcbi8qIEFkZCBUYXNrIHN0eWxlICovXFxuLm1pZGRsZV9fdGFzay1saXN0X19hZGQtdGFza19jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxcmVtIDAuOHJlbTtcXG4gIGdhcDogMC4ycmVtO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4ubWlkZGxlX190YXNrLWxpc3RfX2FkZC10YXNrX2NvbnRhaW5lci52aXNpYmxlIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi5taWRkbGVfX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyOmZvY3VzLXdpdGhpbiB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1HaG9zdC13aGl0ZTMpO1xcbn1cXG5cXG4ubWlkZGxlX190YXNrLWxpc3RfX2FkZC10YXNrX2NvbnRhaW5lciA+IHN2Zzpob3ZlciB7XFxuICBmaWxsOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fYWRkLXRhc2ssXFxuI3RvZG9fX3Rhc2stbGlzdF9fYWRkLXRvZG8ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBib3JkZXI6IG5vbmU7XFxuICBwYWRkaW5nOiAwcmVtIDAuMnJlbTtcXG59XFxuXFxuI21haW5fX3Rhc2stbGlzdF9fYWRkLXRhc2s6Zm9jdXMsXFxuI3RvZG9fX3Rhc2stbGlzdF9fYWRkLXRvZG86Zm9jdXMge1xcbiAgb3V0bGluZTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLm1pZGRsZS1zZWN0aW9uX19ub3Byb2plY3RzX19jb250YWluZXIge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogNTAlO1xcbiAgdG9wOiA1MCU7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIHRyYW5zaXRpb246IHZhcigtLW9wYWNpdHktdHJhbnNpdGlvbik7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcblxcbi5taWRkbGUtc2VjdGlvbl9fbm9wcm9qZWN0c19fY29udGFpbmVyLnZpc2libGUge1xcbiAgLyogZGlzcGxheTogZmxleDsgKi9cXG59XFxuXFxuLm1pZGRsZS1zZWN0aW9uX19ub3Byb2plY3RzX19jb250YWluZXIgPiBzdmcge1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgd2lkdGg6IDIwMHB4O1xcbn1cXG5cXG4ubWlkZGxlLXNlY3Rpb25fX25vcHJvamVjdHNfX2NvbnRhaW5lciBoMiB7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3MvbWlkZGxlLXNlY3Rpb24vbm9wcm9qZWN0LXN0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsUUFBUTtFQUNSLGdDQUFnQztFQUNoQyxxQ0FBcUM7RUFDckMsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsWUFBWTtFQUNaLFlBQVk7QUFDZDs7QUFFQTtBQUNBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5taWRkbGUtc2VjdGlvbl9fbm9wcm9qZWN0c19fY29udGFpbmVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRvcDogNTAlO1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICB0cmFuc2l0aW9uOiB2YXIoLS1vcGFjaXR5LXRyYW5zaXRpb24pO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ubWlkZGxlLXNlY3Rpb25fX25vcHJvamVjdHNfX2NvbnRhaW5lci52aXNpYmxlIHtcXG4gIC8qIGRpc3BsYXk6IGZsZXg7ICovXFxufVxcblxcbi5taWRkbGUtc2VjdGlvbl9fbm9wcm9qZWN0c19fY29udGFpbmVyID4gc3ZnIHtcXG4gIGhlaWdodDogYXV0bztcXG4gIHdpZHRoOiAyMDBweDtcXG59XFxuXFxuLm1pZGRsZS1zZWN0aW9uX19ub3Byb2plY3RzX19jb250YWluZXIgaDIge1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCI6cm9vdCB7XFxuICAtLXJpY2gtYmxhY2s6ICMwZTBlMGY7XFxuICAtLWVlcmllLWJsYWNrOiAjMjEyMTIxO1xcbiAgLS1nYWluc2Jvcm86ICNkYmQ2ZGQ7XFxuICAtLWJhdHRsZXNoaXAtZ3JheTogIzg5ODk4OTtcXG4gIC0tZGVzZXJ0LXNhbmQ6ICNlYmJjYTE7XFxuICAtLXdoaXRlOiAjZmZmZjtcXG4gIC0tY2FuYXJ5OiAjZmZmNjg5O1xcbiAgLS1WZXJkaWdyaXM6ICMyOGFmYjA7XFxuICAtLU9yYW5nZS1ZZWxsb3ctQ3JheW9sYTogI2Y0ZDM1ZTtcXG4gIC0tT3JhbmdlLXJlZC1jcmF5b2xhOiAjZmY1NzU3O1xcbiAgLS1QYXJhZGlzZS1QaW5rOiAjZWY0NzZmO1xcbiAgLS1DYXJpYmlhbi1HcmVlbjogIzA2Y2ZkNjtcXG4gIC0tVWx0cmEtUmVkOiAjZmY2OTc4O1xcbiAgLS1CYWJ5LVBvd2RlcjogI2ZmZmNmOTtcXG4gIC0tQ2VsZXN0ZTogI2IxZWRlODtcXG4gIC0tQ2Fyb2xpbmEtYmx1ZTogIzRlOWZkMTtcXG4gIC0tUm9iaW4tZWdnLWJsdWU6ICM0MmM3Yzg7XFxuICAtLUJsdWUteW9uZGVyOiAjNDg3NGE4O1xcbiAgLS1DeWJlci1ncmFwZTogIzVlNDE3MDtcXG4gIC0tUHVycGxlLU5hdnk6ICM1OTUzODY7XFxuICAtLVBpc3RhY2hpbzogIzhhYzA2ZDtcXG4gIC0tTWF4aW11bS15ZWxsb3ctcmVkOiAjZmZjYzc0O1xcbiAgLS1CbHVlLXNhcHBoaXJlOiAjMTI1ZDgyO1xcbiAgLS1NYWdub2xpYTogI2U1ZTJlYjtcXG4gIC0tR2hvc3Qtd2hpdGU6ICNmMWY0ZmQ7XFxuICAtLUdob3N0LXdoaXRlMjogI2Y3ZjZmYjtcXG4gIC0tR2hvc3Qtd2hpdGUzOiAjZTNlNmVkO1xcbiAgLS1VbHRyYW1hcmluZS1ibHVlOiAjNTQ2OGVhO1xcbiAgLS1XaGl0ZTogI2ZmZmZmZjtcXG4gIC0tRGFyay1saXZlcjogIzdiN2M4ZTtcXG5cXG4gIC8qIC0tLS1ib3JkZXItLS0gKi9cXG4gIC0tdG9wLXJhZGl1czogMzBweCAzMHB4IDBweCAwcHg7XFxuICAtLWJvdHRvbS1yYWRpdXM6IDBweCAwcHggMzBweCAzMHB4O1xcbiAgLS1ib3R0b20tcmFkaXVzLXNlY3Rpb246IDBweCAwcHggMHB4IDMwcHg7XFxuXFxuICAvKiBEQVRFIElucHV0IGJvcmRlciByYWRpdXMgKi9cXG4gIC0tYm9yZGVyLXJhZGl1cy12YWx1ZTogMTBweDtcXG5cXG4gIC8qIEJveC1TaGFkb3dzICovXFxuICAtLWJveC1zaGFkb3dzOiAxcHggMXB4IDJweCAxcHggI2VkZWRlZDtcXG5cXG4gIC8qIE9wYWNpdHkgdHJhbnNpdGlvbiAqL1xcbiAgLS1vcGFjaXR5LXRyYW5zaXRpb246IDAuMjVzO1xcbn1cXG5cXG4qLFxcbio6OmJlZm9yZSxcXG4qOjphZnRlciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG59XFxuXFxuaHRtbCB7XFxuICBmb250LXNpemU6IDYyLjUlO1xcbn1cXG5cXG5ib2R5IHtcXG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xcbiAgcGFkZGluZzogNXJlbTtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLU1hZ25vbGlhKTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBmb250LXNpemU6IDEuNnJlbTtcXG4gIGNvbG9yOiB2YXIoLS1EYXJrLWxpdmVyKTtcXG4gIGZvbnQtZmFtaWx5OiBBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xcbiAgLyogICAtLWpiLWRhdGUtaW5wdXQtdmFsdWUtY29sb3I6IHZhcigtLVdoaXRlKTtcXG4gIC0tamItZGF0ZS1pbnB1dC1iZ2NvbG9yOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG4gIC0tamItZGF0ZS1pbnB1dC1ib3gtaGVpZ2h0OiBtYXgtY29udGVudDtcXG4gIC0tamItZGF0ZS1pbnB1dC1tYXJnaW46IDFyZW07ICovXFxufVxcblxcbmJ1dHRvbiB7XFxuICBwYWRkaW5nOiAxLjJyZW0gMnJlbTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlci1yYWRpdXMtdmFsdWUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tVWx0cmFtYXJpbmUtYmx1ZSk7XFxuICBjb2xvcjogdmFyKC0tR2hvc3Qtd2hpdGUpO1xcbn1cXG5cXG5idXR0b246aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZVgoMS4wMjUpO1xcbiAgdHJhbnNpdGlvbjogMC4xcztcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVVsdHJhLVJlZCk7XFxufVxcblxcbmJ1dHRvbjphY3RpdmUge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDJweCk7XFxuICB0cmFuc2l0aW9uOiAwLjFzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tUGFyYWRpc2UtUGluayk7XFxufVxcblxcbmJ1dHRvbixcXG5sYWJlbCxcXG5pbnB1dCxcXG50ZXh0YXJlYSxcXG5zZWxlY3QsXFxub3B0aW9uIHtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XFxufVxcblxcbnVsLFxcbmxpIHtcXG4gIGxpc3Qtc3R5bGU6IG5vbmU7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5oMixcXG5oMyB7XFxuICBjb2xvcjogdmFyKC0tZWVyaWUtYmxhY2spO1xcbn1cXG5cXG5zdmcge1xcbiAgZmlsbDogdmFyKC0tRGFyay1saXZlcik7XFxuICBoZWlnaHQ6IGF1dG87XFxuICB3aWR0aDogMjRweDtcXG59XFxuXFxuI2JnIHtcXG4gIGJvcmRlci1yYWRpdXM6IDM1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICBkaXNwbGF5OiBncmlkO1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBtYXgtY29udGVudCBhdXRvO1xcbn1cXG5cXG5oZWFkZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgcGFkZGluZzogMnJlbTtcXG4gIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IGluaGVyaXQ7XFxuICBib3JkZXItdG9wLXJpZ2h0LXJhZGl1czogaW5oZXJpdDtcXG59XFxuXFxubWFpbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogaW5oZXJpdDtcXG4gIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiBpbmhlcml0O1xcbn1cXG5cXG4udmlzaWJsZSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuXFxuLmZsZXgge1xcbiAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50O1xcbn1cXG5cXG4uaGlkZGVuIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuLmFjdGl2ZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1HaG9zdC13aGl0ZSk7XFxufVxcblxcbi5vcGFjaXR5T24ge1xcbiAgb3BhY2l0eTogMSAhaW1wb3J0YW50O1xcbn1cXG5cXG4ub3BhY2l0eU9mZiB7XFxuICBvcGFjaXR5OiAwICFpbXBvcnRhbnQ7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jc3Mvc2hhcmVkLXN0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLHFCQUFxQjtFQUNyQixzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLDBCQUEwQjtFQUMxQixzQkFBc0I7RUFDdEIsY0FBYztFQUNkLGlCQUFpQjtFQUNqQixvQkFBb0I7RUFDcEIsZ0NBQWdDO0VBQ2hDLDZCQUE2QjtFQUM3Qix3QkFBd0I7RUFDeEIseUJBQXlCO0VBQ3pCLG9CQUFvQjtFQUNwQixzQkFBc0I7RUFDdEIsa0JBQWtCO0VBQ2xCLHdCQUF3QjtFQUN4Qix5QkFBeUI7RUFDekIsc0JBQXNCO0VBQ3RCLHNCQUFzQjtFQUN0QixzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLDZCQUE2QjtFQUM3Qix3QkFBd0I7RUFDeEIsbUJBQW1CO0VBQ25CLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsdUJBQXVCO0VBQ3ZCLDJCQUEyQjtFQUMzQixnQkFBZ0I7RUFDaEIscUJBQXFCOztFQUVyQixrQkFBa0I7RUFDbEIsK0JBQStCO0VBQy9CLGtDQUFrQztFQUNsQyx5Q0FBeUM7O0VBRXpDLDZCQUE2QjtFQUM3QiwyQkFBMkI7O0VBRTNCLGdCQUFnQjtFQUNoQixzQ0FBc0M7O0VBRXRDLHVCQUF1QjtFQUN2QiwyQkFBMkI7QUFDN0I7O0FBRUE7OztFQUdFLHNCQUFzQjtFQUN0QixTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsaUJBQWlCO0VBQ2pCLGFBQWE7RUFDYixpQ0FBaUM7RUFDakMsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQix3QkFBd0I7RUFDeEIseUNBQXlDO0VBQ3pDOzs7aUNBRytCO0FBQ2pDOztBQUVBO0VBQ0Usb0JBQW9CO0VBQ3BCLFlBQVk7RUFDWixlQUFlO0VBQ2YseUNBQXlDO0VBQ3pDLHlDQUF5QztFQUN6Qyx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsZ0JBQWdCO0VBQ2hCLGtDQUFrQztBQUNwQzs7QUFFQTtFQUNFLDBCQUEwQjtFQUMxQixnQkFBZ0I7RUFDaEIsc0NBQXNDO0FBQ3hDOztBQUVBOzs7Ozs7RUFNRSxpQkFBaUI7RUFDakIsb0JBQW9CO0FBQ3RCOztBQUVBOztFQUVFLGdCQUFnQjtFQUNoQixTQUFTO0VBQ1QsVUFBVTtBQUNaOztBQUVBOztFQUVFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHVCQUF1QjtFQUN2QixZQUFZO0VBQ1osV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLDhCQUE4QjtFQUM5QixhQUFhO0VBQ2Isb0NBQW9DO0FBQ3RDOztBQUVBO0VBQ0UsOEJBQThCO0VBQzlCLGFBQWE7RUFDYiwrQkFBK0I7RUFDL0IsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtDQUFrQztFQUNsQyxtQ0FBbUM7QUFDckM7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0Usd0JBQXdCO0FBQzFCOztBQUVBO0VBQ0Usb0NBQW9DO0FBQ3RDOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UscUJBQXFCO0FBQ3ZCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjpyb290IHtcXG4gIC0tcmljaC1ibGFjazogIzBlMGUwZjtcXG4gIC0tZWVyaWUtYmxhY2s6ICMyMTIxMjE7XFxuICAtLWdhaW5zYm9ybzogI2RiZDZkZDtcXG4gIC0tYmF0dGxlc2hpcC1ncmF5OiAjODk4OTg5O1xcbiAgLS1kZXNlcnQtc2FuZDogI2ViYmNhMTtcXG4gIC0td2hpdGU6ICNmZmZmO1xcbiAgLS1jYW5hcnk6ICNmZmY2ODk7XFxuICAtLVZlcmRpZ3JpczogIzI4YWZiMDtcXG4gIC0tT3JhbmdlLVllbGxvdy1DcmF5b2xhOiAjZjRkMzVlO1xcbiAgLS1PcmFuZ2UtcmVkLWNyYXlvbGE6ICNmZjU3NTc7XFxuICAtLVBhcmFkaXNlLVBpbms6ICNlZjQ3NmY7XFxuICAtLUNhcmliaWFuLUdyZWVuOiAjMDZjZmQ2O1xcbiAgLS1VbHRyYS1SZWQ6ICNmZjY5Nzg7XFxuICAtLUJhYnktUG93ZGVyOiAjZmZmY2Y5O1xcbiAgLS1DZWxlc3RlOiAjYjFlZGU4O1xcbiAgLS1DYXJvbGluYS1ibHVlOiAjNGU5ZmQxO1xcbiAgLS1Sb2Jpbi1lZ2ctYmx1ZTogIzQyYzdjODtcXG4gIC0tQmx1ZS15b25kZXI6ICM0ODc0YTg7XFxuICAtLUN5YmVyLWdyYXBlOiAjNWU0MTcwO1xcbiAgLS1QdXJwbGUtTmF2eTogIzU5NTM4NjtcXG4gIC0tUGlzdGFjaGlvOiAjOGFjMDZkO1xcbiAgLS1NYXhpbXVtLXllbGxvdy1yZWQ6ICNmZmNjNzQ7XFxuICAtLUJsdWUtc2FwcGhpcmU6ICMxMjVkODI7XFxuICAtLU1hZ25vbGlhOiAjZTVlMmViO1xcbiAgLS1HaG9zdC13aGl0ZTogI2YxZjRmZDtcXG4gIC0tR2hvc3Qtd2hpdGUyOiAjZjdmNmZiO1xcbiAgLS1HaG9zdC13aGl0ZTM6ICNlM2U2ZWQ7XFxuICAtLVVsdHJhbWFyaW5lLWJsdWU6ICM1NDY4ZWE7XFxuICAtLVdoaXRlOiAjZmZmZmZmO1xcbiAgLS1EYXJrLWxpdmVyOiAjN2I3YzhlO1xcblxcbiAgLyogLS0tLWJvcmRlci0tLSAqL1xcbiAgLS10b3AtcmFkaXVzOiAzMHB4IDMwcHggMHB4IDBweDtcXG4gIC0tYm90dG9tLXJhZGl1czogMHB4IDBweCAzMHB4IDMwcHg7XFxuICAtLWJvdHRvbS1yYWRpdXMtc2VjdGlvbjogMHB4IDBweCAwcHggMzBweDtcXG5cXG4gIC8qIERBVEUgSW5wdXQgYm9yZGVyIHJhZGl1cyAqL1xcbiAgLS1ib3JkZXItcmFkaXVzLXZhbHVlOiAxMHB4O1xcblxcbiAgLyogQm94LVNoYWRvd3MgKi9cXG4gIC0tYm94LXNoYWRvd3M6IDFweCAxcHggMnB4IDFweCAjZWRlZGVkO1xcblxcbiAgLyogT3BhY2l0eSB0cmFuc2l0aW9uICovXFxuICAtLW9wYWNpdHktdHJhbnNpdGlvbjogMC4yNXM7XFxufVxcblxcbiosXFxuKjo6YmVmb3JlLFxcbio6OmFmdGVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5odG1sIHtcXG4gIGZvbnQtc2l6ZTogNjIuNSU7XFxufVxcblxcbmJvZHkge1xcbiAgbWluLWhlaWdodDogMTAwdmg7XFxuICBwYWRkaW5nOiA1cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tTWFnbm9saWEpO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGZvbnQtc2l6ZTogMS42cmVtO1xcbiAgY29sb3I6IHZhcigtLURhcmstbGl2ZXIpO1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XFxuICAvKiAgIC0tamItZGF0ZS1pbnB1dC12YWx1ZS1jb2xvcjogdmFyKC0tV2hpdGUpO1xcbiAgLS1qYi1kYXRlLWlucHV0LWJnY29sb3I6IHZhcigtLVVsdHJhbWFyaW5lLWJsdWUpO1xcbiAgLS1qYi1kYXRlLWlucHV0LWJveC1oZWlnaHQ6IG1heC1jb250ZW50O1xcbiAgLS1qYi1kYXRlLWlucHV0LW1hcmdpbjogMXJlbTsgKi9cXG59XFxuXFxuYnV0dG9uIHtcXG4gIHBhZGRpbmc6IDEuMnJlbSAycmVtO1xcbiAgYm9yZGVyOiBub25lO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cy12YWx1ZSk7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1VbHRyYW1hcmluZS1ibHVlKTtcXG4gIGNvbG9yOiB2YXIoLS1HaG9zdC13aGl0ZSk7XFxufVxcblxcbmJ1dHRvbjpob3ZlciB7XFxuICB0cmFuc2Zvcm06IHNjYWxlWCgxLjAyNSk7XFxuICB0cmFuc2l0aW9uOiAwLjFzO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tVWx0cmEtUmVkKTtcXG59XFxuXFxuYnV0dG9uOmFjdGl2ZSB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMnB4KTtcXG4gIHRyYW5zaXRpb246IDAuMXM7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1QYXJhZGlzZS1QaW5rKTtcXG59XFxuXFxuYnV0dG9uLFxcbmxhYmVsLFxcbmlucHV0LFxcbnRleHRhcmVhLFxcbnNlbGVjdCxcXG5vcHRpb24ge1xcbiAgZm9udC1zaXplOiAxLjZyZW07XFxuICBmb250LWZhbWlseTogaW5oZXJpdDtcXG59XFxuXFxudWwsXFxubGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbmgyLFxcbmgzIHtcXG4gIGNvbG9yOiB2YXIoLS1lZXJpZS1ibGFjayk7XFxufVxcblxcbnN2ZyB7XFxuICBmaWxsOiB2YXIoLS1EYXJrLWxpdmVyKTtcXG4gIGhlaWdodDogYXV0bztcXG4gIHdpZHRoOiAyNHB4O1xcbn1cXG5cXG4jYmcge1xcbiAgYm9yZGVyLXJhZGl1czogMzVweDtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLVdoaXRlKTtcXG4gIGRpc3BsYXk6IGdyaWQ7XFxuICBncmlkLXRlbXBsYXRlLXJvd3M6IG1heC1jb250ZW50IGF1dG87XFxufVxcblxcbmhlYWRlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1XaGl0ZSk7XFxuICBwYWRkaW5nOiAycmVtO1xcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogaW5oZXJpdDtcXG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiBpbmhlcml0O1xcbn1cXG5cXG5tYWluIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiBpbmhlcml0O1xcbiAgYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IGluaGVyaXQ7XFxufVxcblxcbi52aXNpYmxlIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4uZmxleCB7XFxuICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cXG4uYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLUdob3N0LXdoaXRlKTtcXG59XFxuXFxuLm9wYWNpdHlPbiB7XFxuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XFxufVxcblxcbi5vcGFjaXR5T2ZmIHtcXG4gIG9wYWNpdHk6IDAgIWltcG9ydGFudDtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGxheWVyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbVs1XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNV0gPSBsYXllcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2hhcmVkLXN0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2hhcmVkLXN0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLW1pZGRsZS1zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4tbWlkZGxlLXN0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLWxlZnQtc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLWxlZnQtc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FkZC1wcm9qZWN0LWJ0bi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2FkZC1wcm9qZWN0LWJ0bi5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaG9tZS1jb250YWluZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ob21lLWNvbnRhaW5lci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJvamVjdC1jb250YWluZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9wcm9qZWN0LWNvbnRhaW5lci5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJvamVjdC1jcmVhdGUtZm9ybS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3QtY3JlYXRlLWZvcm0uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21pZGRsZS1oZWFkZXIuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9taWRkbGUtaGVhZGVyLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9taWRkbGUtc29ydGluZy1ib3guY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9taWRkbGUtc29ydGluZy1ib3guY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21pZGRsZS10b2RvLWxpc3QuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9taWRkbGUtdG9kby1saXN0LmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ub3Byb2plY3Qtc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ub3Byb2plY3Qtc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci1zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2hlYWRlci1zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJjb25zdCBwcm9qZWN0SW5wdXREb21FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtYWluX190YXNrLWxpc3RfX2FkZC10YXNrXCIpO1xuY29uc3QgcHJvamVjdExpc3REb21FbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LXNlY3Rpb25fX3Byb2plY3RzX19jb250YWluZXIgdWxcIik7XG5jb25zdCBwcm9qZWN0TGlzdEl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLnByb2plY3QtbGlzdF9faXRlbVwiKTtcbmNvbnN0IHByb2plY3RJbnB1dFZhbHVlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0XCIpO1xuY29uc3QgaG9tZUxpc3REb21lRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lclwiKTtcbmNvbnN0IG5vdFByb2plY3RZZXRDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1pZGRsZS1zZWN0aW9uX19ub3Byb2plY3RzX19jb250YWluZXJcIik7XG5jb25zdCBtaWRkbGVTZWN0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtaWRkbGUtc2VjdGlvblwiKTtcbmNvbnN0IHRvZG9IZWFkZXJDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5fX2NvbnRhaW5lcl9faGVhZGVyXCIpO1xuY29uc3QgdG9kb0hlYWRlclRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluX19jb250YWluZXJfX2hlYWRlciBoMlwiKTtcbmNvbnN0IHRvZG9Tb3J0T3B0aW9uc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbl9faGVhZGVyX19zb3J0LWNvbnRhaW5lcl9fb3B0aW9uc1wiKTtcbmNvbnN0IHRvZG9Tb3J0T3JkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5fX3NvcnRpbmctb3JkZXJcIik7XG5jb25zdCBhZGRUb2RvVGFza0lucHV0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5taWRkbGVfX3Rhc2stbGlzdF9fYWRkLXRhc2tfY29udGFpbmVyXCIpO1xuY29uc3QgdG9kb0xpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5fX3Rhc2stbGlzdF9fbGlzdFwiKTtcbmNvbnN0IHNvcnRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1haW5fX2hlYWRlcl9fc29ydC1jb250YWluZXJcIik7XG5jb25zdCBzaG9ydGluZ0Fycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluX19zb3J0aW5nLW9yZGVyIHN2Z1wiKTtcblxuZXhwb3J0IHtcbiAgcHJvamVjdElucHV0RG9tRWxlbWVudCxcbiAgcHJvamVjdExpc3REb21FbGVtZW50LFxuICBwcm9qZWN0TGlzdEl0ZW0sXG4gIHByb2plY3RJbnB1dFZhbHVlLFxuICBob21lTGlzdERvbWVFbGVtZW50LFxuICBub3RQcm9qZWN0WWV0Q29udGFpbmVyLFxuICBtaWRkbGVTZWN0aW9uLFxuICB0b2RvSGVhZGVyVGl0bGUsXG4gIHRvZG9IZWFkZXJDb250YWluZXIsXG4gIHRvZG9Tb3J0T3B0aW9uc0NvbnRhaW5lcixcbiAgdG9kb1NvcnRPcmRlcixcbiAgYWRkVG9kb1Rhc2tJbnB1dENvbnRhaW5lcixcbiAgc29ydEJ1dHRvbixcbiAgdG9kb0xpc3QsXG4gIHNob3J0aW5nQXJyb3csXG59O1xuIiwiY29uc3QgcHJvamVjdEFycmF5ID0gW107XG5cbmNvbnN0IHRvZG9BcnJheSA9IFtdO1xuXG5leHBvcnQgeyBwcm9qZWN0QXJyYXksIHRvZG9BcnJheSB9O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdGFydE9mRGF5XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiBhIGRheSBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIGEgZGF5XG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgZGF5IGZvciAyIFNlcHRlbWJlciAyMDE0IDExOjU1OjAwOlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZkRheShuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApKVxuICogLy89PiBUdWUgU2VwIDAyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mRGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHN0YXJ0T2ZEYXkgZnJvbSBcIi4uL3N0YXJ0T2ZEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzU2FtZURheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBcmUgdGhlIGdpdmVuIGRhdGVzIGluIHRoZSBzYW1lIGRheSAoYW5kIHllYXIgYW5kIG1vbnRoKT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFyZSB0aGUgZ2l2ZW4gZGF0ZXMgaW4gdGhlIHNhbWUgZGF5IChhbmQgeWVhciBhbmQgbW9udGgpP1xuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZUxlZnQgLSB0aGUgZmlyc3QgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGVzIGFyZSBpbiB0aGUgc2FtZSBkYXkgKGFuZCB5ZWFyIGFuZCBtb250aClcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyIDA2OjAwOjAwIGFuZCA0IFNlcHRlbWJlciAxODowMDowMCBpbiB0aGUgc2FtZSBkYXk/XG4gKiB2YXIgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQsIDYsIDApLCBuZXcgRGF0ZSgyMDE0LCA4LCA0LCAxOCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqIFxuICogQGV4YW1wbGVcbiAqIC8vIEFyZSA0IFNlcHRlbWJlciBhbmQgNCBPY3RvYmVyIGluIHRoZSBzYW1lIGRheT9cbiAqIHZhciByZXN1bHQgPSBpc1NhbWVEYXkobmV3IERhdGUoMjAxNCwgOCwgNCksIG5ldyBEYXRlKDIwMTQsIDksIDQpKVxuICogLy89PiBmYWxzZVxuICogXG4gKiBAZXhhbXBsZVxuICogLy8gQXJlIDQgU2VwdGVtYmVyLCAyMDE0IGFuZCA0IFNlcHRlbWJlciwgMjAxNSBpbiB0aGUgc2FtZSBkYXk/XG4gKiB2YXIgcmVzdWx0ID0gaXNTYW1lRGF5KG5ldyBEYXRlKDIwMTQsIDgsIDQpLCBuZXcgRGF0ZSgyMDE1LCA4LCA0KSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1NhbWVEYXkoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlTGVmdFN0YXJ0T2ZEYXkgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgZGF0ZVJpZ2h0U3RhcnRPZkRheSA9IHN0YXJ0T2ZEYXkoZGlydHlEYXRlUmlnaHQpO1xuICByZXR1cm4gZGF0ZUxlZnRTdGFydE9mRGF5LmdldFRpbWUoKSA9PT0gZGF0ZVJpZ2h0U3RhcnRPZkRheS5nZXRUaW1lKCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9JbnRlZ2VyKGRpcnR5TnVtYmVyKSB7XG4gIGlmIChkaXJ0eU51bWJlciA9PT0gbnVsbCB8fCBkaXJ0eU51bWJlciA9PT0gdHJ1ZSB8fCBkaXJ0eU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gTmFOO1xuICB9XG5cbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7XG5cbiAgaWYgKGlzTmFOKG51bWJlcikpIHtcbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgcmV0dXJuIG51bWJlciA8IDAgPyBNYXRoLmNlaWwobnVtYmVyKSA6IE1hdGguZmxvb3IobnVtYmVyKTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBhZGREYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRheXMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBhZGRlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IC0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgYWRkZWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gLSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgMTAgZGF5cyB0byAxIFNlcHRlbWJlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gYWRkRGF5cyhuZXcgRGF0ZSgyMDE0LCA4LCAxKSwgMTApXG4gKiAvLz0+IFRodSBTZXAgMTEgMjAxNCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZERheXMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG5cbiAgaWYgKGlzTmFOKGFtb3VudCkpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgfVxuXG4gIGlmICghYW1vdW50KSB7XG4gICAgLy8gSWYgMCBkYXlzLCBuby1vcCB0byBhdm9pZCBjaGFuZ2luZyB0aW1lcyBpbiB0aGUgaG91ciBiZWZvcmUgZW5kIG9mIERTVFxuICAgIHJldHVybiBkYXRlO1xuICB9XG5cbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgYW1vdW50KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHsgcHJvamVjdExpc3REb21FbGVtZW50IH0gZnJvbSBcIi4vZG9tLWVsZW1lbnRzXCI7XG5pbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi4vdXRpbGl0aWVzLWZ1bmN0aW9uc1wiO1xuXG5pbXBvcnQgSWNvbiBmcm9tIFwiL3NyYy9pY29ucy9kZWxldGUtb3V0bGluZS5wbmdcIjtcbmltcG9ydCBjaGV2cm9uIGZyb20gXCIvc3JjL2ljb25zL2NoZXZyb24tZG93bi5wbmdcIjtcblxuLyogUmVuZGVyIFByb2plY3QgRG9tIEVsZW1lbnRzIEZ1bmN0aW9uICovXG5mdW5jdGlvbiByZW5kZXJQcm9qZWN0TGlzdEl0ZW0oKSB7XG4gIGNvbnN0IGNyZWF0ZVByb2plY3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICBjcmVhdGVQcm9qZWN0RWxlbWVudC5pZCA9IHRoaXMuaWQ7XG4gIGNyZWF0ZVByb2plY3RFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtcHJvamVjdC1pZFwiLCB0aGlzLmlkKTtcbiAgY3JlYXRlUHJvamVjdEVsZW1lbnQuY2xhc3NOYW1lID0gXCJwcm9qZWN0LWxpc3RfX2l0ZW1cIjtcblxuICBjb25zdCBwcm9qZWN0TGlzdExhYmVsSW5wdXRNYXJrVXAgPSBgXG4gICAgICAgICA8aW5wdXQgdmFsdWU9XCIke3RoaXMubmFtZX1cIiBpZD1cInByb2plY3RJbnB1dFwiPlxuICAgICAgICAgICAgPGltZyBzcmM9JHtJY29ufSBpZD1cImdhcmJhZ2VJY29uXCI+YDtcbiAgY3JlYXRlUHJvamVjdEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIHByb2plY3RMaXN0TGFiZWxJbnB1dE1hcmtVcCk7XG5cbiAgcHJvamVjdExpc3REb21FbGVtZW50LmFwcGVuZChjcmVhdGVQcm9qZWN0RWxlbWVudCk7XG4gIHJldHVybiBwcm9qZWN0TGlzdERvbUVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJlbmRlclByb2plY3RUb2RvTGlzdEl0ZW0oKSB7XG4gIGNvbnN0IHRvZG9MaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tYWluX190YXNrLWxpc3RfX2xpc3RcIik7XG5cbiAgY29uc3QgbGlzdEl0ZW1NYXJrdXAgPSBgPGxpIFxuICBjbGFzcz1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtICR7dXRpbGl0aWVzLmNsYXNzU2V0Rm9yU2VsZWN0LmNhbGwodGhpcyl9IHZpc2libGVcIiBcbiAgZGF0YS10b2RvLWlkID0gJHt0aGlzLnRvZG9JZH0gZGF0YS1wcm9qZWN0SWQgPSAke3RoaXMucHJvamVjdElkfSA+XG4gICA8IS0tIEhlYWRlciAtLT5cbiAgIDxkaXYgY2xhc3M9XCJtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGl0bGUtY29udGFpbmVyXCI+XG4gICAgICA8ZGl2PlxuICAgICAgICAgPGxhYmVsIGZvcj1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19jaGVja2JveFwiPjwvbGFiZWw+XG4gICAgICAgICA8aW5wdXRcbiAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiICR7dGhpcy5jaGVja2JveH1cbiAgICAgICAgIGlkPVwibWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX2NoZWNrYm94IFwiXG4gICAgICAgICAvPlxuICAgICAgICAgPGxhYmVsIGZvcj1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZVwiPjwvbGFiZWw+XG4gICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBpZD1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX190aXRsZVwiIGNsYXNzPVwiJHt0aGlzLmNoZWNrYm94fVwiXG4gICAgICAgICB2YWx1ZT1cIiR7dGhpcy50b2RvTmFtZX1cIlxuICAgICAgICAgJHt1dGlsaXRpZXMuY2xhc3NTZXRGb3JDaGVjay5jYWxsKHRoaXMpfSAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICAgPHAgY2xhc3M9XCJtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS1yZWZlcmVuY2VcIlxuICAgICAgICAgZGF0YS1yZWZlcmVuY2UtaWQgPSAke3RoaXMudG9kb0lkfT5cbiAgICAgICAgIER1ZSBEYXRlICR7dXRpbGl0aWVzLmRhdGVSZWZlcmVuY2UuY2FsbCh0aGlzKX08L3A+XG4gICAgICAgIDxpbWcgc3JjPSR7Y2hldnJvbn0gaWQ9XCJsaXN0LWFycm93XCIgZGF0YS1jaGV2cm9uLWlkPSR7dGhpcy50b2RvSWR9IGFsdD1cImNoZXZyb24gaWNvblwiIC8+XG5cbiAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8IS0tIE5vdGVzIC0tPlxuICAgPGRpdiBjbGFzcz1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19ub3Rlcy1jb250YWluZXIgaGlkZGVuXCI+XG4gICAgICA8bGFiZWwgZm9yPVwibWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3RleHRhcmVhXCJcbiAgICAgICAgID5Ob3RlczwvbGFiZWxcbiAgICAgICAgID5cbiAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgaWQ9XCJtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fdGV4dGFyZWFcIlxuICAgICAgICAgZGF0YS10ZXh0YXJlYS1pZCA9ICR7dGhpcy50b2RvSWR9XG4gICAgICAgICBwbGFjZWhvbGRlciA9IFwiQWRkIHlvdXIgbm90ZXMgaGVyZS4uLlwiXG4gICAgICAgICA+JHt0aGlzLm5vdGVzfTwvdGV4dGFyZWE+XG4gICA8L2Rpdj5cbiAgIDwhLS0gRGF0ZSAtLT5cbiAgIDxkaXYgY2xhc3M9XCJtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fZGF0ZS1jb250YWluZXIgaGlkZGVuXCI+XG4gICAgICA8cCBjbGFzcz1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlLXRpdGxlXCI+RHVlIERhdGU8L3A+XG4gICAgICA8ZGl2PlxuICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgIGlkPVwidG9kYXktYnRuXCIgXG4gICAgICAgICBkYXRhLWRhdGU9XCJ0b2RheVwiIFxuICAgICAgICAgZGF0YS10b2RheS1pZD0ke3RoaXMudG9kb0lkfVxuICAgICAgICAgY2xhc3M9XCIke3V0aWxpdGllcy5jbGFzc1NldEZvclRvZGF5QnV0dG9ucy5jYWxsKHRoaXMpfVwiID5cbiAgICAgICAgIFRvZGF5XG4gICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgPGJ1dHRvbiBcbiAgICAgICAgIGlkPVwidG9tb3Jyb3ctYnRuXCJcbiAgICAgICAgIGRhdGEtZGF0ZT1cInRvbW9ycm93XCIgXG4gICAgICAgICBkYXRhLXRvbW9ycm93LWlkID0gJHt0aGlzLnRvZG9JZH1cbiAgICAgICAgIGNsYXNzPVwiJHt1dGlsaXRpZXMuY2xhc3NTZXRGb3JUb21vcnJvd0J1dHRvbnMuY2FsbCh0aGlzKX1cIlxuICAgICAgICAgPlRvbW9ycm93XG4gICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgPGxhYmVsIGZvcj1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlXCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgXG4gICAgICAgICB2YWx1ZSA9XCIke3V0aWxpdGllcy52YWx1ZUZvckRhdGVEaXNwbGF5LmNhbGwodGhpcyl9XCIgXG4gICAgICAgICBpZD1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlXCIgXG4gICAgICAgICBjbGFzcz1cIiR7dXRpbGl0aWVzLmNsYXNzU2V0Rm9yU3BlY2lmaWNCdXR0b25zLmNhbGwodGhpcyl9XCJcbiAgICAgICAgIGRhdGEtZGF0ZT1cInNwZWNpZmljXCIgXG4gICAgICAgICBkYXRhLXNwZWNpZmljLWlkPVwiJHt0aGlzLnRvZG9JZH1cIj5cbiAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8IS0tIFByaW9yaXR5IC0tPlxuICAgPGRpdiBjbGFzcz1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19wcmlvcml0eS1jb250YWluZXIgaGlkZGVuXCI+XG4gICAgICA8bGFiZWwgZm9yPVwibWFpbl9fdGFzay1saXN0X19saXN0LWl0ZW1fX3ByaW9yaXR5XCJcbiAgICAgICAgID5Qcmlvcml0eTwvbGFiZWxcbiAgICAgICAgID5cbiAgICAgIDxzZWxlY3RcbiAgICAgICAgIG5hbWU9XCJzZWxlY3QtcHJpb3JpdHlcIlxuICAgICAgICAgaWQ9XCJtYWluX190YXNrLWxpc3RfX2xpc3QtaXRlbV9fcHJpb3JpdHlcIlxuICAgICAgICAgZGF0YS1zZWxlY3QtaWQgPSAke3RoaXMudG9kb0lkfVxuICAgICAgICAgPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5vbmVcIiBzZWxlY3RlZD1cIlNlbGVjdCBhbiBvcHRpb25cIiBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAke3V0aWxpdGllcy5zZWxlY3RUYWdUZXh0LmNhbGwodGhpcyl9XG4gICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIj5Mb3c8L29wdGlvbj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtZWRpdW1cIj5NZWRpdW08L29wdGlvbj5cbiAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJoaWdoXCI+SGlnaDwvb3B0aW9uPlxuICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5vXCI+Tm9uZTwvb3B0aW9uPlxuICAgICAgPC9zZWxlY3Q+XG4gICA8L2Rpdj5cbiAgIDwhLS0gRGVsZXRlIEJ0biAtLT5cbiAgIDxidXR0b24gaWQ9XCJkZWxldGVcIiBjbGFzcz1cIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kZWxldGUtdGFza19fYnRuIGhpZGRlblwiPlxuICAgRGVsZXRlXG4gICA8L2J1dHRvbj5cbjwvbGk+YDtcblxuICByZXR1cm4gdG9kb0xpc3QuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsIGxpc3RJdGVtTWFya3VwKTtcbn1cblxuZXhwb3J0IHsgcmVuZGVyUHJvamVjdExpc3RJdGVtLCByZW5kZXJQcm9qZWN0VG9kb0xpc3RJdGVtIH07XG4iLCJpbXBvcnQge1xuICBwcm9qZWN0SW5wdXREb21FbGVtZW50IGFzIGlucHV0LFxuICBub3RQcm9qZWN0WWV0Q29udGFpbmVyLFxuICB0b2RvSGVhZGVyVGl0bGUsXG4gIHRvZG9IZWFkZXJDb250YWluZXIsXG4gIGFkZFRvZG9UYXNrSW5wdXRDb250YWluZXIsXG4gIHRvZG9Tb3J0T3B0aW9uc0NvbnRhaW5lcixcbiAgYWRkVG9kb1Rhc2tJbnB1dENvbnRhaW5lciBhcyBuZXdUb2RvSW5wdXQsXG4gIHRvZG9MaXN0LFxufSBmcm9tIFwiLi9kb20tZWxlbWVudHNcIjtcbmltcG9ydCB7IHByb2plY3RBcnJheSB9IGZyb20gXCIuL2FycmF5c1wiO1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3QtY2xhc3NcIjtcbmltcG9ydCAqIGFzIGRhdGVGbnMgZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyByZW5kZXJQcm9qZWN0VG9kb0xpc3RJdGVtIH0gZnJvbSBcIi4vcmVuZGVyLXByb2plY3RcIjtcblxubGV0IHNlbGVjdGVkTGk7XG5cbi8qIENsZWFyIElucHV0IHZhbHVlcyBhZnRlciBldmVudCBsaXN0ZW5lciBmaXJlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsZWFySW5wdXRWYWx1ZSgpIHtcbiAgaW5wdXQudmFsdWUgPSBcIlwiO1xufVxuXG4vKiBIaWdoTGlnaHQgTGlzdCBJdGVtcyBBbmQgcmVtb3ZlIEhpZ2hsaWdodCB3aGVuIGFub3RoZXIgbGlzdCBpdGVtIGlzIGNsaWNrZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBoaWdobGlnaHQobGkpIHtcbiAgaWYgKHNlbGVjdGVkTGkpIHtcbiAgICAvKiBpZiBzZWxlY3RlZCBsaXN0SXRlbSBpcyB0cnVlIHJlbW92ZSBjbGFzc1xuICBhdCBmaXJzdCBpdHMgZmFsc3kgYnV0IHdoZW4gaSBjbGljayB0aGUgZmlyc3QgbGkgaXQgdHVybnMgdHJ1dGh5ICovXG4gICAgc2VsZWN0ZWRMaS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICB9XG4gIC8qIGFkZCB0cnV0aHkgdmFsdWUgdG8gdmFyaWFibGUgb3V0c2lkZSB0aGUgc2NvcGUgb2YgdGhlIGZ1bmN0aW9uICovXG4gIHNlbGVjdGVkTGkgPSBsaTtcbiAgc2VsZWN0ZWRMaS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpO1xufVxuXG4vKiBSZW1vdmUgdGhlIG9iamVjdCBmcm9tIHRoZSBhcnJheSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUZyb21BcnJheShhcnJheSwgaW5kZXgpIHtcbiAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbn1cblxuLyogVG9nZ2xlIG5vdFByb2plY3RTY3JlZW4gY2xhc3MgKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVOb3RQcm9qZWN0U2NyZWVuKCkge1xuICBpZiAocHJvamVjdEFycmF5Lmxlbmd0aCB8fCBsb2NhbFN0b3JhZ2UubGVuZ3RoKSB7XG4gICAgbm90UHJvamVjdFlldENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICB9IGVsc2Uge1xuICAgIG5vdFByb2plY3RZZXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgfVxufVxuXG4vKiBUb2dnbGUgdGhlIHZpc2liaWxpdHkgZm9yIG1pZGRsZSBzZWN0aW9uIHRpdGxlIGFuZCB0b2RvIGlucHV0IGVsZW1lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVNaWRkbGVFbGVtZW50c1Zpc2liaWxpdHkoKSB7XG4gIGlmIChwcm9qZWN0QXJyYXkubGVuZ3RoKSB7XG4gICAgdG9kb0hlYWRlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcbiAgICBhZGRUb2RvVGFza0lucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuICB9IGVsc2Uge1xuICAgIHRvZG9IZWFkZXJDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcInZpc2libGVcIik7XG4gICAgYWRkVG9kb1Rhc2tJbnB1dENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwidmlzaWJsZVwiKTtcbiAgfVxufVxuXG4vKiBUb2dnbGUgZnVuY3Rpb24gZm9yIHNvcnQgb3B0aW9uIGNvbnRhaW5lciAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZVNvcnRpbmdPcHRpb25WaXNpYmlsaXR5KCkge1xuICB0b2RvU29ydE9wdGlvbnNDb250YWluZXIuY2xhc3NMaXN0LnRvZ2dsZShcInZpc2libGVcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25Td2l0Y2hlcigpIHtcbiAgbGV0IGNvbmRpdGlvbiA9IHRydWU7XG5cbiAgZnVuY3Rpb24gY2hhbmdlQ29uZGl0aW9uKCkge1xuICAgIGNvbmRpdGlvbiA9ICFjb25kaXRpb247XG4gICAgcmV0dXJuIGNvbmRpdGlvbjtcbiAgfVxuICByZXR1cm4gY2hhbmdlQ29uZGl0aW9uO1xufVxuXG4vKiBHZW5lcmF0ZSBhIHJhbmRvbSBudW1iZXIgKi9cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21OdW1iZXIoKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA5OTk5KTtcbn1cblxuLyogR2V0IHRoZSBwcm9qZWN0cyBiYWNrIGZyb20gbG9jYWwgc3RvcmFnZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByb2plY3QoKSB7XG4gIHJldHVybiBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwicHJvamVjdHNcIikgfHwgW10pO1xufVxuXG4vKiBTYXZlIHRoZSBwcm9qZWN0cyBpbiB0byB0aGUgbG9jYWwgc3RvcmFnZSovXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZShwcm9qZWN0cykge1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzXCIsIEpTT04uc3RyaW5naWZ5KHByb2plY3RzKSk7XG59XG5cbi8qIENsZWFyIHRoZSBsb2NhbCBzdG9yYWdlICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJMb2NhbFN0b3JhZ2UoKSB7XG4gIGxvY2FsU3RvcmFnZS5jbGVhcigpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VsZWN0VGFnVGV4dCgpIHtcbiAgaWYgKCF0aGlzLnByaW9yaXR5KSB7XG4gICAgbGV0IHRleHQgPSBcIlNlbGVjdCBhbiBvcHRpb25cIjtcbiAgICByZXR1cm4gdGV4dDtcbiAgfVxuICBpZiAodGhpcy5wcmlvcml0eSkge1xuICAgIHJldHVybiB0aGlzLnByaW9yaXR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5wcmlvcml0eS5zbGljZSgxKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NTZXRGb3JTZWxlY3QoKSB7XG4gIGlmICghdGhpcy5wcmlvcml0eSkge1xuICAgIHJldHVybiB0aGlzLnByaW9yaXR5O1xuICB9XG4gIGlmICh0aGlzLnByaW9yaXR5KSB7XG4gICAgcmV0dXJuIHRoaXMucHJpb3JpdHkudG9Mb3dlckNhc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NTZXRGb3JDaGVjaygpIHtcbiAgaWYgKCF0aGlzLmNoZWNrYm94KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgaWYgKHRoaXMuY2hlY2tib3gpIHtcbiAgICByZXR1cm4gXCJkaXNhYmxlZFwiO1xuICB9XG59XG5cbi8qIE5lZWQgdG8gZmluZCBhIHdheSB0byBtYWtlIHRob3NlIDMgaW50byAxICovXG5leHBvcnQgZnVuY3Rpb24gY2xhc3NTZXRGb3JUb2RheUJ1dHRvbnMoKSB7XG4gIGlmICghdGhpcy5kYXRlSWQpIHJldHVybiBcIlwiO1xuXG4gIGlmICh0aGlzLmRhdGVJZCA9PT0gXCJ0b2RheVwiKSB7XG4gICAgcmV0dXJuIFwiYWN0aXZlRGF0ZVwiO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc1NldEZvclRvbW9ycm93QnV0dG9ucygpIHtcbiAgaWYgKCF0aGlzLmRhdGVJZCkgcmV0dXJuIFwiXCI7XG5cbiAgaWYgKHRoaXMuZGF0ZUlkID09PSBcInRvbW9ycm93XCIpIHtcbiAgICByZXR1cm4gXCJhY3RpdmVEYXRlXCI7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGFzc1NldEZvclNwZWNpZmljQnV0dG9ucygpIHtcbiAgaWYgKCF0aGlzLmRhdGVJZCkgcmV0dXJuIFwiXCI7XG5cbiAgaWYgKHRoaXMuZGF0ZUlkID09PSBcInNwZWNpZmljXCIpIHtcbiAgICByZXR1cm4gXCJhY3RpdmVEYXRlXCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVSZWZlcmVuY2UoKSB7XG4gIHJldHVybiB0aGlzLmRhdGU7XG59XG5cbi8qIFJlbmRlcmVkIGRhdGUgaW5wdXQgdmFsdWUgKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUZvckRhdGVEaXNwbGF5KCkge1xuICAvKiBtYWtlIGEgbmV3IGRhdGUgb2JqZWN0IGZyb20gdG9kbyBkYXRlICovXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmRhdGUpO1xuICAvKiBDaGVjayBpZiB0b2RvIGRheSBpcyB0b2RheSAqL1xuICBjb25zdCB0b2RheUNoZWNrID0gZGF0ZUZucy5pc1RvZGF5KGRhdGUpO1xuICAvKiBDaGVjayBpZiB0b2RvIGRheSBpcyB0b21vcnJvdyAqL1xuICBjb25zdCB0b21vcnJvd0NoZWNrID0gZGF0ZUZucy5pc1RvbW9ycm93KGRhdGUpO1xuXG4gIC8qIElmIGNvbmRpdGlvbiBtZXQgcmV0dXJuIFwiXCJcbiB0aGF0IGZ1bmN0aW9uIGlzIHVzZWQgaW4gcmVuZGVyIG1vZHVsZSB0byBrZWVwIHRoZSBkaXNwbGF5XG4gdmFsdWUgb2YgZGF0ZSBpbnB1dCB0byB0aGlzLmRhdGUgaWYgaXMgc2V0IGZvciBkYXlzIHRoYXQgYXJlIG5laXRoZXIgXG4gdG9kYXkgb3IgdG9tb3Jyb3cgKi9cbiAgaWYgKHRvZGF5Q2hlY2sgfHwgdG9tb3Jyb3dDaGVjaykgcmV0dXJuIFwiXCI7XG5cbiAgcmV0dXJuIHRoaXMuZGF0ZTtcbn1cblxuLyogZnVuY3Rpb24gdG8gY3JlYXRlIGFuIG9iamVjdCB3aXRoIGdyb3VwZWQgdG9kb3MgYnkgZGF0ZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZG9CeURhdGUoKSB7XG4gIGxldCBhbGxBcnJheSA9IFtdO1xuICBnZXRQcm9qZWN0KCkuZm9yRWFjaCgocHJvamVjdCkgPT4ge1xuICAgIGFsbEFycmF5LnB1c2goLi4ucHJvamVjdC50b2RvTGlzdCk7XG4gIH0pO1xuICBjb25zdCB0b2RheUFycmF5ID0gYWxsQXJyYXkuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmRhdGVJZCA9PT0gXCJ0b2RheVwiKTtcbiAgY29uc3QgdG9tb3Jyb3dBcnJheSA9IGFsbEFycmF5LmZpbHRlcigoaXRlbSkgPT4gaXRlbS5kYXRlSWQgPT09IFwidG9tb3Jyb3dcIik7XG4gIGNvbnN0IHNjaGVkdWxlZEFycmF5ID0gYWxsQXJyYXkuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmRhdGVJZCA9PT0gXCJzcGVjaWZpY1wiKTtcblxuICByZXR1cm4geyBhbGxBcnJheSwgdG9kYXlBcnJheSwgdG9tb3Jyb3dBcnJheSwgc2NoZWR1bGVkQXJyYXkgfTtcbn1cblxuLyogRnVuY3Rpb24gZm9yIHVwZGF0ZSB0aGUgaG9tZSBjb250YWluZXIgdG9kbyBudW1iZXJzICovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlVG9kb0J5RGF0ZVRvdGFscygpIHtcbiAgY29uc3QgdG9kb0FycmF5T2JqZWN0ID0gZ2V0VG9kb0J5RGF0ZSgpO1xuXG4gIGNvbnN0IGFsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lcl9fYWxsLXRhc2tzXCIpO1xuICBjb25zdCB0b2RheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubGVmdC1zZWN0aW9uX19ob21lLWNvbnRhaW5lcl9fdG9kYXlcIik7XG4gIGNvbnN0IHRvbW9ycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyX190b21vcnJvd1wiKTtcbiAgY29uc3Qgc2NoZWR1bGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5sZWZ0LXNlY3Rpb25fX2hvbWUtY29udGFpbmVyX19zY2hlZHVsZWRcIik7XG5cbiAgYWxsLmxhc3RFbGVtZW50Q2hpbGQudGV4dENvbnRlbnQgPSB0b2RvQXJyYXlPYmplY3QuYWxsQXJyYXkubGVuZ3RoO1xuICB0b2RheS5sYXN0RWxlbWVudENoaWxkLnRleHRDb250ZW50ID0gdG9kb0FycmF5T2JqZWN0LnRvZGF5QXJyYXkubGVuZ3RoO1xuICB0b21vcnJvdy5sYXN0RWxlbWVudENoaWxkLnRleHRDb250ZW50ID0gdG9kb0FycmF5T2JqZWN0LnRvbW9ycm93QXJyYXkubGVuZ3RoO1xuICBzY2hlZHVsZWQubGFzdEVsZW1lbnRDaGlsZC50ZXh0Q29udGVudCA9IHRvZG9BcnJheU9iamVjdC5zY2hlZHVsZWRBcnJheS5sZW5ndGg7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGZpbmQgdGhlIGluZGV4IG9mIGFuIGFycmF5ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5kZXgoYXJyYXksIGRhdGEpIHtcbiAgY29uc3QgaW5kZXggPSBhcnJheS5maW5kSW5kZXgoKG9iamVjdCkgPT4gb2JqZWN0LmlkID09PSArZGF0YSk7XG4gIHJldHVybiBpbmRleDtcbn1cblxuLyogRnVuY3Rpb24gdG8gZmluZCB0aGUgaW5kZXggb2YgYW4gdG9kb0FycmF5ICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9kb0xpc3RJbmRleChhcnJheSwgZGF0YSkge1xuICBjb25zdCBpbmRleCA9IGFycmF5LmZpbmRJbmRleCgob2JqZWN0KSA9PiBvYmplY3QudG9kb0lkID09PSArZGF0YSk7XG4gIHJldHVybiBpbmRleDtcbn1cbiIsImltcG9ydCBpc1NhbWVEYXkgZnJvbSBcIi4uL2lzU2FtZURheS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNUb2RheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqIEBwdXJlIGZhbHNlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJcyB0aGUgZ2l2ZW4gZGF0ZSB0b2RheT9cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBEYXRlLm5vdygpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gY2hlY2tcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0aGUgZGF0ZSBpcyB0b2RheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0LCBpcyA2IE9jdG9iZXIgMTQ6MDA6MDAgdG9kYXk/XG4gKiB2YXIgcmVzdWx0ID0gaXNUb2RheShuZXcgRGF0ZSgyMDE0LCA5LCA2LCAxNCwgMCkpXG4gKiAvLz0+IHRydWVcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RvZGF5KGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIGlzU2FtZURheShkaXJ0eURhdGUsIERhdGUubm93KCkpO1xufSIsImltcG9ydCBhZGREYXlzIGZyb20gXCIuLi9hZGREYXlzL2luZGV4LmpzXCI7XG5pbXBvcnQgaXNTYW1lRGF5IGZyb20gXCIuLi9pc1NhbWVEYXkvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIGlzVG9tb3Jyb3dcbiAqIEBjYXRlZ29yeSBEYXkgSGVscGVyc1xuICogQHN1bW1hcnkgSXMgdGhlIGdpdmVuIGRhdGUgdG9tb3Jyb3c/XG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSXMgdGhlIGdpdmVuIGRhdGUgdG9tb3Jyb3c/XG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIG5vdCBwcmVzZW50IGluIHRoZSBGUCBzdWJtb2R1bGUgYXNcbiAqID4gaXQgdXNlcyBgRGF0ZS5ub3coKWAgaW50ZXJuYWxseSBoZW5jZSBpbXB1cmUgYW5kIGNhbid0IGJlIHNhZmVseSBjdXJyaWVkLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdG9tb3Jyb3dcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0b2RheSBpcyA2IE9jdG9iZXIgMjAxNCwgaXMgNyBPY3RvYmVyIDE0OjAwOjAwIHRvbW9ycm93P1xuICogdmFyIHJlc3VsdCA9IGlzVG9tb3Jyb3cobmV3IERhdGUoMjAxNCwgOSwgNywgMTQsIDApKVxuICogLy89PiB0cnVlXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUb21vcnJvdyhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHJldHVybiBpc1NhbWVEYXkoZGlydHlEYXRlLCBhZGREYXlzKERhdGUubm93KCksIDEpKTtcbn0iLCJjbGFzcyBQcm9qZWN0IHtcbiAgY29uc3RydWN0b3IobmFtZSwgaWQpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLnRvZG9MaXN0ID0gW107XG4gIH1cbn1cblxuY2xhc3MgVG9kbyB7XG4gIGNvbnN0cnVjdG9yKG5hbWUsIHByb2plY3RJZCwgdG9kb0lkKSB7XG4gICAgdGhpcy50b2RvTmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XG4gICAgdGhpcy50b2RvSWQgPSB0b2RvSWQ7XG4gICAgdGhpcy5kYXRlID0gXCJcIjtcbiAgICB0aGlzLm5vdGVzID0gXCJcIjtcbiAgICB0aGlzLnByaW9yaXR5ID0gXCJcIjtcbiAgICB0aGlzLmNoZWNrYm94ID0gXCJcIjtcbiAgICB0aGlzLmRhdGVJZCA9IFwiXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgUHJvamVjdCwgVG9kbyB9O1xuIiwiaW1wb3J0ICogYXMgdXRpbGl0aWVzIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvdXRpbGl0aWVzLWZ1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEFycmF5IH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9hcnJheXMuanNcIjtcbmltcG9ydCB7XG4gIGFkZFRvZG9UYXNrSW5wdXRDb250YWluZXIgYXMgdG9kb0lucHV0LFxuICB0b2RvSGVhZGVyVGl0bGUgYXMgdG9kb1RpdGxlLFxuICB0b2RvSGVhZGVyQ29udGFpbmVyIGFzIGhlYWRlcixcbiAgYWRkVG9kb1Rhc2tJbnB1dENvbnRhaW5lciBhcyBuZXdUb2RvSW5wdXQsXG59IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvZG9tLWVsZW1lbnRzLmpzXCI7XG5cbmltcG9ydCB7IGRlbGV0ZVByb2plY3RMaXN0SXRlbSB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3Byb2plY3QtRGVsZXRlLmpzXCI7XG5pbXBvcnQgeyByZW5kZXJUb2RvV2hpbGVTd2l0Y2hpbmdQcm9qZWN0cyB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvbWFpbkV2ZW50RnVuY3Rpb25zL3Byb2plY3QtUmVuZGVyLVRvZG8uanNcIjtcblxuZnVuY3Rpb24gY3JlYXRlVG9kb0RhdGFTZXQoKSB7XG4gIGhlYWRlci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXByb2plY3QtaWRcIiwgdGhpcy5pZCk7XG4gIGNvbnN0IHRvZG9JbnB1dCA9IG5ld1RvZG9JbnB1dC5sYXN0RWxlbWVudENoaWxkO1xuICB0b2RvSW5wdXQuc2V0QXR0cmlidXRlKFwiZGF0YS1wcm9qZWN0LVRvZG8tSURcIiwgdGhpcy5pZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0U2VjdGlvblNlbGVjdGlvbkhhbmRsZXIoZSkge1xuICBjb25zdCBwcm9qZWN0RG9tSXRlbSA9IGUudGFyZ2V0LmNsb3Nlc3QoXCJsaVwiKTtcbiAgaWYgKCFwcm9qZWN0RG9tSXRlbSkgcmV0dXJuO1xuICBjb25zdCBwcm9qZWN0TGlzdCA9IHByb2plY3REb21JdGVtLnBhcmVudEVsZW1lbnQ7XG4gIGNvbnN0IHByb2plY3RMaXN0SXRlbUlkID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LnByb2plY3RJZCB8fCBwcm9qZWN0RG9tSXRlbS5kYXRhc2V0LnByb2plY3RJZDtcbiAgY29uc3QgcHJvamVjdEluZGV4ID0gdXRpbGl0aWVzLmdldEluZGV4KHByb2plY3RBcnJheSwgcHJvamVjdExpc3RJdGVtSWQpO1xuICBjb25zdCBzcGVjaWZpY1Byb2plY3QgPSBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XTtcblxuICB1dGlsaXRpZXMuaGlnaGxpZ2h0KHByb2plY3REb21JdGVtKTtcblxuICB0b2RvVGl0bGUudGV4dENvbnRlbnQgPSBzcGVjaWZpY1Byb2plY3QubmFtZTtcblxuICBjcmVhdGVUb2RvRGF0YVNldC5jYWxsKHNwZWNpZmljUHJvamVjdCk7XG5cbiAgaGVhZGVyLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xuXG4gIHRvZG9JbnB1dC5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcblxuICByZW5kZXJUb2RvV2hpbGVTd2l0Y2hpbmdQcm9qZWN0cyhzcGVjaWZpY1Byb2plY3QpO1xuXG4gIGlmIChlLnRhcmdldC5pZCA9PT0gXCJnYXJiYWdlSWNvblwiKSB7XG4gICAgZGVsZXRlUHJvamVjdExpc3RJdGVtKHByb2plY3REb21JdGVtLCBwcm9qZWN0TGlzdCwgcHJvamVjdEluZGV4KTtcbiAgfVxufVxuIiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNEYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiB2YWx1ZSBhIGRhdGU/XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGluc3RhbmNlIG9mIERhdGUuIFRoZSBmdW5jdGlvbiB3b3JrcyBmb3IgZGF0ZXMgdHJhbnNmZXJyZWQgYWNyb3NzIGlmcmFtZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBkYXRlXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciBhIHZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUobmV3IERhdGUoKSlcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gaW52YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKG5ldyBEYXRlKE5hTikpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHNvbWUgdmFsdWU6XG4gKiBjb25zdCByZXN1bHQgPSBpc0RhdGUoJzIwMTQtMDItMzEnKVxuICogLy89PiBmYWxzZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgYW4gb2JqZWN0OlxuICogY29uc3QgcmVzdWx0ID0gaXNEYXRlKHt9KVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzRGF0ZSh2YWx1ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IERhdGVdJztcbn0iLCJpbXBvcnQgaXNEYXRlIGZyb20gXCIuLi9pc0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKDEzOTM4MDQ4MDAwMDApXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSBpbnZhbGlkIGRhdGU6XG4gKiBjb25zdCByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAoIWlzRGF0ZShkaXJ0eURhdGUpICYmIHR5cGVvZiBkaXJ0eURhdGUgIT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihOdW1iZXIoZGF0ZSkpO1xufSIsInZhciBmb3JtYXREaXN0YW5jZUxvY2FsZSA9IHtcbiAgbGVzc1RoYW5YU2Vjb25kczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIHNlY29uZCcsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIHhTZWNvbmRzOiB7XG4gICAgb25lOiAnMSBzZWNvbmQnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHNlY29uZHMnXG4gIH0sXG4gIGhhbGZBTWludXRlOiAnaGFsZiBhIG1pbnV0ZScsXG4gIGxlc3NUaGFuWE1pbnV0ZXM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBtaW51dGUnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICB4TWludXRlczoge1xuICAgIG9uZTogJzEgbWludXRlJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtaW51dGVzJ1xuICB9LFxuICBhYm91dFhIb3Vyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgaG91cicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhIb3Vyczoge1xuICAgIG9uZTogJzEgaG91cicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gaG91cnMnXG4gIH0sXG4gIHhEYXlzOiB7XG4gICAgb25lOiAnMSBkYXknLFxuICAgIG90aGVyOiAne3tjb3VudH19IGRheXMnXG4gIH0sXG4gIGFib3V0WFdlZWtzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB3ZWVrJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgeFdlZWtzOiB7XG4gICAgb25lOiAnMSB3ZWVrJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB3ZWVrcydcbiAgfSxcbiAgYWJvdXRYTW9udGhzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBtb250aCcsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICB4TW9udGhzOiB7XG4gICAgb25lOiAnMSBtb250aCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbW9udGhzJ1xuICB9LFxuICBhYm91dFhZZWFyczoge1xuICAgIG9uZTogJ2Fib3V0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIHhZZWFyczoge1xuICAgIG9uZTogJzEgeWVhcicsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIG92ZXJYWWVhcnM6IHtcbiAgICBvbmU6ICdvdmVyIDEgeWVhcicsXG4gICAgb3RoZXI6ICdvdmVyIHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgYWxtb3N0WFllYXJzOiB7XG4gICAgb25lOiAnYWxtb3N0IDEgeWVhcicsXG4gICAgb3RoZXI6ICdhbG1vc3Qge3tjb3VudH19IHllYXJzJ1xuICB9XG59O1xuXG52YXIgZm9ybWF0RGlzdGFuY2UgPSBmdW5jdGlvbiAodG9rZW4sIGNvdW50LCBvcHRpb25zKSB7XG4gIHZhciByZXN1bHQ7XG4gIHZhciB0b2tlblZhbHVlID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuXG4gIGlmICh0eXBlb2YgdG9rZW5WYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSB0b2tlblZhbHVlO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vbmU7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gdG9rZW5WYWx1ZS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudC50b1N0cmluZygpKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCAmJiBvcHRpb25zLmFkZFN1ZmZpeCkge1xuICAgIGlmIChvcHRpb25zLmNvbXBhcmlzb24gJiYgb3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXREaXN0YW5jZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZEZvcm1hdExvbmdGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIC8vIFRPRE86IFJlbW92ZSBTdHJpbmcoKVxuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGggPyBTdHJpbmcob3B0aW9ucy53aWR0aCkgOiBhcmdzLmRlZmF1bHRXaWR0aDtcbiAgICB2YXIgZm9ybWF0ID0gYXJncy5mb3JtYXRzW3dpZHRoXSB8fCBhcmdzLmZvcm1hdHNbYXJncy5kZWZhdWx0V2lkdGhdO1xuICAgIHJldHVybiBmb3JtYXQ7XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkRm9ybWF0TG9uZ0ZuIGZyb20gXCIuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzXCI7XG52YXIgZGF0ZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdFRUVFLCBNTU1NIGRvLCB5JyxcbiAgbG9uZzogJ01NTU0gZG8sIHknLFxuICBtZWRpdW06ICdNTU0gZCwgeScsXG4gIHNob3J0OiAnTU0vZGQveXl5eSdcbn07XG52YXIgdGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6ICdoOm1tOnNzIGEgenp6eicsXG4gIGxvbmc6ICdoOm1tOnNzIGEgeicsXG4gIG1lZGl1bTogJ2g6bW06c3MgYScsXG4gIHNob3J0OiAnaDptbSBhJ1xufTtcbnZhciBkYXRlVGltZUZvcm1hdHMgPSB7XG4gIGZ1bGw6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBsb25nOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbWVkaXVtOiAne3tkYXRlfX0sIHt7dGltZX19JyxcbiAgc2hvcnQ6ICd7e2RhdGV9fSwge3t0aW1lfX0nXG59O1xudmFyIGZvcm1hdExvbmcgPSB7XG4gIGRhdGU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgdGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IHRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICBkYXRlVGltZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVUaW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdExvbmc7IiwidmFyIGZvcm1hdFJlbGF0aXZlTG9jYWxlID0ge1xuICBsYXN0V2VlazogXCInbGFzdCcgZWVlZSAnYXQnIHBcIixcbiAgeWVzdGVyZGF5OiBcIid5ZXN0ZXJkYXkgYXQnIHBcIixcbiAgdG9kYXk6IFwiJ3RvZGF5IGF0JyBwXCIsXG4gIHRvbW9ycm93OiBcIid0b21vcnJvdyBhdCcgcFwiLFxuICBuZXh0V2VlazogXCJlZWVlICdhdCcgcFwiLFxuICBvdGhlcjogJ1AnXG59O1xuXG52YXIgZm9ybWF0UmVsYXRpdmUgPSBmdW5jdGlvbiAodG9rZW4sIF9kYXRlLCBfYmFzZURhdGUsIF9vcHRpb25zKSB7XG4gIHJldHVybiBmb3JtYXRSZWxhdGl2ZUxvY2FsZVt0b2tlbl07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXRSZWxhdGl2ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsZW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiaW1wb3J0IGJ1aWxkTG9jYWxpemVGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZExvY2FsaXplRm4vaW5kZXguanNcIjtcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddXG59OyAvLyBOb3RlOiBpbiBFbmdsaXNoLCB0aGUgbmFtZXMgb2YgZGF5cyBvZiB0aGUgd2VlayBhbmQgbW9udGhzIGFyZSBjYXBpdGFsaXplZC5cbi8vIElmIHlvdSBhcmUgbWFraW5nIGEgbmV3IGxvY2FsZSBiYXNlZCBvbiB0aGlzIG9uZSwgY2hlY2sgaWYgdGhlIHNhbWUgaXMgdHJ1ZSBmb3IgdGhlIGxhbmd1YWdlIHlvdSdyZSB3b3JraW5nIG9uLlxuLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4vLyBlLmcuIGluIFNwYW5pc2ggbGFuZ3VhZ2UgdGhlIHdlZWtkYXlzIGFuZCBtb250aHMgc2hvdWxkIGJlIGluIHRoZSBsb3dlcmNhc2UuXG5cbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbnZhciBvcmRpbmFsTnVtYmVyID0gZnVuY3Rpb24gKGRpcnR5TnVtYmVyLCBfb3B0aW9ucykge1xuICB2YXIgbnVtYmVyID0gTnVtYmVyKGRpcnR5TnVtYmVyKTsgLy8gSWYgb3JkaW5hbCBudW1iZXJzIGRlcGVuZCBvbiBjb250ZXh0LCBmb3IgZXhhbXBsZSxcbiAgLy8gaWYgdGhleSBhcmUgZGlmZmVyZW50IGZvciBkaWZmZXJlbnQgZ3JhbW1hdGljYWwgZ2VuZGVycyxcbiAgLy8gdXNlIGBvcHRpb25zLnVuaXRgLlxuICAvL1xuICAvLyBgdW5pdGAgY2FuIGJlICd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXRlJywgJ2RheU9mWWVhcicsXG4gIC8vICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJy5cblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59O1xuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBxdWFydGVyIC0gMTtcbiAgICB9XG4gIH0pLFxuICBtb250aDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IG1vbnRoVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXk6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBmb3JtYXR0aW5nVmFsdWVzOiBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRGb3JtYXR0aW5nV2lkdGg6ICd3aWRlJ1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsaXplOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciBrZXkgPSBBcnJheS5pc0FycmF5KHBhcnNlUGF0dGVybnMpID8gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pIDogZmluZEtleShwYXJzZVBhdHRlcm5zLCBmdW5jdGlvbiAocGF0dGVybikge1xuICAgICAgcmV0dXJuIHBhdHRlcm4udGVzdChtYXRjaGVkU3RyaW5nKTtcbiAgICB9KTtcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2soa2V5KSA6IGtleTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YXIgcmVzdCA9IHN0cmluZy5zbGljZShtYXRjaGVkU3RyaW5nLmxlbmd0aCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHJlc3Q6IHJlc3RcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0Lmhhc093blByb3BlcnR5KGtleSkgJiYgcHJlZGljYXRlKG9iamVjdFtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdW5kZWZpbmVkO1xufSIsImltcG9ydCBidWlsZE1hdGNoRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzXCI7XG5pbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzXCI7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSBcIi4vX2xpYi9mb3JtYXREaXN0YW5jZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdExvbmcgZnJvbSBcIi4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzXCI7XG5pbXBvcnQgZm9ybWF0UmVsYXRpdmUgZnJvbSBcIi4vX2xpYi9mb3JtYXRSZWxhdGl2ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gXCIuL19saWIvbG9jYWxpemUvaW5kZXguanNcIjtcbmltcG9ydCBtYXRjaCBmcm9tIFwiLi9fbGliL21hdGNoL2luZGV4LmpzXCI7XG5cbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG52YXIgbG9jYWxlID0ge1xuICBjb2RlOiAnZW4tVVMnLFxuICBmb3JtYXREaXN0YW5jZTogZm9ybWF0RGlzdGFuY2UsXG4gIGZvcm1hdExvbmc6IGZvcm1hdExvbmcsXG4gIGZvcm1hdFJlbGF0aXZlOiBmb3JtYXRSZWxhdGl2ZSxcbiAgbG9jYWxpemU6IGxvY2FsaXplLFxuICBtYXRjaDogbWF0Y2gsXG4gIG9wdGlvbnM6IHtcbiAgICB3ZWVrU3RhcnRzT246IDBcbiAgICAvKiBTdW5kYXkgKi9cbiAgICAsXG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGU7IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tIFwiLi4vZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENXZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGU7XG4gIHZhciBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGUgJiYgbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgeWVhciA9IGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWsuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgZGF0ZSA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2VlaywgZGlydHlPcHRpb25zKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDV2VlayhkaXJ0eURhdGUsIG9wdGlvbnMpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ1dlZWsoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ1dlZWtZZWFyKGRhdGUsIG9wdGlvbnMpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICovXG5cbnZhciBmb3JtYXR0ZXJzID0ge1xuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIC8vIEZyb20gaHR0cDovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS0zMS90cjM1LWRhdGVzLmh0bWwjRGF0ZV9Gb3JtYXRfdG9rZW5zXG4gICAgLy8gfCBZZWFyICAgICB8ICAgICB5IHwgeXkgfCAgIHl5eSB8ICB5eXl5IHwgeXl5eXkgfFxuICAgIC8vIHwtLS0tLS0tLS0tfC0tLS0tLS18LS0tLXwtLS0tLS0tfC0tLS0tLS18LS0tLS0tLXxcbiAgICAvLyB8IEFEIDEgICAgIHwgICAgIDEgfCAwMSB8ICAgMDAxIHwgIDAwMDEgfCAwMDAwMSB8XG4gICAgLy8gfCBBRCAxMiAgICB8ICAgIDEyIHwgMTIgfCAgIDAxMiB8ICAwMDEyIHwgMDAwMTIgfFxuICAgIC8vIHwgQUQgMTIzICAgfCAgIDEyMyB8IDIzIHwgICAxMjMgfCAgMDEyMyB8IDAwMTIzIHxcbiAgICAvLyB8IEFEIDEyMzQgIHwgIDEyMzQgfCAzNCB8ICAxMjM0IHwgIDEyMzQgfCAwMTIzNCB8XG4gICAgLy8gfCBBRCAxMjM0NSB8IDEyMzQ1IHwgNDUgfCAxMjM0NSB8IDEyMzQ1IHwgMTIzNDUgfFxuICAgIHZhciBzaWduZWRZZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpOyAvLyBSZXR1cm5zIDEgZm9yIDEgQkMgKHdoaWNoIGlzIHllYXIgMCBpbiBKYXZhU2NyaXB0KVxuXG4gICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRva2VuID09PSAneXknID8geWVhciAlIDEwMCA6IHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcbiAgICByZXR1cm4gdG9rZW4gPT09ICdNJyA/IFN0cmluZyhtb250aCArIDEpIDogYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0RhdGUoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRhdGUuZ2V0VVRDSG91cnMoKSAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2EnOlxuICAgICAgY2FzZSAnYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlLnRvVXBwZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZVswXTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlID09PSAnYW0nID8gJ2EubS4nIDogJ3AubS4nO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMiB8fCAxMiwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ0hvdXJzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDTWludXRlcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBTZWNvbmRcbiAgczogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ1NlY29uZHMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBudW1iZXJPZkRpZ2l0cyA9IHRva2VuLmxlbmd0aDtcbiAgICB2YXIgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgICB2YXIgZnJhY3Rpb25hbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGxpc2Vjb25kcyAqIE1hdGgucG93KDEwLCBudW1iZXJPZkRpZ2l0cyAtIDMpKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGZyYWN0aW9uYWxTZWNvbmRzLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJpbXBvcnQgZ2V0VVRDRGF5T2ZZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0RheU9mWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2VlayBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCBhZGRMZWFkaW5nWmVyb3MgZnJvbSBcIi4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qc1wiO1xuaW1wb3J0IGxpZ2h0Rm9ybWF0dGVycyBmcm9tIFwiLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbn07XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCBNaWxsaXNlY29uZHMgaW4gZGF5ICAgICAgICAgICAgfFxuICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICogfCAgYyAgfCBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2VlayAgfCAgQyogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgRiogfCBEYXkgb2Ygd2VlayBpbiBtb250aCAgICAgICAgICAgfFxuICogfCAgZyogfCBNb2RpZmllZCBKdWxpYW4gZGF5ICAgICAgICAgICAgfCAgRyAgfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaSEgfCBJU08gZGF5IG9mIHdlZWsgICAgICAgICAgICAgICAgfCAgSSEgfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgfFxuICogfCAgaiogfCBMb2NhbGl6ZWQgaG91ciB3LyBkYXkgcGVyaW9kICAgfCAgSiogfCBMb2NhbGl6ZWQgaG91ciB3L28gZGF5IHBlcmlvZCAgfFxuICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbCogfCAoZGVwcmVjYXRlZCkgICAgICAgICAgICAgICAgICAgfCAgTCAgfCBTdGFuZC1hbG9uZSBtb250aCAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbyEgfCBPcmRpbmFsIG51bWJlciBtb2RpZmllciAgICAgICAgfCAgTyAgfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgfFxuICogfCAgcCEgfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgfCAgUCEgfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgfFxuICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgciogfCBSZWxhdGVkIEdyZWdvcmlhbiB5ZWFyICAgICAgICAgfCAgUiEgfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICogfCAgdSAgfCBFeHRlbmRlZCB5ZWFyICAgICAgICAgICAgICAgICAgfCAgVSogfCBDeWNsaWMgeWVhciAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgdiogfCBUaW1lem9uZSAoZ2VuZXJpYyBub24tbG9jYXQuKSAgfCAgViogfCBUaW1lem9uZSAobG9jYXRpb24pICAgICAgICAgICAgfFxuICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICogfCAgeCAgfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgfCAgWCAgfCBUaW1lem9uZSAoSVNPLTg2MDEpICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgfFxuICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqXG4gKiBMZXR0ZXJzIG1hcmtlZCBieSAhIGFyZSBub24tc3RhbmRhcmQsIGJ1dCBpbXBsZW1lbnRlZCBieSBkYXRlLWZuczpcbiAqIC0gYG9gIG1vZGlmaWVzIHRoZSBwcmV2aW91cyB0b2tlbiB0byB0dXJuIGl0IGludG8gYW4gb3JkaW5hbCAoc2VlIGBmb3JtYXRgIGRvY3MpXG4gKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gKiAgIGkuZS4gNyBmb3IgU3VuZGF5LCAxIGZvciBNb25kYXksIGV0Yy5cbiAqIC0gYElgIGlzIElTTyB3ZWVrIG9mIHllYXIsIGFzIG9wcG9zZWQgdG8gYHdgIHdoaWNoIGlzIGxvY2FsIHdlZWsgb2YgeWVhci5cbiAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICogICBgUmAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGBJYCBhbmQgYGlgXG4gKiAgIGZvciB1bml2ZXJzYWwgSVNPIHdlZWstbnVtYmVyaW5nIGRhdGUsIHdoZXJlYXNcbiAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICogICBmb3Igd2Vlay1udW1iZXJpbmcgZGF0ZSBzcGVjaWZpYyB0byB0aGUgbG9jYWxlLlxuICogLSBgUGAgaXMgbG9uZyBsb2NhbGl6ZWQgZGF0ZSBmb3JtYXRcbiAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gKi9cblxudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjsgLy8gVHdvIGRpZ2l0IHllYXJcblxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH0gLy8gT3JkaW5hbCBudW1iZXJcblxuXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH0gLy8gUGFkZGluZ1xuXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhYSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0sIFBNLCBtaWRuaWdodCwgbm9vblxuICBiOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPT09IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5vb247XG4gICAgfSBlbHNlIGlmIChob3VycyA9PT0gMCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5taWRuaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYic6XG4gICAgICBjYXNlICdiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmInOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdiYmJiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYmJiYic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gaW4gdGhlIG1vcm5pbmcsIGluIHRoZSBhZnRlcm5vb24sIGluIHRoZSBldmVuaW5nLCBhdCBuaWdodFxuICBCOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWU7XG5cbiAgICBpZiAoaG91cnMgPj0gMTcpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uZXZlbmluZztcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDEyKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLmFmdGVybm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID49IDQpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubW9ybmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5uaWdodDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdCJzpcbiAgICAgIGNhc2UgJ0JCJzpcbiAgICAgIGNhc2UgJ0JCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCQic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnQkJCQic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSG91ciBbMS0xMl1cbiAgaDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2hvJykge1xuICAgICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpICUgMTI7XG4gICAgICBpZiAoaG91cnMgPT09IDApIGhvdXJzID0gMTI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuaChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdIbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDSG91cnMoKSwge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuSChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMTFdXG4gIEs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFsxLTI0XVxuICBrOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpO1xuICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAyNDtcblxuICAgIGlmICh0b2tlbiA9PT0gJ2tvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaG91cnMsIHtcbiAgICAgICAgdW5pdDogJ2hvdXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGhvdXJzLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ21vJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENNaW51dGVzKCksIHtcbiAgICAgICAgdW5pdDogJ21pbnV0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMubShkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnc28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ1NlY29uZHMoKSwge1xuICAgICAgICB1bml0OiAnc2Vjb25kJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5zKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gRnJhY3Rpb24gb2Ygc2Vjb25kXG4gIFM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuUyhkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIFRpbWV6b25lIChJU08tODYwMS4gSWYgb2Zmc2V0IGlzIDAsIG91dHB1dCBpcyBhbHdheXMgYCdaJ2ApXG4gIFg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgaWYgKHRpbWV6b25lT2Zmc2V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gJ1onO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICdYJzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWGBcblxuICAgICAgY2FzZSAnWFhYWCc6XG4gICAgICBjYXNlICdYWCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgWFhYYFxuXG4gICAgICBjYXNlICdYWFhYWCc6XG4gICAgICBjYXNlICdYWFgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGAnKzAwOjAwJ2Agb3IgZXF1aXZhbGVudClcbiAgeDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBIb3VycyBhbmQgb3B0aW9uYWwgbWludXRlc1xuICAgICAgY2FzZSAneCc6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZVdpdGhPcHRpb25hbE1pbnV0ZXModGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHhgXG5cbiAgICAgIGNhc2UgJ3h4eHgnOlxuICAgICAgY2FzZSAneHgnOlxuICAgICAgICAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGggYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYHh4eGBcblxuICAgICAgY2FzZSAneHh4eHgnOlxuICAgICAgY2FzZSAneHh4JzogLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aCBgOmAgZGVsaW1pdGVyXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChHTVQpXG4gIE86IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ08nOlxuICAgICAgY2FzZSAnT08nOlxuICAgICAgY2FzZSAnT09PJzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnT09PTyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXRpb24pXG4gIHo6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lem9uZU9mZnNldCA9IG9yaWdpbmFsRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gU2hvcnRcbiAgICAgIGNhc2UgJ3onOlxuICAgICAgY2FzZSAnenonOlxuICAgICAgY2FzZSAnenp6JzpcbiAgICAgICAgcmV0dXJuICdHTVQnICsgZm9ybWF0VGltZXpvbmVTaG9ydCh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICAgIC8vIExvbmdcblxuICAgICAgY2FzZSAnenp6eic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCwgJzonKTtcbiAgICB9XG4gIH0sXG4gIC8vIFNlY29uZHMgdGltZXN0YW1wXG4gIHQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKG9yaWdpbmFsRGF0ZS5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICBUOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXN0YW1wID0gb3JpZ2luYWxEYXRlLmdldFRpbWUoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHRpbWVzdGFtcCwgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVTaG9ydChvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuXG4gIGlmIChtaW51dGVzID09PSAwKSB7XG4gICAgcmV0dXJuIHNpZ24gKyBTdHJpbmcoaG91cnMpO1xuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICByZXR1cm4gc2lnbiArIFN0cmluZyhob3VycykgKyBkZWxpbWl0ZXIgKyBhZGRMZWFkaW5nWmVyb3MobWludXRlcywgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyhvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIGlmIChvZmZzZXQgJSA2MCA9PT0gMCkge1xuICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgICByZXR1cm4gc2lnbiArIGFkZExlYWRpbmdaZXJvcyhNYXRoLmFicyhvZmZzZXQpIC8gNjAsIDIpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQsIGRpcnR5RGVsaW1pdGVyKSB7XG4gIHZhciBkZWxpbWl0ZXIgPSBkaXJ0eURlbGltaXRlciB8fCAnJztcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gYWRkTGVhZGluZ1plcm9zKE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApLCAyKTtcbiAgdmFyIG1pbnV0ZXMgPSBhZGRMZWFkaW5nWmVyb3MoYWJzT2Zmc2V0ICUgNjAsIDIpO1xuICByZXR1cm4gc2lnbiArIGhvdXJzICsgZGVsaW1pdGVyICsgbWludXRlcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0dGVyczsiLCJmdW5jdGlvbiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ1AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ1BQUFAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGltZUxvbmdGb3JtYXR0ZXIocGF0dGVybiwgZm9ybWF0TG9uZykge1xuICBzd2l0Y2ggKHBhdHRlcm4pIHtcbiAgICBjYXNlICdwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdsb25nJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdwcHBwJzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRhdGVUaW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHZhciBtYXRjaFJlc3VsdCA9IHBhdHRlcm4ubWF0Y2goLyhQKykocCspPy8pIHx8IFtdO1xuICB2YXIgZGF0ZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsxXTtcbiAgdmFyIHRpbWVQYXR0ZXJuID0gbWF0Y2hSZXN1bHRbMl07XG5cbiAgaWYgKCF0aW1lUGF0dGVybikge1xuICAgIHJldHVybiBkYXRlTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKTtcbiAgfVxuXG4gIHZhciBkYXRlVGltZUZvcm1hdDtcblxuICBzd2l0Y2ggKGRhdGVQYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ3Nob3J0J1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ1BQUCc6XG4gICAgICBkYXRlVGltZUZvcm1hdCA9IGZvcm1hdExvbmcuZGF0ZVRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnZnVsbCdcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICByZXR1cm4gZGF0ZVRpbWVGb3JtYXQucmVwbGFjZSgne3tkYXRlfX0nLCBkYXRlTG9uZ0Zvcm1hdHRlcihkYXRlUGF0dGVybiwgZm9ybWF0TG9uZykpLnJlcGxhY2UoJ3t7dGltZX19JywgdGltZUxvbmdGb3JtYXR0ZXIodGltZVBhdHRlcm4sIGZvcm1hdExvbmcpKTtcbn1cblxudmFyIGxvbmdGb3JtYXR0ZXJzID0ge1xuICBwOiB0aW1lTG9uZ0Zvcm1hdHRlcixcbiAgUDogZGF0ZVRpbWVMb25nRm9ybWF0dGVyXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9uZ0Zvcm1hdHRlcnM7IiwiLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKGRhdGUpIHtcbiAgdmFyIHV0Y0RhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyhkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCksIGRhdGUuZ2V0SG91cnMoKSwgZGF0ZS5nZXRNaW51dGVzKCksIGRhdGUuZ2V0U2Vjb25kcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKSk7XG4gIHV0Y0RhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpKTtcbiAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gdXRjRGF0ZS5nZXRUaW1lKCk7XG59IiwidmFyIHByb3RlY3RlZERheU9mWWVhclRva2VucyA9IFsnRCcsICdERCddO1xudmFyIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zID0gWydZWScsICdZWVlZJ107XG5leHBvcnQgZnVuY3Rpb24gaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4odG9rZW4pIHtcbiAgcmV0dXJuIHByb3RlY3RlZFdlZWtZZWFyVG9rZW5zLmluZGV4T2YodG9rZW4pICE9PSAtMTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd1Byb3RlY3RlZEVycm9yKHRva2VuLCBmb3JtYXQsIGlucHV0KSB7XG4gIGlmICh0b2tlbiA9PT0gJ1lZWVknKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYHl5eXlgIGluc3RlYWQgb2YgYFlZWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnRCcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgZGAgaW5zdGVhZCBvZiBgRGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ0REJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH1cbn0iLCJpbXBvcnQgaXNWYWxpZCBmcm9tIFwiLi4vaXNWYWxpZC9pbmRleC5qc1wiO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSBcIi4uL2xvY2FsZS9lbi1VUy9pbmRleC5qc1wiO1xuaW1wb3J0IHN1Yk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gXCIuLi9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgbG9uZ0Zvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tIFwiLi4vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanNcIjtcbmltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFNhLCBTdSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTYSwgU3UgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU2EsIFN1ICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhICAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWEgICAgIHwgYW0sIHBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYSAgICB8IGEubS4sIHAubS4gICAgICAgICAgICAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYWFhICAgfCBhLCBwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgfCBiLi5iYiAgIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiICAgICB8IGFtLCBwbSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmIgICAgfCBhLm0uLCBwLm0uLCBub29uLCBtaWRuaWdodCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiYiAgIHwgYSwgcCwgbiwgbWkgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgIHwgQi4uQkJCICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkIgICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCQiAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgIHwgaCAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAxMnRoICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBoaCAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgIHwgSCAgICAgICB8IDAsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhvICAgICAgfCAwdGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBISCAgICAgIHwgMDAsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgIHwgSyAgICAgICB8IDEsIDIsIC4uLiwgMTEsIDAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMXRoLCAwdGggICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLSyAgICAgIHwgMDEsIDAyLCAuLi4sIDExLCAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgIHwgayAgICAgICB8IDI0LCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtvICAgICAgfCAyNHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrayAgICAgIHwgMjQsIDAxLCAwMiwgLi4uLCAyMyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbSAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1vICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbSAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcyAgICAgICB8IDAsIDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNvICAgICAgfCAwdGgsIDFzdCwgLi4uLCA1OXRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzcyAgICAgIHwgMDAsIDAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgIHwgUyAgICAgICB8IDAsIDEsIC4uLiwgOSAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTICAgICAgfCAwMCwgMDEsIC4uLiwgOTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1MgICAgIHwgMDAwLCAwMDEsIC4uLiwgOTk5ICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTUyAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvIFopICAgICAgICB8IFggICAgICAgfCAtMDgsICswNTMwLCBaICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWCAgICAgIHwgLTA4MDAsICswNTMwLCBaICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYICAgICB8IC0wODowMCwgKzA1OjMwLCBaICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFggICAgfCAtMDgwMCwgKzA1MzAsIFosICsxMjM0NTYgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYWCAgIHwgLTA4OjAwLCArMDU6MzAsIFosICsxMjozNDo1NiAgICAgIHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy9vIFopICAgICAgIHwgeCAgICAgICB8IC0wOCwgKzA1MzAsICswMCAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4ICAgICAgfCAtMDgwMCwgKzA1MzAsICswMDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHggICAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eCAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAsICsxMjM0NTYgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHh4ICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwLCArMTI6MzQ6NTYgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICAgfCBPLi4uT09PIHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgT09PTyAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIgICAgIHxcbiAqIHwgVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdC4pICB8IHouLi56enogfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCA2ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB6enp6ICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiw2ICAgfFxuICogfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgIHwgdCAgICAgICB8IDUxMjk2OTUyMCAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHR0ICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgfCBUICAgICAgIHwgNTEyOTY5NTIwOTAwICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVFQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgICB8IFAgICAgICAgfCAwNC8yOS8xNDUzICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUCAgICAgIHwgQXByIDI5LCAxNDUzICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQICAgICB8IEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFAgICAgfCBGcmlkYXksIEFwcmlsIDI5dGgsIDE0NTMgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICAgfCBwICAgICAgIHwgMTI6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHAgICAgICB8IDEyOjAwOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcCAgICAgfCAxMjowMDowMCBBTSBHTVQrMiAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHBwICAgIHwgMTI6MDA6MDAgQU0gR01UKzAyOjAwICAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBDb21iaW5hdGlvbiBvZiBkYXRlIGFuZCB0aW1lICAgIHwgUHAgICAgICB8IDA0LzI5LzE0NTMsIDEyOjAwIEFNICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQcHAgICAgfCBBcHIgMjksIDE0NTMsIDEyOjAwOjAwIEFNICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBwcHAgIHwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUHBwcHB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyBhdCAuLi4gICB8IDIsNyAgIHxcbiAqIE5vdGVzOlxuICogMS4gXCJGb3JtYXR0aW5nXCIgdW5pdHMgKGUuZy4gZm9ybWF0dGluZyBxdWFydGVyKSBpbiB0aGUgZGVmYXVsdCBlbi1VUyBsb2NhbGVcbiAqICAgIGFyZSB0aGUgc2FtZSBhcyBcInN0YW5kLWFsb25lXCIgdW5pdHMsIGJ1dCBhcmUgZGlmZmVyZW50IGluIHNvbWUgbGFuZ3VhZ2VzLlxuICogICAgXCJGb3JtYXR0aW5nXCIgdW5pdHMgYXJlIGRlY2xpbmVkIGFjY29yZGluZyB0byB0aGUgcnVsZXMgb2YgdGhlIGxhbmd1YWdlXG4gKiAgICBpbiB0aGUgY29udGV4dCBvZiBhIGRhdGUuIFwiU3RhbmQtYWxvbmVcIiB1bml0cyBhcmUgYWx3YXlzIG5vbWluYXRpdmUgc2luZ3VsYXI6XG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBMTExMJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZCdgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdkbyBNTU1NJywge2xvY2FsZTogY3N9KSAvLz0+ICc2LiBsaXN0b3BhZHUnYFxuICpcbiAqIDIuIEFueSBzZXF1ZW5jZSBvZiB0aGUgaWRlbnRpY2FsIGxldHRlcnMgaXMgYSBwYXR0ZXJuLCB1bmxlc3MgaXQgaXMgZXNjYXBlZCBieVxuICogICAgdGhlIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIChzZWUgYmVsb3cpLlxuICogICAgSWYgdGhlIHNlcXVlbmNlIGlzIGxvbmdlciB0aGFuIGxpc3RlZCBpbiB0YWJsZSAoZS5nLiBgRUVFRUVFRUVFRUVgKVxuICogICAgdGhlIG91dHB1dCB3aWxsIGJlIHRoZSBzYW1lIGFzIGRlZmF1bHQgcGF0dGVybiBmb3IgdGhpcyB1bml0LCB1c3VhbGx5XG4gKiAgICB0aGUgbG9uZ2VzdCBvbmUgKGluIGNhc2Ugb2YgSVNPIHdlZWtkYXlzLCBgRUVFRWApLiBEZWZhdWx0IHBhdHRlcm5zIGZvciB1bml0c1xuICogICAgYXJlIG1hcmtlZCB3aXRoIFwiMlwiIGluIHRoZSBsYXN0IGNvbHVtbiBvZiB0aGUgdGFibGUuXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU0nKSAvLz0+ICdOb3YnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NJykgLy89PiAnTidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqIDMuIFNvbWUgcGF0dGVybnMgY291bGQgYmUgdW5saW1pdGVkIGxlbmd0aCAoc3VjaCBhcyBgeXl5eXl5eXlgKS5cbiAqICAgIFRoZSBvdXRwdXQgd2lsbCBiZSBwYWRkZWQgd2l0aCB6ZXJvcyB0byBtYXRjaCB0aGUgbGVuZ3RoIG9mIHRoZSBwYXR0ZXJuLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAneXl5eXl5eXknKSAvLz0+ICcwMDAwMjAxNydgXG4gKlxuICogNC4gYFFRUVFRYCBhbmQgYHFxcXFxYCBjb3VsZCBiZSBub3Qgc3RyaWN0bHkgbnVtZXJpY2FsIGluIHNvbWUgbG9jYWxlcy5cbiAqICAgIFRoZXNlIHRva2VucyByZXByZXNlbnQgdGhlIHNob3J0ZXN0IGZvcm0gb2YgdGhlIHF1YXJ0ZXIuXG4gKlxuICogNS4gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIHBhdHRlcm5zIGFyZSBCLkMuIHllYXJzOlxuICpcbiAqICAgIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICogICAgfCBBQyAxIHwgICAxIHwgICAxIHxcbiAqICAgIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gKiAgICB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICpcbiAqICAgIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAqICAgIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZDpcbiAqXG4gKiAgICB8IFllYXIgfCBgeXlgIHwgYHV1YCB8XG4gKiAgICB8LS0tLS0tfC0tLS0tLXwtLS0tLS18XG4gKiAgICB8IDEgICAgfCAgIDAxIHwgICAwMSB8XG4gKiAgICB8IDE0ICAgfCAgIDE0IHwgICAxNCB8XG4gKiAgICB8IDM3NiAgfCAgIDc2IHwgIDM3NiB8XG4gKiAgICB8IDE0NTMgfCAgIDUzIHwgMTQ1MyB8XG4gKlxuICogICAgVGhlIHNhbWUgZGlmZmVyZW5jZSBpcyB0cnVlIGZvciBsb2NhbCBhbmQgSVNPIHdlZWstbnVtYmVyaW5nIHllYXJzIChgWWAgYW5kIGBSYCksXG4gKiAgICBleGNlcHQgbG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhcnMgYXJlIGRlcGVuZGVudCBvbiBgb3B0aW9ucy53ZWVrU3RhcnRzT25gXG4gKiAgICBhbmQgYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCAoY29tcGFyZSBbZ2V0SVNPV2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0SVNPV2Vla1llYXJ9XG4gKiAgICBhbmQgW2dldFdlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldFdlZWtZZWFyfSkuXG4gKlxuICogNi4gU3BlY2lmaWMgbm9uLWxvY2F0aW9uIHRpbWV6b25lcyBhcmUgY3VycmVudGx5IHVuYXZhaWxhYmxlIGluIGBkYXRlLWZuc2AsXG4gKiAgICBzbyByaWdodCBub3cgdGhlc2UgdG9rZW5zIGZhbGwgYmFjayB0byBHTVQgdGltZXpvbmVzLlxuICpcbiAqIDcuIFRoZXNlIHBhdHRlcm5zIGFyZSBub3QgaW4gdGhlIFVuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNTpcbiAqICAgIC0gYGlgOiBJU08gZGF5IG9mIHdlZWtcbiAqICAgIC0gYElgOiBJU08gd2VlayBvZiB5ZWFyXG4gKiAgICAtIGBSYDogSVNPIHdlZWstbnVtYmVyaW5nIHllYXJcbiAqICAgIC0gYHRgOiBzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgVGA6IG1pbGxpc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYG9gOiBvcmRpbmFsIG51bWJlciBtb2RpZmllclxuICogICAgLSBgUGA6IGxvbmcgbG9jYWxpemVkIGRhdGVcbiAqICAgIC0gYHBgOiBsb25nIGxvY2FsaXplZCB0aW1lXG4gKlxuICogOC4gYFlZYCBhbmQgYFlZWVlgIHRva2VucyByZXByZXNlbnQgd2Vlay1udW1iZXJpbmcgeWVhcnMgYnV0IHRoZXkgYXJlIG9mdGVuIGNvbmZ1c2VkIHdpdGggeWVhcnMuXG4gKiAgICBZb3Ugc2hvdWxkIGVuYWJsZSBgb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogOS4gYERgIGFuZCBgRERgIHRva2VucyByZXByZXNlbnQgZGF5cyBvZiB0aGUgeWVhciBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIGRhdGVGbnMgZnJvbSBcImRhdGUtZm5zXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuaW1wb3J0ICogYXMgZG9tRWxlbWVudCBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2RvbS1lbGVtZW50cy5qc1wiO1xuY29uc3QgVE9EQVkgPSBcInRvZGF5XCI7XG5jb25zdCBUT01PUlJPVyA9IFwidG9tb3Jyb3dcIjtcbmNvbnN0IFNQRUNJRklDID0gXCJzcGVjaWZpY1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9kb0RhdGVzKGRhdGVCdG5EYXRhU2V0LCB0b2RvSWQsIHRvZG8sIGNhbGVuZGFyRGlzcGxheSkge1xuICBpZiAoZGF0ZUJ0bkRhdGFTZXQuZGF0ZSA9PT0gVE9EQVkgfHwgZGF0ZUJ0bkRhdGFTZXQuZGF0ZSA9PT0gVE9NT1JST1cgfHwgZGF0ZUJ0bkRhdGFTZXQuZGF0ZSA9PT0gU1BFQ0lGSUMpIHtcbiAgICBzZXRPYmplY3RJbnN0YW5jZURhdGVQcm9wZXJ0eS5jYWxsKHRvZG8sIGRhdGVCdG5EYXRhU2V0LmRhdGUsIHRvZG9JZCk7XG5cbiAgICAvKiBUaGF0IHdheSB3aGVuIHVzZXIgc2VsZWN0IGZyb20gZGF5IHBpY2tlciBkYXlSZWYgYW5kIHRvZG8gb2JqZWN0IHVwZGF0ZSBpbnN0YW50XG4gICAgICAgb3RoZXJ3aXNlIG5lZWQgZGJsY2xpY2sgKG5lZWQgdG8gcmVmYWN0b3IgdGhhdCBzb21laG93KSAqL1xuICAgIGRvbUVsZW1lbnQudG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRlUmVmZXJlbmNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtcmVmZXJlbmNlLWlkPVwiJHt0b2RvSWR9XCJdYCk7XG4gICAgICAvLyBpZiAoIWRhdGVSZWZlcmVuY2UpIHJldHVybjtcbiAgICAgIGNvbnN0IHsgZGF0ZSB9ID0gdG9kbztcbiAgICAgIGRhdGVSZWZlcmVuY2UudGV4dENvbnRlbnQgPSBkYXRlO1xuICAgICAgc2V0T2JqZWN0SW5zdGFuY2VEYXRlUHJvcGVydHkuY2FsbCh0b2RvLCBkYXRlQnRuRGF0YVNldC5kYXRlLCB0b2RvSWQpO1xuICAgICAgdXRpbGl0aWVzLnVwZGF0ZVRvZG9CeURhdGVUb3RhbHMoKTtcbiAgICB9KTtcblxuICAgIHV0aWxpdGllcy51cGRhdGVUb2RvQnlEYXRlVG90YWxzKCk7XG5cbiAgICBkYXRlQnV0dG9uQWN0aW9uRm9jdXModG9kb0lkLCBUT0RBWSwgVE9NT1JST1csIFNQRUNJRklDLCBkYXRlQnRuRGF0YVNldCk7XG5cbiAgICByZXNldERhdGVJbnB1dERpc3BsYXkoZGF0ZUJ0bkRhdGFTZXQsIGNhbGVuZGFyRGlzcGxheSk7XG4gIH1cbn1cblxuLyogU2V0IHRoZSBkYXRlIGluIG9iamVjdCBkZXBlbmRzIHRoZSBidXR0b24gKi9cbmZ1bmN0aW9uIHNldE9iamVjdEluc3RhbmNlRGF0ZVByb3BlcnR5KGRhdGEsIGlkKSB7XG4gIGNvbnN0IHNwZWNpZmljRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXNwZWNpZmljLWlkPVwiJHtpZH1cIl1gKTtcbiAgY29uc3QgZGF0ZVJlZmVyZW5jZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXJlZmVyZW5jZS1pZD1cIiR7aWR9XCJdYCk7XG5cbiAgLy8gaWYgKCFzcGVjaWZpY0RhdGUpIHJldHVybjtcbiAgaWYgKGRhdGEgPT09IFwidG9kYXlcIikge1xuICAgIHRoaXMuZGF0ZUlkID0gZGF0YTtcbiAgICB0aGlzLmRhdGUgPSBkYXRlRm5zLmZvcm1hdChuZXcgRGF0ZSgpLCBcInl5eXktTU0tZGRcIik7XG4gIH1cbiAgaWYgKGRhdGEgPT09IFwidG9tb3Jyb3dcIikge1xuICAgIHRoaXMuZGF0ZUlkID0gZGF0YTtcbiAgICB0aGlzLmRhdGUgPSBkYXRlRm5zLmZvcm1hdChkYXRlRm5zLnN0YXJ0T2ZUb21vcnJvdygpLCBcInl5eXktTU0tZGRcIik7XG4gIH1cbiAgaWYgKGRhdGEgPT09IFwic3BlY2lmaWNcIikge1xuICAgIHRoaXMuZGF0ZUlkID0gZGF0YTtcbiAgICB0aGlzLmRhdGUgPSBzcGVjaWZpY0RhdGUudmFsdWU7XG4gIH1cblxuICBkYXRlUmVmZXJlbmNlLnRleHRDb250ZW50ID0gYER1ZSBEYXRlICR7dGhpcy5kYXRlfWA7XG5cbiAgdXRpbGl0aWVzLnNhdmVQcm9qZWN0VG9Mb2NhbFN0b3JhZ2UocHJvamVjdEFycmF5KTtcbn1cblxuLyogQ2xhc3MgYWRkZWQgZm9yIGJ1dHRvbnMgdG8gc3RheSBzdGljayB0byBhY3Rpb24gbW9kZSBhZnRlciBkYXRlIHNlbGVjdCAqL1xuZnVuY3Rpb24gZGF0ZUJ1dHRvbkFjdGlvbkZvY3VzKHRvZG9JZCwgdG9kYXksIHRvbW9ycm93LCBzcGVjaWZpYywgZGF0ZUJ0bkRhdGFTZXQpIHtcbiAgY29uc3QgdG9kYXlCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBbZGF0YS10b2RheS1pZD1cIiR7dG9kb0lkfVwiXWApO1xuICBjb25zdCB0b21vcnJvd0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXRvbW9ycm93LWlkPVwiJHt0b2RvSWR9XCJdYCk7XG4gIGNvbnN0IHNwZWNpZmljRGF0ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXNwZWNpZmljLWlkID1cIiR7dG9kb0lkfVwiXWApO1xuICB0b2RheUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwiYWN0aXZlRGF0ZVwiLCBkYXRlQnRuRGF0YVNldC5kYXRlID09PSB0b2RheSk7XG5cbiAgdG9tb3Jyb3dCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZURhdGVcIiwgZGF0ZUJ0bkRhdGFTZXQuZGF0ZSA9PT0gdG9tb3Jyb3cpO1xuICBzcGVjaWZpY0RhdGVCdG4uY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2ZURhdGVcIiwgZGF0ZUJ0bkRhdGFTZXQuZGF0ZSA9PT0gc3BlY2lmaWMpO1xufVxuXG4vKiBXaGVuIHRoZSB1c2VyIHNlbGVjdCB0b2RheSBvciB0b21vcnJvdyB0aGUgZGF0ZSBhdCBkYXRlIGlucHV0IGRpc3BsYXkgcmVzZXQgKi9cbmZ1bmN0aW9uIHJlc2V0RGF0ZUlucHV0RGlzcGxheShkYXRlQnRuRGF0YVNldCwgY2FsZW5kYXJEaXNwbGF5KSB7XG4gIGlmIChkYXRlQnRuRGF0YVNldC5kYXRlID09PSBUT0RBWSB8fCBkYXRlQnRuRGF0YVNldC5kYXRlID09PSBUT01PUlJPVykge1xuICAgIGNhbGVuZGFyRGlzcGxheS52YWx1ZSA9IFwiXCI7XG4gIH1cbn1cbiIsIi8qKlxuICogQG5hbWUgc3RhcnRPZlRvbW9ycm93XG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IFJldHVybiB0aGUgc3RhcnQgb2YgdG9tb3Jyb3cuXG4gKiBAcHVyZSBmYWxzZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBzdGFydCBvZiB0b21vcnJvdy5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IHByZXNlbnQgaW4gdGhlIEZQIHN1Ym1vZHVsZSBhc1xuICogPiBpdCB1c2VzIGBuZXcgRGF0ZSgpYCBpbnRlcm5hbGx5IGhlbmNlIGltcHVyZSBhbmQgY2FuJ3QgYmUgc2FmZWx5IGN1cnJpZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHN0YXJ0IG9mIHRvbW9ycm93XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIElmIHRvZGF5IGlzIDYgT2N0b2JlciAyMDE0OlxuICogY29uc3QgcmVzdWx0ID0gc3RhcnRPZlRvbW9ycm93KClcbiAqIC8vPT4gVHVlIE9jdCA3IDIwMTQgMDA6MDA6MDBcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlRvbW9ycm93KCkge1xuICB2YXIgbm93ID0gbmV3IERhdGUoKTtcbiAgdmFyIHllYXIgPSBub3cuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIG1vbnRoID0gbm93LmdldE1vbnRoKCk7XG4gIHZhciBkYXkgPSBub3cuZ2V0RGF0ZSgpO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKDApO1xuICBkYXRlLnNldEZ1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkgKyAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0ICogYXMgdXRpbGl0aWVzIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvdXRpbGl0aWVzLWZ1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEFycmF5IH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9hcnJheXMuanNcIjtcbmltcG9ydCAqIGFzIGRvbUVsZW1lbnQgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9kb20tZWxlbWVudHMuanNcIjtcbmltcG9ydCAqIGFzIHJlbmRlck1vZHVsZSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3JlbmRlci1wcm9qZWN0LmpzXCI7XG5cbmNvbnN0IHNvcnRTd2l0Y2ggPSB1dGlsaXRpZXMuY29uZGl0aW9uU3dpdGNoZXIoKTtcblxuLyogU29ydGluZyBmdW5jdGlvbiAqL1xuZnVuY3Rpb24gY29tcGFyZShwcm9wZXJ0eSwgY29uZGl0aW9uKSB7XG4gIC8qIGlmIGl0IGlzIGZvciBwcmlvcml0eSBzb3J0aW5nICovXG4gIGlmIChwcm9wZXJ0eSA9PT0gXCJwcmlvcml0eVwiKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VUb051bShhW3Byb3BlcnR5XSkgPCBjaGFuZ2VUb051bShiW3Byb3BlcnR5XSlcbiAgICAgICAgICA/IC0xXG4gICAgICAgICAgOiBjaGFuZ2VUb051bShhW3Byb3BlcnR5XSkgPiBjaGFuZ2VUb051bShiW3Byb3BlcnR5XSlcbiAgICAgICAgICA/IDFcbiAgICAgICAgICA6IDA7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5nZVRvTnVtKGFbcHJvcGVydHldKSA+IGNoYW5nZVRvTnVtKGJbcHJvcGVydHldKVxuICAgICAgICAgID8gLTFcbiAgICAgICAgICA6IGNoYW5nZVRvTnVtKGFbcHJvcGVydHldKSA8IGNoYW5nZVRvTnVtKGJbcHJvcGVydHldKVxuICAgICAgICAgID8gMVxuICAgICAgICAgIDogMDtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIC8qIFNvcnQgZm9yIGxldHRlcnMgYW5kIG51bWJlcnMgKi9cbiAgaWYgKGNvbmRpdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKCFhW3Byb3BlcnR5XSB8fCAhYltwcm9wZXJ0eV0pIHJldHVybjtcbiAgICAgIHJldHVybiBhW3Byb3BlcnR5XS50b0xvd2VyQ2FzZSgpIDwgYltwcm9wZXJ0eV0udG9Mb3dlckNhc2UoKVxuICAgICAgICA/IC0xXG4gICAgICAgIDogYVtwcm9wZXJ0eV0udG9Mb3dlckNhc2UoKSA+IGJbcHJvcGVydHldLnRvTG93ZXJDYXNlKClcbiAgICAgICAgPyAxXG4gICAgICAgIDogMDtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKCFhW3Byb3BlcnR5XSB8fCAhYltwcm9wZXJ0eV0pIHJldHVybjtcbiAgICAgIHJldHVybiBhW3Byb3BlcnR5XS50b0xvd2VyQ2FzZSgpID4gYltwcm9wZXJ0eV0udG9Mb3dlckNhc2UoKVxuICAgICAgICA/IC0xXG4gICAgICAgIDogYVtwcm9wZXJ0eV0udG9Mb3dlckNhc2UoKSA8IGJbcHJvcGVydHldLnRvTG93ZXJDYXNlKClcbiAgICAgICAgPyAxXG4gICAgICAgIDogMDtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNvcnRUb2RvKGlucHV0LCBwcm9qZWN0LCBwcm9wZXJ0eSwgY29uZGl0aW9uKSB7XG4gIGNvbnN0IHsgW2lucHV0XTogYnlEYXRlT2JqZWN0UHJvcGVydHkgPSBwcm9qZWN0IH0gPSB1dGlsaXRpZXMuZ2V0VG9kb0J5RGF0ZSgpO1xuXG4gIHJldHVybiBieURhdGVPYmplY3RQcm9wZXJ0eS5zb3J0KGNvbXBhcmUocHJvcGVydHksIGNvbmRpdGlvbikpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTb3J0ZWRBcnJheShzb3J0ZWRBcnJheSkge1xuICBkb21FbGVtZW50LnRvZG9MaXN0LmlubmVySFRNTCA9IFwiXCI7XG4gIHNvcnRlZEFycmF5LmZvckVhY2goKHRvZG8pID0+IHtcbiAgICByZW5kZXJNb2R1bGUucmVuZGVyUHJvamVjdFRvZG9MaXN0SXRlbS5jYWxsKHRvZG8pO1xuICB9KTtcbn1cblxuLyogZnVuY3Rpb24gdGhhdCBjaGFuZ2UgdGhlIG5hbWVzIG9mIHNvcnRpbmcgb3B0aW9ucyB0byBtYXRjaCB0aGUgb2JqZWN0IHByb3BlcnR5IG5hbWVzICovXG5mdW5jdGlvbiBzb3J0T3B0aW9uVG9Qcm9wZXJ0eU5hbWUodGV4dCkge1xuICByZXR1cm4gdGV4dCA9PT0gXCJQcmlvcml0eVwiID8gXCJwcmlvcml0eVwiIDogdGV4dCA9PT0gXCJBbHBoYWJldGljYWxseVwiID8gXCJ0b2RvTmFtZVwiIDogdGV4dCA9PT0gXCJEdWUgRGF0ZVwiID8gXCJkYXRlXCIgOiBcIlwiO1xufVxuXG4vKiBDaGFuZ2UgcHJpb3JpdHkgb3B0aW9ucyB0byBudW1iZXJzIGl0IGdldCBzb3J0ZWQgYnkgbnVtYmVycyAgKi9cbmZ1bmN0aW9uIGNoYW5nZVRvTnVtKGlucHV0KSB7XG4gIGxldCBudW07XG4gIGlmIChpbnB1dCA9PT0gXCJsb3dcIikge1xuICAgIG51bSA9IDM7XG4gICAgcmV0dXJuIG51bTtcbiAgfVxuICBpZiAoaW5wdXQgPT09IFwibWVkaXVtXCIpIHtcbiAgICBudW0gPSAyO1xuICAgIHJldHVybiBudW07XG4gIH1cbiAgaWYgKGlucHV0ID09PSBcImhpZ2hcIikge1xuICAgIG51bSA9IDE7XG4gICAgcmV0dXJuIG51bTtcbiAgfVxuICBpZiAoIWlucHV0IHx8IGlucHV0ID09PSBcIm5vXCIpIHtcbiAgICBudW0gPSA0O1xuICAgIHJldHVybiBudW07XG4gIH1cbn1cblxuZnVuY3Rpb24gc29ydE9wdGlvbkNvbnRhaW5lclZpc2liaWxpdHkoYnV0dG9uKSB7XG4gIGRvbUVsZW1lbnQudG9kb1NvcnRPcHRpb25zQ29udGFpbmVyLmNsYXNzTGlzdC50b2dnbGUoXCJ2aXNpYmxlXCIsICFidXR0b24pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydFRvZG9IYW5kbGVyKGUpIHtcbiAgY29uc3Qgc29ydEJ5QnV0dG9uID0gZS50YXJnZXQuY2xvc2VzdChcImRpdiBkaXYgPiBwXCIpO1xuICBpZiAoIXNvcnRCeUJ1dHRvbikgcmV0dXJuO1xuICAvKiBjaGVjayBpZCBpZiBpdHMgTmFOIGF0IGxvYWQsIGlmIGl0IGlzIE5hTiBsb2FkIHRoZSBpZCBvZiB0aGUgZmlyc3QgcHJvamVjdCBpbiB0aGUgbGlzdFxuICBzbyBpdCB3b250IHJldHVybiBlcnJvciAqL1xuICBjb25zdCBwcm9qZWN0SWQgPSArZG9tRWxlbWVudC50b2RvSGVhZGVyQ29udGFpbmVyLmRhdGFzZXQucHJvamVjdElkIHx8IHByb2plY3RBcnJheVswXS5pZDtcbiAgY29uc3QgcHJvamVjdEluZGV4ID0gdXRpbGl0aWVzLmdldEluZGV4KHByb2plY3RBcnJheSwgcHJvamVjdElkKTtcbiAgY29uc3QgdG9kb0FycmF5ID0gcHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udG9kb0xpc3Q7XG4gIGNvbnN0IHRvZG9Qcm9wZXJ0eSA9IHNvcnRPcHRpb25Ub1Byb3BlcnR5TmFtZShzb3J0QnlCdXR0b24udGV4dENvbnRlbnQpO1xuICBjb25zdCBob21lRGF0YSA9IGRvbUVsZW1lbnQuc29ydEJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW1vZGVcIik7XG4gIGNvbnN0IHNvcnRlZEFycmF5ID0gc29ydFRvZG8oaG9tZURhdGEsIHRvZG9BcnJheSwgdG9kb1Byb3BlcnR5LCBzb3J0U3dpdGNoKCkpO1xuXG4gIHNvcnRPcHRpb25Db250YWluZXJWaXNpYmlsaXR5KHNvcnRCeUJ1dHRvbik7XG5cbiAgcmVuZGVyU29ydGVkQXJyYXkoc29ydGVkQXJyYXkpO1xufVxuIiwiaW1wb3J0IHtcbiAgcHJvamVjdElucHV0RG9tRWxlbWVudCBhcyBpbnB1dCxcbiAgcHJvamVjdExpc3REb21FbGVtZW50IGFzIHByb2plY3RMaXN0LFxuICBob21lTGlzdERvbWVFbGVtZW50IGFzIGhvbWUsXG4gIGFkZFRvZG9UYXNrSW5wdXRDb250YWluZXIgYXMgdG9kb0lucHV0LFxuICBzb3J0QnV0dG9uLFxuICB0b2RvTGlzdCxcbiAgdG9kb1NvcnRPcHRpb25zQ29udGFpbmVyLFxufSBmcm9tIFwiLi9kb20tZWxlbWVudHNcIjtcbmltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiLi91dGlsaXRpZXMtZnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBsb2NhbFN0b3JhZ2VIYW5kbGVyIH0gZnJvbSBcIi4vbWFpbkV2ZW50RnVuY3Rpb25zL3dpbmRvdy1Mb2FkXCI7XG5pbXBvcnQgeyBob21lU2VjdGlvbkhhbmRsZXIgfSBmcm9tIFwiLi9tYWluRXZlbnRGdW5jdGlvbnMvaG9tZS1TZWN0aW9uXCI7XG5pbXBvcnQgeyBuZXdQcm9qZWN0SGFuZGxlciB9IGZyb20gXCIuL21haW5FdmVudEZ1bmN0aW9ucy9wcm9qZWN0LUNyZWF0ZVwiO1xuaW1wb3J0IHsgcHJvamVjdFNlY3Rpb25TZWxlY3Rpb25IYW5kbGVyIH0gZnJvbSBcIi4vbWFpbkV2ZW50RnVuY3Rpb25zL3Byb2plY3QtSXRlbS1GdW5jdGlvbmFsaXR5XCI7XG5pbXBvcnQgeyByZW5hbWVQcm9qZWN0TGlzdEl0ZW0gfSBmcm9tIFwiLi9tYWluRXZlbnRGdW5jdGlvbnMvcHJvamVjdC1SZW5hbWVcIjtcbmltcG9ydCB7IGNyZWF0ZVRvZG9IYW5kbGVyIH0gZnJvbSBcIi4vbWFpbkV2ZW50RnVuY3Rpb25zL3RvZG8tY3JlYXRlXCI7XG5pbXBvcnQge1xuICB0b2RvU2VjdGlvbkhhbmRsZXIsXG4gIHRvZG9SZW5hbWVIYW5kbGVyLFxuICB0b2RvVGV4dEFyZWFIYW5kbGVyLFxufSBmcm9tIFwiLi9tYWluRXZlbnRGdW5jdGlvbnMvdG9kby1pdGVtLWZ1bmN0aW9uYWxpdHlcIjtcbmltcG9ydCB7IHNvcnRUb2RvSGFuZGxlciB9IGZyb20gXCIuL21haW5FdmVudEZ1bmN0aW9ucy9zb3J0LXRvZG9zXCI7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsb2NhbFN0b3JhZ2VIYW5kbGVyKTtcbmhvbWUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhvbWVTZWN0aW9uSGFuZGxlcik7XG5pbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgbmV3UHJvamVjdEhhbmRsZXIpO1xucHJvamVjdExpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHByb2plY3RTZWN0aW9uU2VsZWN0aW9uSGFuZGxlcik7XG5wcm9qZWN0TGlzdC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgcmVuYW1lUHJvamVjdExpc3RJdGVtKTtcbnRvZG9JbnB1dC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgY3JlYXRlVG9kb0hhbmRsZXIpO1xudG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRvZG9TZWN0aW9uSGFuZGxlcik7XG50b2RvTGlzdC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwgdG9kb1JlbmFtZUhhbmRsZXIpO1xudG9kb0xpc3QuYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIHRvZG9UZXh0QXJlYUhhbmRsZXIpO1xuc29ydEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdXRpbGl0aWVzLnRvZ2dsZVNvcnRpbmdPcHRpb25WaXNpYmlsaXR5KTtcbnRvZG9Tb3J0T3B0aW9uc0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc29ydFRvZG9IYW5kbGVyKTtcbiIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIHJlbmRlck1vZHVsZSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3JlbmRlci1wcm9qZWN0LmpzXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxTdG9yYWdlSGFuZGxlcigpIHtcbiAgLyogSWYgbG9jYWwgc3RvcmFnZSBpcyBlbXB0eSBkbyBub3RoaW5nICovXG4gIGlmICghbG9jYWxTdG9yYWdlLmxlbmd0aCkgcmV0dXJuO1xuICAvKiBHZXQgYWxsIHRoZSBkYXRhIGZyb20ganNvbiBmaWxlICovXG4gIHV0aWxpdGllcy5nZXRQcm9qZWN0KCkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIC8qIFB1c2ggZXZlcnl0aGluZyB0byBwcm9qZWN0QXJyYXkgYmVjYXVzZSBpdHMgZW1wdHkgKi9cbiAgICBwcm9qZWN0QXJyYXkucHVzaChpdGVtKTtcbiAgICAvKiBBbmQgcmVuZGVyIHRoZW0gb24gbG9hZCAqL1xuICAgIHJlbmRlck1vZHVsZS5yZW5kZXJQcm9qZWN0TGlzdEl0ZW0uY2FsbChpdGVtKTtcbiAgfSk7XG5cbiAgLyogVXBkYXRlIGFsbCB0aGUgdG9kbyBudW1iZXJzIGF0IGhvbWUgc2VjdGlvbiAqL1xuICB1dGlsaXRpZXMudXBkYXRlVG9kb0J5RGF0ZVRvdGFscygpO1xuICAvKiBDbG9zZSB0aGUgbm8gcHJvamVjdCBpbWcgICovXG4gIHV0aWxpdGllcy50b2dnbGVOb3RQcm9qZWN0U2NyZWVuKCk7XG59XG4iLCJpbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgKiBhcyByZW5kZXJNb2R1bGUgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9yZW5kZXItcHJvamVjdC5qc1wiO1xuaW1wb3J0ICogYXMgZG9tRWxlbWVudCBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2RvbS1lbGVtZW50cy5qc1wiO1xuXG5mdW5jdGlvbiBob21lU2VjdGlvbkZ1bmN0aW9uYWxpdHkoZGF0YVNldCwgdGV4dCwgcHJvamVjdFByb3BlcnR5LCBob21lU3BlY2lmaWNEaXYpIHtcbiAgLyogSGlnaGxpZ2h0IHRoZSBjb3JyZXNwb25kaW5nIHRhYiBhdCBob21lIHNlY3Rpb24gKi9cbiAgdXRpbGl0aWVzLmhpZ2hsaWdodChob21lU3BlY2lmaWNEaXYpO1xuICAvKiBTZXQgdGhlIGRhdGEgYXQgc29ydCBidXR0b24gdmFsdWUgdG8gdGhlIHNwZWNpZmljIGFycmF5IHRoYXQgd2lsbCBiZSB1c2VkIHNvIHRvIHNvcnQgaXQqL1xuICBkb21FbGVtZW50LnNvcnRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIsIGAke2RhdGFTZXR9YCk7XG4gIC8qIENoYW5nZSB0aGUgaGVhZGVyIHRpdGxlIGNvbnRlbnQgdG8gc2hvdyB0aGUgbmFtZSBvZiB0aGUgaG9tZSB0YWIgbmFtZSAqL1xuICBkb21FbGVtZW50LnRvZG9IZWFkZXJUaXRsZS50ZXh0Q29udGVudCA9IHRleHQ7XG4gIC8qIE1ha2UgdGhlIGhlYWRlciB2aXNpYmxlICovXG4gIGRvbUVsZW1lbnQudG9kb0hlYWRlckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcbiAgLyogRGlzYWJsZSB0aGUgbmV3IHRvZG8gaW5wdXQgKi9cbiAgZG9tRWxlbWVudC5hZGRUb2RvVGFza0lucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xuICAvKiBDbGVhciB0aGUgdG9kbyBsaXN0ICAqL1xuICBkb21FbGVtZW50LnRvZG9MaXN0LnJlcGxhY2VDaGlsZHJlbigpO1xuICAvKiBSZW5kZXIgaXRlbXMgaW4gdGhlIGFycmF5ICovXG4gIHByb2plY3RQcm9wZXJ0eS5mb3JFYWNoKChpdGVtKSA9PiByZW5kZXJNb2R1bGUucmVuZGVyUHJvamVjdFRvZG9MaXN0SXRlbS5jYWxsKGl0ZW0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhvbWVTZWN0aW9uSGFuZGxlcihlKSB7XG4gIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0LmNsb3Nlc3QoXCJkaXZcIik7XG4gIC8qIFNlbGVjdCB0aGUgdGV4dCBvZiB0aGUgdGFyZ2V0ICovXG4gIGNvbnN0IHRpdGxlVGV4dCA9IHRhcmdldC5jaGlsZHJlblsxXS50ZXh0Q29udGVudDtcbiAgLyogR2V0IHRoZSBkYXRhc2V0IGFmdGVyIGNsaWNraW5nIG9uIHRhcmdldCAqL1xuICBjb25zdCB0YXJnZXREYXRhID0gZS50YXJnZXQuY2xvc2VzdChcImRpdlwiKS5kYXRhc2V0LmFycmF5O1xuICAvKiBJZiBsb2NhbCBzdG9yYWdlIGFuZCB0YXJnZXQgZGF0YSBmYWxzeSByZXR1cm4gKi9cbiAgaWYgKCFsb2NhbFN0b3JhZ2UubGVuZ3RoIHx8ICF0YXJnZXREYXRhKSByZXR1cm47XG5cbiAgLyogRXh0cmFjdCB0aGUgZGF0YSBieSB0aGUgYXJyYXkgdGhhdCBjb250YWlucyBvbmx5IHRoZSB0b2RvIHNldCBieSBkYXRlICovXG4gIGNvbnN0IHsgW3RhcmdldERhdGFdOiBieURhdGVPYmplY3RQcm9wZXJ0eSB9ID0gdXRpbGl0aWVzLmdldFRvZG9CeURhdGUoKTtcbiAgLyogSWYgdGhhdCBhcnJheSBoYXMgZGF0YSB1c2VyIGNhbiBjbGljayBvbiBpdCAqL1xuICBpZiAoYnlEYXRlT2JqZWN0UHJvcGVydHkubGVuZ3RoKSB7XG4gICAgLyogUmVuZGVyIHRoZSB0b2RvICovXG4gICAgaG9tZVNlY3Rpb25GdW5jdGlvbmFsaXR5KHRhcmdldERhdGEsIHRpdGxlVGV4dCwgYnlEYXRlT2JqZWN0UHJvcGVydHksIHRhcmdldCk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCAqIGFzIHJlbmRlck1vZHVsZSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3JlbmRlci1wcm9qZWN0LmpzXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuLi9wcm9qZWN0LWNsYXNzXCI7XG5pbXBvcnQgKiBhcyBkb21FbGVtZW50IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvZG9tLWVsZW1lbnRzLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdQcm9qZWN0SGFuZGxlcihlKSB7XG4gIGNvbnN0IHByb2plY3ROYW1lID0gZS50YXJnZXQudmFsdWU7XG4gIGNvbnN0IHByb2plY3RJZCA9IHV0aWxpdGllcy5yYW5kb21OdW1iZXIoKTtcbiAgY29uc3QgcHJvamVjdCA9IG5ldyBQcm9qZWN0KHByb2plY3ROYW1lLCBwcm9qZWN0SWQpO1xuXG4gIGlmIChlLmtleSA9PT0gXCJFbnRlclwiICYmIGRvbUVsZW1lbnQucHJvamVjdElucHV0RG9tRWxlbWVudC52YWx1ZSAhPT0gXCJcIikge1xuICAgIHByb2plY3RBcnJheS5wdXNoKHByb2plY3QpO1xuXG4gICAgdXRpbGl0aWVzLnNhdmVQcm9qZWN0VG9Mb2NhbFN0b3JhZ2UocHJvamVjdEFycmF5KTtcblxuICAgIHV0aWxpdGllcy5jbGVhcklucHV0VmFsdWUoKTtcblxuICAgIHJlbmRlck1vZHVsZS5yZW5kZXJQcm9qZWN0TGlzdEl0ZW0uY2FsbChwcm9qZWN0KTtcbiAgfVxuICB1dGlsaXRpZXMudG9nZ2xlTm90UHJvamVjdFNjcmVlbigpO1xufVxuIiwiaW1wb3J0IHsgc29ydEJ1dHRvbiwgdG9kb0xpc3QgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2RvbS1lbGVtZW50cy5qc1wiO1xuaW1wb3J0ICogYXMgcmVuZGVyTW9kdWxlIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvcmVuZGVyLXByb2plY3QuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlclRvZG9XaGlsZVN3aXRjaGluZ1Byb2plY3RzKHByb2plY3QpIHtcbiAgLypBZGQgYXR0cmlidXRlIHRvIHNvcnQgYnV0dG9uIHdoaWxlIGNsaWNrIG9uIHByb2plY3QgaXRlbXMgc28gdGhlIHNvcnRpbmcgd29yayBmb3IgdGhlbSovXG4gIHNvcnRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGF0YS1tb2RlXCIsIGZhbHNlKTtcblxuICB0b2RvTGlzdC5yZXBsYWNlQ2hpbGRyZW4oKTtcblxuICBwcm9qZWN0LnRvZG9MaXN0LmZvckVhY2goKHRvZG8pID0+IHtcbiAgICByZW5kZXJNb2R1bGUucmVuZGVyUHJvamVjdFRvZG9MaXN0SXRlbS5jYWxsKHRvZG8pO1xuICB9KTtcbn1cbiIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCB7IHByb2plY3RBcnJheSB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvYXJyYXlzLmpzXCI7XG5pbXBvcnQgKiBhcyBkb21FbGVtZW50IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvZG9tLWVsZW1lbnRzLmpzXCI7XG5cbmZ1bmN0aW9uIGhpZGVEb21lRWxlbWVudHMoKSB7XG4gIGRvbUVsZW1lbnQudG9kb0hlYWRlckNvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKFwidmlzaWJsZVwiKTtcbiAgZG9tRWxlbWVudC5hZGRUb2RvVGFza0lucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xufVxuXG5mdW5jdGlvbiBjbGVhckhlYWRlclRpdGxlVGV4dCgpIHtcbiAgZG9tRWxlbWVudC50b2RvSGVhZGVyVGl0bGUudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBkZWxldGVGcm9tQXJyYXlBbmREb20ocHJvamVjdFNlbGVjdGlvbiwgbGlzdCwgaW5kZXgpIHtcbiAgdXRpbGl0aWVzLmRlbGV0ZUZyb21BcnJheShwcm9qZWN0QXJyYXksIGluZGV4KTtcbiAgbGlzdC5yZW1vdmVDaGlsZChwcm9qZWN0U2VsZWN0aW9uKTtcbiAgZG9tRWxlbWVudC50b2RvTGlzdC5yZXBsYWNlQ2hpbGRyZW4oKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZVByb2plY3RMaXN0SXRlbShwcm9qZWN0U2VsZWN0aW9uLCBsaXN0LCBpbmRleCkge1xuICBoaWRlRG9tZUVsZW1lbnRzKCk7XG5cbiAgY2xlYXJIZWFkZXJUaXRsZVRleHQoKTtcblxuICBkZWxldGVGcm9tQXJyYXlBbmREb20ocHJvamVjdFNlbGVjdGlvbiwgbGlzdCwgaW5kZXgpO1xuXG4gIHV0aWxpdGllcy5zYXZlUHJvamVjdFRvTG9jYWxTdG9yYWdlKHByb2plY3RBcnJheSk7XG5cbiAgdXRpbGl0aWVzLnVwZGF0ZVRvZG9CeURhdGVUb3RhbHMoKTtcblxuICBpZiAoIXByb2plY3RBcnJheS5sZW5ndGgpIHtcbiAgICBkb21FbGVtZW50LnRvZG9MaXN0LnJlcGxhY2VDaGlsZHJlbigpO1xuICAgIHV0aWxpdGllcy5jbGVhckxvY2FsU3RvcmFnZSgpO1xuICAgIHV0aWxpdGllcy50b2dnbGVOb3RQcm9qZWN0U2NyZWVuKCk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCB7IHByb2plY3RBcnJheSB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyB0b2RvSGVhZGVyVGl0bGUgYXMgdG9kb1RpdGxlIH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9kb20tZWxlbWVudHMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmFtZVByb2plY3RMaXN0SXRlbShlKSB7XG4gIGNvbnN0IG5ld1RleHQgPSBlLnRhcmdldC52YWx1ZTtcbiAgY29uc3QgcHJvamVjdElkID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0LnByb2plY3RJZDtcblxuICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIiAmJiBuZXdUZXh0KSB7XG4gICAgcHJvamVjdEFycmF5XG4gICAgICAuZmlsdGVyKChwcm9qZWN0KSA9PiBwcm9qZWN0LmlkID09PSBOdW1iZXIocHJvamVjdElkKSlcbiAgICAgIC5tYXAoKHByb2plY3QpID0+IHtcbiAgICAgICAgcHJvamVjdC5uYW1lID0gbmV3VGV4dDtcbiAgICAgICAgdG9kb1RpdGxlLnRleHRDb250ZW50ID0gcHJvamVjdC5uYW1lO1xuICAgICAgICB1dGlsaXRpZXMuc2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZShwcm9qZWN0QXJyYXkpO1xuICAgICAgICByZXR1cm4gcHJvamVjdDtcbiAgICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuaW1wb3J0IHsgVG9kbyB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvcHJvamVjdC1jbGFzcy5qc1wiO1xuaW1wb3J0ICogYXMgcmVuZGVyTW9kdWxlIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvcmVuZGVyLXByb2plY3QuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRvZG9IYW5kbGVyKGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdChcImlucHV0XCIpO1xuICBjb25zdCBpbnB1dFRleHQgPSB0YXJnZXQudmFsdWU7XG4gIGNvbnN0IHByb2plY3RJZCA9IGUudGFyZ2V0LmRhdGFzZXQucHJvamVjdFRvZG9JZDtcbiAgY29uc3Qgb2JqZWN0SW5kZXggPSB1dGlsaXRpZXMuZ2V0SW5kZXgocHJvamVjdEFycmF5LCBwcm9qZWN0SWQpO1xuXG4gIGlmIChlLmtleSA9PT0gXCJFbnRlclwiICYmIHRhcmdldC52YWx1ZSAhPT0gXCJcIikge1xuICAgIC8qIENyZWF0ZSBuZXcgdG9kbyAqL1xuICAgIGNvbnN0IHRvZG9PYmplY3QgPSBuZXcgVG9kbyhpbnB1dFRleHQsIHByb2plY3RJZCwgdXRpbGl0aWVzLnJhbmRvbU51bWJlcigpKTtcblxuICAgIC8qIFB1c2ggdGhlIHRvZG8gdG8gcHJvamVjdCBhcnJheSB0b2RvIGxpc3QgKi9cbiAgICBwcm9qZWN0QXJyYXlbb2JqZWN0SW5kZXhdLnRvZG9MaXN0LnB1c2godG9kb09iamVjdCk7XG5cbiAgICAvKiBTYXZlIHRvZG8gaW4gbG9jYWwgc3RvcmFnZSAqL1xuICAgIHV0aWxpdGllcy5zYXZlUHJvamVjdFRvTG9jYWxTdG9yYWdlKHByb2plY3RBcnJheSk7XG5cbiAgICAvKiBSZW5kZXIgdGhlIHRvZG8gKi9cbiAgICByZW5kZXJNb2R1bGUucmVuZGVyUHJvamVjdFRvZG9MaXN0SXRlbS5jYWxsKHRvZG9PYmplY3QpO1xuXG4gICAgLyogQ2xlYXIgdGhlIHRvZG8gaW5wdXQgKi9cbiAgICB0YXJnZXQudmFsdWUgPSBcIlwiO1xuXG4gICAgLyogVXBkYXRlIHRoZSBob21lIHNlY3Rpb24gbnVtYmVycyAqL1xuICAgIHV0aWxpdGllcy51cGRhdGVUb2RvQnlEYXRlVG90YWxzKCk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHV0aWxpdGllcyBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL3V0aWxpdGllcy1mdW5jdGlvbnMuanNcIjtcbmltcG9ydCB7IHByb2plY3RBcnJheSB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvYXJyYXlzLmpzXCI7XG5pbXBvcnQgeyBUb2RvIH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9wcm9qZWN0LWNsYXNzLmpzXCI7XG5pbXBvcnQgKiBhcyByZW5kZXJNb2R1bGUgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9yZW5kZXItcHJvamVjdC5qc1wiO1xuaW1wb3J0IHsgZGVsZXRlVG9kbyB9IGZyb20gXCIuL3RvZG8tZGVsZXRlXCI7XG5pbXBvcnQgeyB0b2RvV2luZG93VG9nZ2xlU2l6ZSB9IGZyb20gXCIuL3RvZG8td2luZG93LXRvZ2dsZVwiO1xuaW1wb3J0IHsgdG9kb0NoZWNrQm94RnVuY3Rpb25hbGl0eSB9IGZyb20gXCIuL3RvZG8tY2hlY2tib3hcIjtcbmltcG9ydCB7IGdldFRvZG9EYXRlcyB9IGZyb20gXCIuL3RvZG8tRGF0ZXNcIjtcbmltcG9ydCB7IGdldFRvZG9Qcmlvcml0eSB9IGZyb20gXCIuL3RvZG8tcHJpb3JpdHlcIjtcbmltcG9ydCB7IGdldFRvZG9UZXh0QXJlYSB9IGZyb20gXCIuL3RvZG8tdGV4dEFyZWFcIjtcbmltcG9ydCB7IHRvZG9SZW5hbWUgfSBmcm9tIFwiLi90b2RvLXJlbmFtZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9kb1NlY3Rpb25IYW5kbGVyKGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdChcImxpXCIpO1xuICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICBjb25zdCB0b2RvSWQgPSB0YXJnZXQuZGF0YXNldC50b2RvSWQ7XG4gIGNvbnN0IHByb2plY3RJZCA9IHRhcmdldC5kYXRhc2V0LnByb2plY3RpZDtcbiAgY29uc3QgcHJvamVjdEluZGV4ID0gdXRpbGl0aWVzLmdldEluZGV4KHByb2plY3RBcnJheSwgcHJvamVjdElkKTtcbiAgY29uc3QgdG9kb0FycmF5ID0gcHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udG9kb0xpc3Q7XG5cbiAgY29uc3QgdG9kb0luZGV4ID0gdXRpbGl0aWVzLmdldFRvZG9MaXN0SW5kZXgodG9kb0FycmF5LCB0b2RvSWQpO1xuICBjb25zdCBwcm9qZWN0ID0gcHJvamVjdEFycmF5W3Byb2plY3RJbmRleF07XG4gIGNvbnN0IGRhdGVCdG5EYXRhU2V0ID0gZS50YXJnZXQuZGF0YXNldDtcbiAgY29uc3QgdGFyZ2V0SWQgPSBlLnRhcmdldC5pZDtcbiAgY29uc3QgaXNDaGVja2VkID0gZS50YXJnZXQuY2hlY2tlZDtcbiAgY29uc3QgdG9kb1RpdGxlID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5sYXN0RWxlbWVudENoaWxkO1xuICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXNlbGVjdC1pZCA9XCIke3RvZG9JZH1cIl1gKTtcbiAgY29uc3QgdG9kbyA9IHRvZG9BcnJheVt0b2RvSW5kZXhdO1xuICBjb25zdCBjYWxlbmRhckRpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1haW5fX3Rhc2stbGlzdF9fbGlzdC1pdGVtX19kYXRlXCIpO1xuICAvLyBpZiAoIXByb2plY3RBcnJheS5pbmNsdWRlcyhwcm9qZWN0KSkgcmV0dXJuO1xuXG4gIHRvZG9XaW5kb3dUb2dnbGVTaXplKHRhcmdldElkLCB0YXJnZXQsIHRvZG9JZCk7XG5cbiAgZGVsZXRlVG9kbyh0YXJnZXRJZCwgcHJvamVjdEluZGV4LCB0b2RvSW5kZXgsIHRhcmdldCk7XG5cbiAgdG9kb0NoZWNrQm94RnVuY3Rpb25hbGl0eShlLCB0b2RvVGl0bGUsIGlzQ2hlY2tlZCwgdG9kb0FycmF5LCB0b2RvSW5kZXgpO1xuXG4gIGdldFRvZG9EYXRlcyhkYXRlQnRuRGF0YVNldCwgdG9kb0lkLCB0b2RvLCBjYWxlbmRhckRpc3BsYXkpO1xuXG4gIGdldFRvZG9Qcmlvcml0eSh0b2RvLCB0YXJnZXQsIHByaW9yaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZG9SZW5hbWVIYW5kbGVyKGUpIHtcbiAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQuY2xvc2VzdChcImlucHV0XCIpO1xuICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuXG4gIGNvbnN0IG5ld1RvZG9OYW1lID0gZS50YXJnZXQudmFsdWU7XG4gIGNvbnN0IHByb2plY3RJZCA9IE51bWJlcih0YXJnZXQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQuZGF0YXNldC5wcm9qZWN0aWQpO1xuICBjb25zdCB0b2RvSWQgPSBOdW1iZXIodGFyZ2V0LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmRhdGFzZXQudG9kb0lkKTtcbiAgY29uc3QgcHJvamVjdEluZGV4ID0gdXRpbGl0aWVzLmdldEluZGV4KHByb2plY3RBcnJheSwgcHJvamVjdElkKTtcbiAgY29uc3QgdG9kb0FycmF5ID0gcHJvamVjdEFycmF5W3Byb2plY3RJbmRleF0udG9kb0xpc3Q7XG5cbiAgdG9kb1JlbmFtZShlLCB0b2RvQXJyYXksIHRhcmdldCwgbmV3VG9kb05hbWUsIHRvZG9JZCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2RvVGV4dEFyZWFIYW5kbGVyKGUpIHtcbiAgY29uc3QgdGFyZ2V0VGV4dEFyZWEgPSBlLnRhcmdldC5jbG9zZXN0KFwidGV4dGFyZWFcIik7XG4gIGlmICghdGFyZ2V0VGV4dEFyZWEpIHJldHVybjtcbiAgY29uc3QgdG9kb0lkID0gdGFyZ2V0VGV4dEFyZWEuZGF0YXNldC50ZXh0YXJlYUlkO1xuICBjb25zdCBwcm9qZWN0SWQgPSBOdW1iZXIodGFyZ2V0VGV4dEFyZWEucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LmRhdGFzZXQucHJvamVjdGlkKTtcbiAgY29uc3QgcHJvamVjdEluZGV4ID0gcHJvamVjdEFycmF5LmZpbmRJbmRleCgob2JqKSA9PiBvYmouaWQgPT09IE51bWJlcihwcm9qZWN0SWQpKTtcblxuICBjb25zdCB0b2RvSW5kZXggPSBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS50b2RvTGlzdC5maW5kSW5kZXgoKHRvZG8pID0+IHRvZG8udG9kb0lkID09PSBOdW1iZXIodG9kb0lkKSk7XG4gIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XTtcbiAgaWYgKCFwcm9qZWN0QXJyYXkuaW5jbHVkZXMocHJvamVjdCkpIHJldHVybjtcblxuICBjb25zdCB0b2RvQXJyYXkgPSBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS50b2RvTGlzdDtcblxuICBnZXRUb2RvVGV4dEFyZWEoZSwgdG9kb0FycmF5LCB0YXJnZXRUZXh0QXJlYSwgdG9kb0luZGV4KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB0b2RvV2luZG93VG9nZ2xlU2l6ZSh0YXJnZXRJZCwgdGFyZ2V0LCB0b2RvSWQpIHtcbiAgY29uc3QgbGlzdERyb3BBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWNoZXZyb24taWQ9XCIke3RvZG9JZH1cIl1gKTtcbiAgaWYgKHRhcmdldElkID09PSBcImxpc3QtYXJyb3dcIikge1xuICAgIGxpc3REcm9wQXJyb3cuY2xhc3NMaXN0LnRvZ2dsZShcInJvdGF0ZVwiKTtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcInZpc2libGVcIik7XG4gICAgLyogVG9nZ2xlIHRoZSBoaWRkZW4gY2xhc3MgZnJvbSBhbGwgZG9tIGVsZW1lbnQgaW5zaWRlIHRoZSB0b2RvICovXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0YXJnZXQuY2hpbGRFbGVtZW50Q291bnQ7IGkrKykge1xuICAgICAgdGFyZ2V0LmNoaWxkcmVuW2ldLmNsYXNzTGlzdC50b2dnbGUoXCJoaWRkZW5cIik7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuaW1wb3J0ICogYXMgZG9tRWxlbWVudCBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2RvbS1lbGVtZW50cy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlVG9kbyh0YXJnZXRJZCwgcHJvamVjdEluZGV4LCB0b2RvSW5kZXgsIHRhcmdldCkge1xuICBpZiAodGFyZ2V0SWQgPT09IFwiZGVsZXRlXCIpIHtcbiAgICAvKiBEZWxldGUgdG9kbyBmcm9tIHByb2plY3QgcHJvcGVydHkgYXJyYXkgKi9cbiAgICBwcm9qZWN0QXJyYXlbcHJvamVjdEluZGV4XS50b2RvTGlzdC5zcGxpY2UodG9kb0luZGV4LCAxKTtcbiAgICAvKiBkZWxldGUgaXQgZnJvbSBkb20gKi9cbiAgICBkb21FbGVtZW50LnRvZG9MaXN0LnJlbW92ZUNoaWxkKHRhcmdldCk7XG4gICAgLyogVXBkYXRlIGpzb24gKi9cbiAgICB1dGlsaXRpZXMuc2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZShwcm9qZWN0QXJyYXkpO1xuICAgIC8qIFVwZGF0ZSBob21lIHNlY3Rpb24gbnVtYmVycyAqL1xuICAgIHV0aWxpdGllcy51cGRhdGVUb2RvQnlEYXRlVG90YWxzKCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IHByb2plY3RBcnJheSB9IGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvYXJyYXlzLmpzXCI7XG5pbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2RvQ2hlY2tCb3hGdW5jdGlvbmFsaXR5KGUsIHRvZG9UaXRsZSwgaXNDaGVja2VkLCB0b2RvQXJyYXksIHRvZG9JbmRleCkge1xuICBpZiAoZS50YXJnZXQudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgdG9kb1RpdGxlLmNsYXNzTGlzdC50b2dnbGUoXCJjaGVja2VkXCIsIGlzQ2hlY2tlZCk7XG4gIH1cblxuICBpZiAoaXNDaGVja2VkICYmIGUudGFyZ2V0LnR5cGUgPT09IFwiY2hlY2tib3hcIikge1xuICAgIHRvZG9BcnJheVt0b2RvSW5kZXhdLmNoZWNrYm94ID0gXCJjaGVja2VkXCI7XG4gICAgdG9kb1RpdGxlLmRpc2FibGVkID0gaXNDaGVja2VkO1xuICAgIHV0aWxpdGllcy5zYXZlUHJvamVjdFRvTG9jYWxTdG9yYWdlKHByb2plY3RBcnJheSk7XG4gIH1cbiAgaWYgKCFpc0NoZWNrZWQgJiYgZS50YXJnZXQudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgdG9kb0FycmF5W3RvZG9JbmRleF0uY2hlY2tib3ggPSBcIlwiO1xuICAgIHRvZG9UaXRsZS5kaXNhYmxlZCA9IGlzQ2hlY2tlZDtcbiAgICB1dGlsaXRpZXMuc2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZShwcm9qZWN0QXJyYXkpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyB1dGlsaXRpZXMgZnJvbSBcIi9zcmMvanMtbW9kdWxlcy91dGlsaXRpZXMtZnVuY3Rpb25zLmpzXCI7XG5pbXBvcnQgeyBwcm9qZWN0QXJyYXkgfSBmcm9tIFwiL3NyYy9qcy1tb2R1bGVzL2FycmF5cy5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9kb1ByaW9yaXR5KHRvZG8sIHRhcmdldCwgcHJpb3JpdHkpIHtcbiAgLyogSWYgdGhlcmUgaXMgbm8gY2hlY2sgZm9yIHRoYXQgdmFsdWUgaXQgcmVzZXQgdGhlIHRvZG8gcHJpb3JpdHkgKi9cbiAgaWYgKHByaW9yaXR5LnZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuO1xuXG4gIGlmICh0b2RvLmhhc093blByb3BlcnR5KFwicHJpb3JpdHlcIikpIHtcbiAgICB0b2RvLnByaW9yaXR5ID0gcHJpb3JpdHkudmFsdWU7XG4gICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUoXCJsb3dcIiwgcHJpb3JpdHkudmFsdWUgPT09IFwibG93XCIpO1xuICAgIHRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKFwibWVkaXVtXCIsIHByaW9yaXR5LnZhbHVlID09PSBcIm1lZGl1bVwiKTtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LnRvZ2dsZShcImhpZ2hcIiwgcHJpb3JpdHkudmFsdWUgPT09IFwiaGlnaFwiKTtcbiAgICB1dGlsaXRpZXMuc2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZShwcm9qZWN0QXJyYXkpO1xuICB9XG5cbiAgLy8gdG9kby5wcmlvcml0eSA9IHByaW9yaXR5LnZhbHVlO1xufVxuIiwiaW1wb3J0ICogYXMgdXRpbGl0aWVzIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvdXRpbGl0aWVzLWZ1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEFycmF5IH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9hcnJheXMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvZG9SZW5hbWUoZSwgdG9kb0FycmF5LCB0YXJnZXRJbnB1dCwgbmV3VG9kb05hbWUsIHRvZG9JZCkge1xuICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xuICAgIC8qIGZvciB0aGUgc3BlY2lmaWMgcHJvamVjdCB1c2luZyB0aGUgcHJvamVjdEluZGV4IGZpbHRlciBpdHMgdG9kb0xpc3RcbiAgICBmb3IgdGhlIHRvZG8gaXRlbSBhbmQgdGhlbiB3aXRoIG1hcCByZW5hbWUgaXQgKi9cbiAgICB0b2RvQXJyYXlcbiAgICAgIC5maWx0ZXIoKHRvZG9JdGVtKSA9PiB0b2RvSXRlbS50b2RvSWQgPT09IHRvZG9JZClcbiAgICAgIC5tYXAoKHRvZG8pID0+IHtcbiAgICAgICAgLyogdG9kbyBuYW1lIGVxdWFscyB0byBuZXcgdG9kbyBuYW1lICovXG4gICAgICAgIHRvZG8udG9kb05hbWUgPSBuZXdUb2RvTmFtZTtcbiAgICAgICAgLyogRG9tIHRvZG8gbmFtZSBjaGFuZ2UgdG8gbmV3IHRvZG8gb2JqZWN0IG5hbWUgKi9cbiAgICAgICAgdGFyZ2V0SW5wdXQudmFsdWUgPSB0b2RvLnRvZG9OYW1lO1xuXG4gICAgICAgIHV0aWxpdGllcy5zYXZlUHJvamVjdFRvTG9jYWxTdG9yYWdlKHByb2plY3RBcnJheSk7XG5cbiAgICAgICAgcmV0dXJuIHRvZG87XG4gICAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgdXRpbGl0aWVzIGZyb20gXCIvc3JjL2pzLW1vZHVsZXMvdXRpbGl0aWVzLWZ1bmN0aW9ucy5qc1wiO1xuaW1wb3J0IHsgcHJvamVjdEFycmF5IH0gZnJvbSBcIi9zcmMvanMtbW9kdWxlcy9hcnJheXMuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvZG9UZXh0QXJlYShlLCB0b2RvQXJyYXksIHRhcmdldFRleHRBcmVhLCB0b2RvSW5kZXgpIHtcbiAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICB0b2RvQXJyYXlbdG9kb0luZGV4XS5ub3RlcyA9IHRhcmdldFRleHRBcmVhLnZhbHVlO1xuICAgIHV0aWxpdGllcy5zYXZlUHJvamVjdFRvTG9jYWxTdG9yYWdlKHByb2plY3RBcnJheSk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInByb2plY3RJbnB1dERvbUVsZW1lbnQiLCJwcm9qZWN0TGlzdERvbUVsZW1lbnQiLCJob21lTGlzdERvbWVFbGVtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm5vdFByb2plY3RZZXRDb250YWluZXIiLCJnZXRFbGVtZW50QnlJZCIsInRvZG9IZWFkZXJUaXRsZSIsInRvZG9Tb3J0T3B0aW9uc0NvbnRhaW5lciIsInRvZG9MaXN0Iiwic29ydEJ1dHRvbiIsInJlcXVpcmVkQXJncyIsInJlcXVpcmVkIiwiYXJncyIsIlR5cGVFcnJvciIsInRvRGF0ZSIsImFyZ3VtZW50IiwiYXJndW1lbnRzIiwiYXJnU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsIkRhdGUiLCJnZXRUaW1lIiwiY29uc29sZSIsIndhcm4iLCJzdGFjayIsIk5hTiIsInN0YXJ0T2ZEYXkiLCJkaXJ0eURhdGUiLCJkYXRlIiwic2V0SG91cnMiLCJpc1NhbWVEYXkiLCJkaXJ0eURhdGVMZWZ0IiwiZGlydHlEYXRlUmlnaHQiLCJkYXRlTGVmdFN0YXJ0T2ZEYXkiLCJkYXRlUmlnaHRTdGFydE9mRGF5IiwidG9JbnRlZ2VyIiwiZGlydHlOdW1iZXIiLCJudW1iZXIiLCJOdW1iZXIiLCJpc05hTiIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJhZGREYXlzIiwiZGlydHlBbW91bnQiLCJhbW91bnQiLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInJlbmRlclByb2plY3RMaXN0SXRlbSIsImNyZWF0ZVByb2plY3RFbGVtZW50IiwiY2xhc3NOYW1lIiwicHJvamVjdExpc3RMYWJlbElucHV0TWFya1VwIiwibmFtZSIsImluc2VydEFkamFjZW50SFRNTCIsImFwcGVuZCIsInJlbmRlclByb2plY3RUb2RvTGlzdEl0ZW0iLCJsaXN0SXRlbU1hcmt1cCIsInRvZG9JZCIsInByb2plY3RJZCIsImNoZWNrYm94IiwidG9kb05hbWUiLCJub3RlcyIsInNlbGVjdGVkTGkiLCJoaWdobGlnaHQiLCJsaSIsImNsYXNzTGlzdCIsImFkZCIsInRvZ2dsZU5vdFByb2plY3RTY3JlZW4iLCJsb2NhbFN0b3JhZ2UiLCJyYW5kb21OdW1iZXIiLCJyYW5kb20iLCJnZXRQcm9qZWN0IiwicGFyc2UiLCJnZXRJdGVtIiwic2F2ZVByb2plY3RUb0xvY2FsU3RvcmFnZSIsInByb2plY3RzIiwic2V0SXRlbSIsInNlbGVjdFRhZ1RleHQiLCJwcmlvcml0eSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJjbGFzc1NldEZvclNlbGVjdCIsInRvTG93ZXJDYXNlIiwiY2xhc3NTZXRGb3JDaGVjayIsImNsYXNzU2V0Rm9yVG9kYXlCdXR0b25zIiwiZGF0ZUlkIiwiY2xhc3NTZXRGb3JUb21vcnJvd0J1dHRvbnMiLCJjbGFzc1NldEZvclNwZWNpZmljQnV0dG9ucyIsImRhdGVSZWZlcmVuY2UiLCJ2YWx1ZUZvckRhdGVEaXNwbGF5IiwidG9kYXlDaGVjayIsIm5vdyIsInRvbW9ycm93Q2hlY2siLCJnZXRUb2RvQnlEYXRlIiwiYWxsQXJyYXkiLCJmb3JFYWNoIiwicHJvamVjdCIsInRvZGF5QXJyYXkiLCJmaWx0ZXIiLCJ0b21vcnJvd0FycmF5Iiwic2NoZWR1bGVkQXJyYXkiLCJ1cGRhdGVUb2RvQnlEYXRlVG90YWxzIiwidG9kb0FycmF5T2JqZWN0IiwiYWxsIiwidG9kYXkiLCJ0b21vcnJvdyIsInNjaGVkdWxlZCIsImxhc3RFbGVtZW50Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImdldEluZGV4IiwiYXJyYXkiLCJmaW5kSW5kZXgiLCJvYmplY3QiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJUb2RvIiwiY3JlYXRlVG9kb0RhdGFTZXQiLCJpc0RhdGUiLCJ2YWx1ZSIsImlzVmFsaWQiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdCIsImZvcm1hdHMiLCJmdWxsIiwibG9uZyIsIm1lZGl1bSIsInNob3J0IiwidGltZSIsImRhdGVUaW1lIiwiZm9ybWF0UmVsYXRpdmVMb2NhbGUiLCJsYXN0V2VlayIsInllc3RlcmRheSIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsImRpcnR5T3B0aW9ucyIsInZhbHVlc0FycmF5IiwiY29udGV4dCIsImZvcm1hdHRpbmdWYWx1ZXMiLCJkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoIiwiX2RlZmF1bHRXaWR0aCIsIl93aWR0aCIsInZhbHVlcyIsImFyZ3VtZW50Q2FsbGJhY2siLCJvcmRpbmFsTnVtYmVyIiwiX29wdGlvbnMiLCJyZW0xMDAiLCJlcmEiLCJuYXJyb3ciLCJhYmJyZXZpYXRlZCIsIndpZGUiLCJxdWFydGVyIiwibW9udGgiLCJkYXkiLCJkYXlQZXJpb2QiLCJhbSIsInBtIiwibWlkbmlnaHQiLCJub29uIiwibW9ybmluZyIsImFmdGVybm9vbiIsImV2ZW5pbmciLCJuaWdodCIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwia2V5IiwiQXJyYXkiLCJpc0FycmF5IiwicGF0dGVybiIsInRlc3QiLCJmaW5kS2V5IiwidmFsdWVDYWxsYmFjayIsInJlc3QiLCJwcmVkaWNhdGUiLCJoYXNPd25Qcm9wZXJ0eSIsInBhcnNlUGF0dGVybiIsInBhcnNlSW50IiwicGFyc2VSZXN1bHQiLCJhbnkiLCJjb2RlIiwiZm9ybWF0RGlzdGFuY2UiLCJ0b2tlbiIsInRva2VuVmFsdWUiLCJyZXBsYWNlIiwiYWRkU3VmZml4IiwiY29tcGFyaXNvbiIsImZvcm1hdExvbmciLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwibG9jYWxpemUiLCJ3ZWVrU3RhcnRzT24iLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJhZGRNaWxsaXNlY29uZHMiLCJ0aW1lc3RhbXAiLCJzdWJNaWxsaXNlY29uZHMiLCJNSUxMSVNFQ09ORFNfSU5fREFZIiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJnZXRVVENEYXkiLCJkaWZmIiwic2V0VVRDRGF0ZSIsImdldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeSIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwic3RhcnRPZlVUQ1dlZWsiLCJsb2NhbGUiLCJsb2NhbGVXZWVrU3RhcnRzT24iLCJkZWZhdWx0V2Vla1N0YXJ0c09uIiwiUmFuZ2VFcnJvciIsImdldFVUQ1dlZWtZZWFyIiwibG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImZpcnN0V2Vla09mTmV4dFllYXIiLCJmaXJzdFdlZWtPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ1dlZWtZZWFyIiwiZmlyc3RXZWVrIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsIm91dHB1dCIsImFicyIsInNpZ25lZFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsIkciLCJ5IiwidW5pdCIsImxpZ2h0Rm9ybWF0dGVycyIsIlkiLCJzaWduZWRXZWVrWWVhciIsIndlZWtZZWFyIiwiUiIsInUiLCJRIiwicSIsIk0iLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJkIiwiRCIsImRheU9mWWVhciIsInNldFVUQ01vbnRoIiwic3RhcnRPZlllYXJUaW1lc3RhbXAiLCJkaWZmZXJlbmNlIiwiZ2V0VVRDRGF5T2ZZZWFyIiwiRSIsImRheU9mV2VlayIsImxvY2FsRGF5T2ZXZWVrIiwiYyIsImlzb0RheU9mV2VlayIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJiIiwiaG91cnMiLCJCIiwiaCIsIkgiLCJLIiwibSIsInMiLCJTIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJ4IiwiTyIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJ6IiwidCIsIm9yaWdpbmFsRGF0ZSIsIlQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsIm1pbnV0ZXMiLCJkZWxpbWl0ZXIiLCJkYXRlTG9uZ0Zvcm1hdHRlciIsInRpbWVMb25nRm9ybWF0dGVyIiwicCIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsIlVUQyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaW5kZXhPZiIsImlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiIsInRocm93UHJvdGVjdGVkRXJyb3IiLCJpbnB1dCIsImZvcm1hdHRpbmdUb2tlbnNSZWdFeHAiLCJsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImVzY2FwZWRTdHJpbmdSZWdFeHAiLCJkb3VibGVRdW90ZVJlZ0V4cCIsInVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwIiwiZGlydHlGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJmb3JtYXR0ZXJPcHRpb25zIiwic3Vic3RyaW5nIiwiZmlyc3RDaGFyYWN0ZXIiLCJsb25nRm9ybWF0dGVyIiwiY2xlYW5Fc2NhcGVkU3RyaW5nIiwiZm9ybWF0dGVyIiwidXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zIiwidXNlQWRkaXRpb25hbERheU9mWWVhclRva2VucyIsIlRPREFZIiwiVE9NT1JST1ciLCJTUEVDSUZJQyIsInNldE9iamVjdEluc3RhbmNlRGF0ZVByb3BlcnR5Iiwic3BlY2lmaWNEYXRlIiwic2V0RnVsbFllYXIiLCJzb3J0U3dpdGNoIiwiY29uZGl0aW9uIiwiY2hhbmdlVG9OdW0iLCJudW0iLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VzdCIsInRpdGxlVGV4dCIsImNoaWxkcmVuIiwidGFyZ2V0RGF0YSIsImRhdGFzZXQiLCJieURhdGVPYmplY3RQcm9wZXJ0eSIsImRhdGFTZXQiLCJ0ZXh0IiwicHJvamVjdFByb3BlcnR5IiwicHJvamVjdE5hbWUiLCJwcm9qZWN0RG9tSXRlbSIsInByb2plY3RMaXN0IiwicGFyZW50RWxlbWVudCIsInByb2plY3RMaXN0SXRlbUlkIiwicHJvamVjdEluZGV4Iiwic3BlY2lmaWNQcm9qZWN0IiwicHJvamVjdFNlbGVjdGlvbiIsInJlcGxhY2VDaGlsZHJlbiIsInRvZG8iLCJkZWxldGVGcm9tQXJyYXlBbmREb20iLCJjbGVhciIsIm5ld1RleHQiLCJpbnB1dFRleHQiLCJwcm9qZWN0VG9kb0lkIiwib2JqZWN0SW5kZXgiLCJ0b2RvT2JqZWN0IiwicHJvamVjdGlkIiwidG9kb0FycmF5IiwidG9kb0luZGV4IiwiZGF0ZUJ0bkRhdGFTZXQiLCJ0YXJnZXRJZCIsImlzQ2hlY2tlZCIsImNoZWNrZWQiLCJ0b2RvVGl0bGUiLCJjYWxlbmRhckRpc3BsYXkiLCJsaXN0RHJvcEFycm93IiwidG9nZ2xlIiwiY2hpbGRFbGVtZW50Q291bnQiLCJ0b2RvV2luZG93VG9nZ2xlU2l6ZSIsImRlbGV0ZVRvZG8iLCJ0eXBlIiwiZGlzYWJsZWQiLCJ0b2RvQ2hlY2tCb3hGdW5jdGlvbmFsaXR5Iiwic3BlY2lmaWMiLCJ0b2RheUJ0biIsInRvbW9ycm93QnRuIiwic3BlY2lmaWNEYXRlQnRuIiwiZGF0ZUJ1dHRvbkFjdGlvbkZvY3VzIiwicmVzZXREYXRlSW5wdXREaXNwbGF5IiwiZ2V0VG9kb0RhdGVzIiwiZ2V0VG9kb1ByaW9yaXR5IiwibmV3VG9kb05hbWUiLCJ0YXJnZXRJbnB1dCIsInRvZG9JdGVtIiwidG9kb1JlbmFtZSIsInRhcmdldFRleHRBcmVhIiwidGV4dGFyZWFJZCIsImdldFRvZG9UZXh0QXJlYSIsInNvcnRCeUJ1dHRvbiIsInRvZG9Qcm9wZXJ0eSIsInNvcnRlZEFycmF5IiwicHJvcGVydHkiLCJzb3J0IiwiY29tcGFyZSIsInNvcnRUb2RvIiwiYnV0dG9uIiwicmVuZGVyU29ydGVkQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9