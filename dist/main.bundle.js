"use strict";(self.webpackChunktodo_list=self.webpackChunktodo_list||[]).push([[179],{628:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'header > h1 {\n  padding-left: 6rem;\n  font-weight: 100;\n}\nheader > h1::after {\n  font-weight: 900;\n  content: "Todo";\n  color: var(--eerie-black);\n}\n',"",{version:3,sources:["webpack://./src/css/header-style.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,yBAAyB;AAC3B",sourcesContent:['header > h1 {\n  padding-left: 6rem;\n  font-weight: 100;\n}\nheader > h1::after {\n  font-weight: 900;\n  content: "Todo";\n  color: var(--eerie-black);\n}\n'],sourceRoot:""}]);const s=o},480:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.left-section__projects__add-btn {\n  margin: 0 auto;\n  min-width: 140px;\n  display: none;\n}\n\n/* Make span relative for the after content */\n.left-section__projects__add-btn span {\n  transition: 0.5s;\n  position: relative;\n}\n\n/* Add content  */\n.left-section__projects__add-btn span::after {\n  content: "\\00bb";\n  position: absolute;\n  top: 0;\n  right: -18px;\n  transition: 0.5s;\n  opacity: 0;\n}\n\n/* On span hover use padding */\n.left-section__projects__add-btn:hover span {\n  padding-right: 20px;\n}\n\n/* On span hover make the after content visible and change its position */\n.left-section__projects__add-btn:hover span::after {\n  opacity: 1;\n  right: 0px;\n}\n',"",{version:3,sources:["webpack://./src/css/left-section/add-project-btn.css"],names:[],mappings:"AAAA;EACE,cAAc;EACd,gBAAgB;EAChB,aAAa;AACf;;AAEA,6CAA6C;AAC7C;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA,iBAAiB;AACjB;EACE,gBAAgB;EAChB,kBAAkB;EAClB,MAAM;EACN,YAAY;EACZ,gBAAgB;EAChB,UAAU;AACZ;;AAEA,8BAA8B;AAC9B;EACE,mBAAmB;AACrB;;AAEA,yEAAyE;AACzE;EACE,UAAU;EACV,UAAU;AACZ",sourcesContent:['.left-section__projects__add-btn {\n  margin: 0 auto;\n  min-width: 140px;\n  display: none;\n}\n\n/* Make span relative for the after content */\n.left-section__projects__add-btn span {\n  transition: 0.5s;\n  position: relative;\n}\n\n/* Add content  */\n.left-section__projects__add-btn span::after {\n  content: "\\00bb";\n  position: absolute;\n  top: 0;\n  right: -18px;\n  transition: 0.5s;\n  opacity: 0;\n}\n\n/* On span hover use padding */\n.left-section__projects__add-btn:hover span {\n  padding-right: 20px;\n}\n\n/* On span hover make the after content visible and change its position */\n.left-section__projects__add-btn:hover span::after {\n  opacity: 1;\n  right: 0px;\n}\n'],sourceRoot:""}]);const s=o},239:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".left-section__home-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.left-section__home-container > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n  padding-bottom: 1rem;\n  /* color: var(--Ultramarine-blue); */\n}\n\n/* Select the divs in home container  */\n.left-section__home-container > div {\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  position: relative;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 1rem;\n}\n\n.left-section__home-container > div:hover {\n  background-color: var(--Ghost-white);\n\n  cursor: pointer;\n  box-shadow: var(--box-shadows);\n}\n.left-section__home-container > div:hover * {\n  fill: var(--Ultramarine-blue);\n  color: var(--Ultramarine-blue);\n}\n\n.left-section__home-container > div > svg:hover {\n  transition: 0.5s ease-in-out;\n  transform: rotate(360deg);\n}\n","",{version:3,sources:["webpack://./src/css/left-section/home-container.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;AACf;;AAEA;EACE,2CAA2C;EAC3C,oBAAoB;EACpB,oCAAoC;AACtC;;AAEA,uCAAuC;AACvC;EACE,aAAa;EACb,yCAAyC;EACzC,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,oCAAoC;EACpC,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,oCAAoC;;EAEpC,eAAe;EACf,8BAA8B;AAChC;AACA;EACE,6BAA6B;EAC7B,8BAA8B;AAChC;;AAEA;EACE,4BAA4B;EAC5B,yBAAyB;AAC3B",sourcesContent:[".left-section__home-container {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n}\n\n.left-section__home-container > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n  padding-bottom: 1rem;\n  /* color: var(--Ultramarine-blue); */\n}\n\n/* Select the divs in home container  */\n.left-section__home-container > div {\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  position: relative;\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto 1fr auto;\n  align-items: center;\n  gap: 1rem;\n}\n\n.left-section__home-container > div:hover {\n  background-color: var(--Ghost-white);\n\n  cursor: pointer;\n  box-shadow: var(--box-shadows);\n}\n.left-section__home-container > div:hover * {\n  fill: var(--Ultramarine-blue);\n  color: var(--Ultramarine-blue);\n}\n\n.left-section__home-container > div > svg:hover {\n  transition: 0.5s ease-in-out;\n  transform: rotate(360deg);\n}\n"],sourceRoot:""}]);const s=o},112:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"#left-section {\n  flex: 1;\n  max-width: 400px;\n  background-color: var(--White);\n  padding: 2rem;\n  border-radius: var(--bottom-radius-section);\n\n  display: flex;\n  flex-direction: column;\n}\n","",{version:3,sources:["webpack://./src/css/left-section/main-left-style.css"],names:[],mappings:"AAAA;EACE,OAAO;EACP,gBAAgB;EAChB,8BAA8B;EAC9B,aAAa;EACb,2CAA2C;;EAE3C,aAAa;EACb,sBAAsB;AACxB",sourcesContent:["#left-section {\n  flex: 1;\n  max-width: 400px;\n  background-color: var(--White);\n  padding: 2rem;\n  border-radius: var(--bottom-radius-section);\n\n  display: flex;\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const s=o},78:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".left-section__projects {\n  padding: 1rem;\n}\n.left-section__projects > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n\n  padding-bottom: 1rem;\n}\n\n.left-section__projects__container ul {\n  display: flex;\n  flex-direction: column;\n}\n\n.left-section__projects__container ul > li {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto max-content;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n#projectInput {\n  width: 100%;\n  border: none;\n  padding: 0.8rem 1rem;\n  border-radius: 4px;\n}\n\n#projectInput:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n#garbageIcon {\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#garbageIcon:hover {\n  transform: scale(1.2);\n}\n\n.left-section__projects__container ul > li:hover {\n  background-color: var(--Ghost-white);\n  box-shadow: var(--box-shadows);\n  cursor: pointer;\n}\n\n/* Select all p when li is hover */\n.left-section__projects__container ul > li:hover p {\n  color: var(--Ultramarine-blue);\n}\n\n/* Select all svg when li is hover */\n\n.left-section__projects__container ul > li:hover svg {\n  fill: var(--Ultramarine-blue);\n}\n\n.left-section__projects__container ul > li:hover #garbageIcon {\n  filter: invert(38%) sepia(72%) saturate(1087%) hue-rotate(208deg) brightness(93%) contrast(97%);\n}\n","",{version:3,sources:["webpack://./src/css/left-section/project-container.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf;AACA;EACE,2CAA2C;;EAE3C,oBAAoB;AACtB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;EAChB,aAAa;EACb,yCAAyC;EACzC,aAAa;EACb,sBAAsB;EACtB,uCAAuC;EACvC,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,8FAA8F;AAChG;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;EAC9B,eAAe;AACjB;;AAEA,kCAAkC;AAClC;EACE,8BAA8B;AAChC;;AAEA,oCAAoC;;AAEpC;EACE,6BAA6B;AAC/B;;AAEA;EACE,+FAA+F;AACjG",sourcesContent:[".left-section__projects {\n  padding: 1rem;\n}\n.left-section__projects > h2 {\n  border-bottom: 2px solid var(--Ghost-white);\n\n  padding-bottom: 1rem;\n}\n\n.left-section__projects__container ul {\n  display: flex;\n  flex-direction: column;\n}\n\n.left-section__projects__container ul > li {\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  display: grid;\n  grid-auto-flow: column;\n  grid-template-columns: auto max-content;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n#projectInput {\n  width: 100%;\n  border: none;\n  padding: 0.8rem 1rem;\n  border-radius: 4px;\n}\n\n#projectInput:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n#garbageIcon {\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#garbageIcon:hover {\n  transform: scale(1.2);\n}\n\n.left-section__projects__container ul > li:hover {\n  background-color: var(--Ghost-white);\n  box-shadow: var(--box-shadows);\n  cursor: pointer;\n}\n\n/* Select all p when li is hover */\n.left-section__projects__container ul > li:hover p {\n  color: var(--Ultramarine-blue);\n}\n\n/* Select all svg when li is hover */\n\n.left-section__projects__container ul > li:hover svg {\n  fill: var(--Ultramarine-blue);\n}\n\n.left-section__projects__container ul > li:hover #garbageIcon {\n  filter: invert(38%) sepia(72%) saturate(1087%) hue-rotate(208deg) brightness(93%) contrast(97%);\n}\n"],sourceRoot:""}]);const s=o},993:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"/* Add Task style */\n.main__task-list__add-task_container {\n  width: 100%;\n  display: flex;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n}\n\n.main__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus {\n  outline: none;\n}\n","",{version:3,sources:["webpack://./src/css/left-section/project-create-form.css"],names:[],mappings:"AAAA,mBAAmB;AACnB;EACE,WAAW;EACX,aAAa;EACb,oBAAoB;EACpB,WAAW;EACX,yCAAyC;EACzC,8BAA8B;AAChC;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf",sourcesContent:["/* Add Task style */\n.main__task-list__add-task_container {\n  width: 100%;\n  display: flex;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n}\n\n.main__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus {\n  outline: none;\n}\n"],sourceRoot:""}]);const s=o},973:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,"#middle-section {\n  flex: 5;\n  background-color: var(--Ghost-white);\n  /* inside main border */\n  border-top-left-radius: 35px;\n  padding: 1rem 3rem;\n  position: relative;\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/main-middle-style.css"],names:[],mappings:"AAAA;EACE,OAAO;EACP,oCAAoC;EACpC,uBAAuB;EACvB,4BAA4B;EAC5B,kBAAkB;EAClB,kBAAkB;AACpB",sourcesContent:["#middle-section {\n  flex: 5;\n  background-color: var(--Ghost-white);\n  /* inside main border */\n  border-top-left-radius: 35px;\n  padding: 1rem 3rem;\n  position: relative;\n}\n"],sourceRoot:""}]);const s=o},243:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".main__container__header {\n  display: none;\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.main__container__header.visible {\n  display: flex;\n}\n\n.main__container__header h2 {\n  width: 50%;\n  font-size: 2.4rem;\n  padding: 1.6rem 2rem;\n  border-radius: var(--border-radius-value);\n  /* background-color: var(--White); */\n  user-select: none;\n}\n\n.main__header__sort-container {\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  padding: 0.8rem;\n  border-radius: var(--border-radius-value);\n  user-select: none;\n}\n\n.main__header__sort-container svg {\n  width: 20px;\n}\n\n.main__header__sort-container:hover {\n  background-color: var(--Ghost-white3);\n  box-shadow: var(--box-shadows);\n  transform: scale(1.02);\n}\n\n.main__header__sort-container:active {\n  transform: translateY(1px);\n}\n\n.main__header__sort-container:hover,\n.main__header__sort-container:hover svg {\n  color: var(--Ultramarine-blue);\n  cursor: pointer;\n  fill: var(--Ultramarine-blue);\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/middle-header.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,kBAAkB;EAClB,8BAA8B;EAC9B,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,oBAAoB;EACpB,yCAAyC;EACzC,oCAAoC;EACpC,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;EACX,eAAe;EACf,yCAAyC;EACzC,iBAAiB;AACnB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,qCAAqC;EACrC,8BAA8B;EAC9B,sBAAsB;AACxB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;;EAEE,8BAA8B;EAC9B,eAAe;EACf,6BAA6B;AAC/B",sourcesContent:[".main__container__header {\n  display: none;\n  position: relative;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.main__container__header.visible {\n  display: flex;\n}\n\n.main__container__header h2 {\n  width: 50%;\n  font-size: 2.4rem;\n  padding: 1.6rem 2rem;\n  border-radius: var(--border-radius-value);\n  /* background-color: var(--White); */\n  user-select: none;\n}\n\n.main__header__sort-container {\n  display: flex;\n  align-items: center;\n  gap: 0.4rem;\n  padding: 0.8rem;\n  border-radius: var(--border-radius-value);\n  user-select: none;\n}\n\n.main__header__sort-container svg {\n  width: 20px;\n}\n\n.main__header__sort-container:hover {\n  background-color: var(--Ghost-white3);\n  box-shadow: var(--box-shadows);\n  transform: scale(1.02);\n}\n\n.main__header__sort-container:active {\n  transform: translateY(1px);\n}\n\n.main__header__sort-container:hover,\n.main__header__sort-container:hover svg {\n  color: var(--Ultramarine-blue);\n  cursor: pointer;\n  fill: var(--Ultramarine-blue);\n}\n"],sourceRoot:""}]);const s=o},413:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".main__sorting-order {\n  visibility: hidden;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.2rem;\n  padding: 0.5rem 0.8rem;\n  align-items: center;\n}\n\n.main__sorting-order.visibility {\n  visibility: visible;\n}\n\n.main__sorting-order > svg {\n  padding: 0.1rem;\n  width: 20px;\n}\n\n.main__sorting-order > svg:hover {\n  background-color: var(--battleship-gray);\n}\n\n/* ----------------------------------------- */\n\n.main__header__sort-container__options {\n  width: 200px;\n  padding: 2rem 0rem 1rem;\n  position: absolute;\n  right: 0;\n  top: 50px;\n\n  background-color: var(--White);\n  box-shadow: var(--box-shadows);\n\n  display: none;\n  flex-direction: column;\n  gap: 1.5rem;\n  border-radius: var(--border-radius-value);\n  z-index: 10;\n}\n.main__header__sort-container__options.visible {\n  display: flex;\n}\n\n.main__header__sort-container__options > p {\n  padding-bottom: 2rem;\n  font-weight: 800;\n  text-align: center;\n  border-bottom: 1px solid var(--Ghost-white);\n}\n\n.main__header__sort-container__options > div {\n  padding: 0.8rem 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.main__header__sort-container__options > div p {\n  width: 100%;\n  padding: 0.5rem;\n}\n\n.main__header__sort-container__options > div:hover,\n.main__header__sort-container__options > div:hover svg {\n  color: var(--Ultramarine-blue);\n  background-color: var(--Ghost-white);\n\n  fill: var(--Ultramarine-blue);\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/middle-sorting-box.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,aAAa;EACb,yBAAyB;EACzB,WAAW;EACX,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,WAAW;AACb;;AAEA;EACE,wCAAwC;AAC1C;;AAEA,8CAA8C;;AAE9C;EACE,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,QAAQ;EACR,SAAS;;EAET,8BAA8B;EAC9B,8BAA8B;;EAE9B,aAAa;EACb,sBAAsB;EACtB,WAAW;EACX,yCAAyC;EACzC,WAAW;AACb;AACA;EACE,aAAa;AACf;;AAEA;EACE,oBAAoB;EACpB,gBAAgB;EAChB,kBAAkB;EAClB,2CAA2C;AAC7C;;AAEA;EACE,sBAAsB;EACtB,aAAa;EACb,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,WAAW;EACX,eAAe;AACjB;;AAEA;;EAEE,8BAA8B;EAC9B,oCAAoC;;EAEpC,6BAA6B;AAC/B",sourcesContent:[".main__sorting-order {\n  visibility: hidden;\n  display: flex;\n  justify-content: flex-end;\n  gap: 0.2rem;\n  padding: 0.5rem 0.8rem;\n  align-items: center;\n}\n\n.main__sorting-order.visibility {\n  visibility: visible;\n}\n\n.main__sorting-order > svg {\n  padding: 0.1rem;\n  width: 20px;\n}\n\n.main__sorting-order > svg:hover {\n  background-color: var(--battleship-gray);\n}\n\n/* ----------------------------------------- */\n\n.main__header__sort-container__options {\n  width: 200px;\n  padding: 2rem 0rem 1rem;\n  position: absolute;\n  right: 0;\n  top: 50px;\n\n  background-color: var(--White);\n  box-shadow: var(--box-shadows);\n\n  display: none;\n  flex-direction: column;\n  gap: 1.5rem;\n  border-radius: var(--border-radius-value);\n  z-index: 10;\n}\n.main__header__sort-container__options.visible {\n  display: flex;\n}\n\n.main__header__sort-container__options > p {\n  padding-bottom: 2rem;\n  font-weight: 800;\n  text-align: center;\n  border-bottom: 1px solid var(--Ghost-white);\n}\n\n.main__header__sort-container__options > div {\n  padding: 0.8rem 0.5rem;\n  display: flex;\n  align-items: center;\n  gap: 1rem;\n}\n\n.main__header__sort-container__options > div p {\n  width: 100%;\n  padding: 0.5rem;\n}\n\n.main__header__sort-container__options > div:hover,\n.main__header__sort-container__options > div:hover svg {\n  color: var(--Ultramarine-blue);\n  background-color: var(--Ghost-white);\n\n  fill: var(--Ultramarine-blue);\n}\n"],sourceRoot:""}]);const s=o},356:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'.main__task-list__container {\n  width: 100%;\n  /* display: none; */\n}\n\n/* List Style */\n.main__task-list__list {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* ----------------------------------------------------------- */\n\n/* List item style */\n\n.main__task-list__list-item {\n  padding: 2rem;\n  background-color: var(--White);\n  /* min-height: 260px; */\n\n  border-radius: var(--border-radius-value);\n  border-left: 8px solid var(--battleship-gray);\n\n  display: grid;\n  grid-template-columns: 3fr 330px;\n  grid-template-rows: auto auto 1fr 2fr;\n  column-gap: 0.8rem;\n  row-gap: 1rem;\n}\n.main__task-list__list-item.visible {\n  display: block;\n}\n\n.main__task-list__list-item.low {\n  border-left: 8px solid var(--Carolina-blue);\n}\n.main__task-list__list-item.medium {\n  border-left: 8px solid var(--Maximum-yellow-red);\n}\n.main__task-list__list-item.high {\n  border-left: 8px solid var(--Orange-red-crayola);\n}\n.main__task-list__list-item.none {\n  border-left: 8px solid var(--battleship-gray);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List item header */\n.main__task-list__list-item__title-container {\n  grid-column: 1/-1;\n  grid-row: 1/2;\n  display: flex;\n  align-items: center;\n  padding: 0.4rem;\n}\n\n.main__task-list__list-item__title-container div {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n#main__task-list__list-item__title {\n  flex: 1;\n  margin-right: 1rem;\n  padding: 0.4rem;\n  border: none;\n  border-radius: 5px;\n}\n\n/* when checkbox is active */\n.checked {\n  text-decoration: line-through;\n  color: var(--Dark-liver);\n  user-select: none;\n}\n\n#main__task-list__list-item__title:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__list-item__title-container div:nth-child(1) {\n  flex: 1;\n}\n\n#list-arrow {\n  transition: 0.2s;\n  border-radius: 5px;\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#list-arrow:hover {\n  filter: invert(39%) sepia(36%) saturate(2261%) hue-rotate(210deg) brightness(95%) contrast(93%);\n}\n\n#list-arrow.rotate {\n  transform: rotate(180deg);\n}\n\n/* -------------------------------------------------------------- */\n/* List Item Notes */\n.main__task-list__list-item__notes-container {\n  grid-column: 1/2;\n  grid-row: 2/5;\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__notes-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__textarea {\n  resize: none;\n  height: 100%;\n  width: 100%;\n  background-color: var(--Ghost-white);\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  color: var(--Dark-liver);\n  border: none;\n}\n\n#main__task-list__list-item__textarea:focus {\n  outline: 2px solid var(--Ghost-white3);\n}\n\n/* ---------------------------------------------------------------- */\n\n/* List Item Date */\n.main__task-list__list-item__date-container {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n.main__task-list__list-item__date-title {\n  margin-bottom: 0.4rem;\n}\n\n.main__task-list__list-item__date-container > div {\n  display: flex;\n}\n\n#today-btn {\n  border-top-left-radius: var(--border-radius-value);\n  border-bottom-left-radius: var(--border-radius-value);\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n\n#tomorrow-btn {\n  border-radius: 0px;\n}\n\n#main__task-list__list-item__date {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  padding: 1rem;\n  border-top-right-radius: var(--border-radius-value);\n  border-bottom-right-radius: var(--border-radius-value);\n}\n\n.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date:hover,\n.main__task-list__list-item__date-container > div > button:hover {\n  background-color: var(--Ultra-Red);\n}\n\n#main__task-list__list-item__date:active,\n.main__task-list__list-item__date-container > div > button:active {\n  transform: translateY(1px);\n}\n\n#main__task-list__list-item__date:focus,\n.main__task-list__list-item__date-container > div > button:focus {\n  outline: none;\n  background-color: var(--Paradise-Pink);\n  position: relative;\n}\n\n/* change the color of date icon */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n  filter: invert(100%);\n}\n\n/* -------------------------------------------------------------------- */\n\n/* List Item Priority */\n.main__task-list__list-item__priority-container {\n  grid-column: 2/3;\n  grid-row: 3/4;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__priority-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__priority {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  border-radius: var(--border-radius-value);\n  outline: none;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n#main__task-list__list-item__priority option {\n  background: var(--Ghost-white);\n  color: var(--Dark-liver);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List Item Btn */\n.main__task-list__list-item__delete-task__btn {\n  justify-self: end;\n  align-self: flex-end;\n}\n\n/* ------------------------------------------------------------------------------ */\n\n/* Add Task style */\n.middle__task-list__add-task_container {\n  width: 100%;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n  display: none;\n}\n\n.middle__task-list__add-task_container.visible {\n  display: flex;\n}\n\n.middle__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.middle__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task,\n#todo__task-list__add-todo {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus,\n#todo__task-list__add-todo:focus {\n  outline: none;\n}\n',"",{version:3,sources:["webpack://./src/css/middle-section/middle-todo-list.css"],names:[],mappings:"AAAA;EACE,WAAW;EACX,mBAAmB;AACrB;;AAEA,eAAe;AACf;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,mBAAmB;AACrB;;AAEA,gEAAgE;;AAEhE,oBAAoB;;AAEpB;EACE,aAAa;EACb,8BAA8B;EAC9B,uBAAuB;;EAEvB,yCAAyC;EACzC,6CAA6C;;EAE7C,aAAa;EACb,gCAAgC;EAChC,qCAAqC;EACrC,kBAAkB;EAClB,aAAa;AACf;AACA;EACE,cAAc;AAChB;;AAEA;EACE,2CAA2C;AAC7C;AACA;EACE,gDAAgD;AAClD;AACA;EACE,gDAAgD;AAClD;AACA;EACE,6CAA6C;AAC/C;;AAEA,iEAAiE;;AAEjE,qBAAqB;AACrB;EACE,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,mBAAmB;EACnB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;EACE,OAAO;EACP,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,kBAAkB;AACpB;;AAEA,4BAA4B;AAC5B;EACE,6BAA6B;EAC7B,wBAAwB;EACxB,iBAAiB;AACnB;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,OAAO;AACT;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,8FAA8F;AAChG;;AAEA;EACE,+FAA+F;AACjG;;AAEA;EACE,yBAAyB;AAC3B;;AAEA,mEAAmE;AACnE,oBAAoB;AACpB;EACE,gBAAgB;EAChB,aAAa;EACb,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,YAAY;EACZ,WAAW;EACX,oCAAoC;EACpC,aAAa;EACb,yCAAyC;EACzC,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,sCAAsC;AACxC;;AAEA,qEAAqE;;AAErE,mBAAmB;AACnB;EACE,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,kDAAkD;EAClD,qDAAqD;EACrD,+BAA+B;EAC/B,4BAA4B;AAC9B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,yCAAyC;EACzC,mBAAmB;EACnB,aAAa;EACb,mDAAmD;EACnD,sDAAsD;AACxD;;AAEA;EACE,sCAAsC;AACxC;;AAEA;EACE,sCAAsC;AACxC;;AAEA;;EAEE,kCAAkC;AACpC;;AAEA;;EAEE,0BAA0B;AAC5B;;AAEA;;EAEE,aAAa;EACb,sCAAsC;EACtC,kBAAkB;AACpB;;AAEA,kCAAkC;AAClC;EACE,oBAAoB;AACtB;;AAEA,yEAAyE;;AAEzE,uBAAuB;AACvB;EACE,gBAAgB;EAChB,aAAa;;EAEb,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,YAAY;EACZ,yCAAyC;EACzC,mBAAmB;EACnB,yCAAyC;EACzC,aAAa;EACb,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,8BAA8B;EAC9B,wBAAwB;AAC1B;;AAEA,iEAAiE;;AAEjE,kBAAkB;AAClB;EACE,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA,mFAAmF;;AAEnF,mBAAmB;AACnB;EACE,WAAW;EACX,oBAAoB;EACpB,WAAW;EACX,yCAAyC;EACzC,8BAA8B;EAC9B,aAAa;AACf;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,qCAAqC;AACvC;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,oBAAoB;AACtB;;AAEA;;EAEE,aAAa;AACf",sourcesContent:['.main__task-list__container {\n  width: 100%;\n  /* display: none; */\n}\n\n/* List Style */\n.main__task-list__list {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  margin-bottom: 2rem;\n}\n\n/* ----------------------------------------------------------- */\n\n/* List item style */\n\n.main__task-list__list-item {\n  padding: 2rem;\n  background-color: var(--White);\n  /* min-height: 260px; */\n\n  border-radius: var(--border-radius-value);\n  border-left: 8px solid var(--battleship-gray);\n\n  display: grid;\n  grid-template-columns: 3fr 330px;\n  grid-template-rows: auto auto 1fr 2fr;\n  column-gap: 0.8rem;\n  row-gap: 1rem;\n}\n.main__task-list__list-item.visible {\n  display: block;\n}\n\n.main__task-list__list-item.low {\n  border-left: 8px solid var(--Carolina-blue);\n}\n.main__task-list__list-item.medium {\n  border-left: 8px solid var(--Maximum-yellow-red);\n}\n.main__task-list__list-item.high {\n  border-left: 8px solid var(--Orange-red-crayola);\n}\n.main__task-list__list-item.none {\n  border-left: 8px solid var(--battleship-gray);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List item header */\n.main__task-list__list-item__title-container {\n  grid-column: 1/-1;\n  grid-row: 1/2;\n  display: flex;\n  align-items: center;\n  padding: 0.4rem;\n}\n\n.main__task-list__list-item__title-container div {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n}\n\n#main__task-list__list-item__title {\n  flex: 1;\n  margin-right: 1rem;\n  padding: 0.4rem;\n  border: none;\n  border-radius: 5px;\n}\n\n/* when checkbox is active */\n.checked {\n  text-decoration: line-through;\n  color: var(--Dark-liver);\n  user-select: none;\n}\n\n#main__task-list__list-item__title:focus {\n  outline: 1px solid var(--Ghost-white3);\n}\n\n.main__task-list__list-item__title-container div:nth-child(1) {\n  flex: 1;\n}\n\n#list-arrow {\n  transition: 0.2s;\n  border-radius: 5px;\n  filter: invert(53%) sepia(16%) saturate(326%) hue-rotate(199deg) brightness(90%) contrast(88%);\n}\n\n#list-arrow:hover {\n  filter: invert(39%) sepia(36%) saturate(2261%) hue-rotate(210deg) brightness(95%) contrast(93%);\n}\n\n#list-arrow.rotate {\n  transform: rotate(180deg);\n}\n\n/* -------------------------------------------------------------- */\n/* List Item Notes */\n.main__task-list__list-item__notes-container {\n  grid-column: 1/2;\n  grid-row: 2/5;\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__notes-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__textarea {\n  resize: none;\n  height: 100%;\n  width: 100%;\n  background-color: var(--Ghost-white);\n  padding: 1rem;\n  border-radius: var(--border-radius-value);\n  color: var(--Dark-liver);\n  border: none;\n}\n\n#main__task-list__list-item__textarea:focus {\n  outline: 2px solid var(--Ghost-white3);\n}\n\n/* ---------------------------------------------------------------- */\n\n/* List Item Date */\n.main__task-list__list-item__date-container {\n  grid-column: 2/3;\n  grid-row: 2/3;\n}\n\n.main__task-list__list-item__date-title {\n  margin-bottom: 0.4rem;\n}\n\n.main__task-list__list-item__date-container > div {\n  display: flex;\n}\n\n#today-btn {\n  border-top-left-radius: var(--border-radius-value);\n  border-bottom-left-radius: var(--border-radius-value);\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n\n#tomorrow-btn {\n  border-radius: 0px;\n}\n\n#main__task-list__list-item__date {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  padding: 1rem;\n  border-top-right-radius: var(--border-radius-value);\n  border-bottom-right-radius: var(--border-radius-value);\n}\n\n.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date.activeDate {\n  background-color: var(--Paradise-Pink);\n}\n\n#main__task-list__list-item__date:hover,\n.main__task-list__list-item__date-container > div > button:hover {\n  background-color: var(--Ultra-Red);\n}\n\n#main__task-list__list-item__date:active,\n.main__task-list__list-item__date-container > div > button:active {\n  transform: translateY(1px);\n}\n\n#main__task-list__list-item__date:focus,\n.main__task-list__list-item__date-container > div > button:focus {\n  outline: none;\n  background-color: var(--Paradise-Pink);\n  position: relative;\n}\n\n/* change the color of date icon */\ninput[type="date"]::-webkit-calendar-picker-indicator {\n  filter: invert(100%);\n}\n\n/* -------------------------------------------------------------------- */\n\n/* List Item Priority */\n.main__task-list__list-item__priority-container {\n  grid-column: 2/3;\n  grid-row: 3/4;\n\n  display: flex;\n  flex-direction: column;\n}\n\n.main__task-list__list-item__priority-container label {\n  margin-bottom: 0.4rem;\n}\n\n#main__task-list__list-item__priority {\n  border: none;\n  background-color: var(--Ultramarine-blue);\n  color: var(--White);\n  border-radius: var(--border-radius-value);\n  outline: none;\n  padding: 1rem;\n  cursor: pointer;\n}\n\n#main__task-list__list-item__priority option {\n  background: var(--Ghost-white);\n  color: var(--Dark-liver);\n}\n\n/* ------------------------------------------------------------ */\n\n/* List Item Btn */\n.main__task-list__list-item__delete-task__btn {\n  justify-self: end;\n  align-self: flex-end;\n}\n\n/* ------------------------------------------------------------------------------ */\n\n/* Add Task style */\n.middle__task-list__add-task_container {\n  width: 100%;\n  padding: 1rem 0.8rem;\n  gap: 0.2rem;\n  border-radius: var(--border-radius-value);\n  background-color: var(--White);\n  display: none;\n}\n\n.middle__task-list__add-task_container.visible {\n  display: flex;\n}\n\n.middle__task-list__add-task_container:focus-within {\n  border: 1px solid var(--Ghost-white3);\n}\n\n.middle__task-list__add-task_container > svg:hover {\n  fill: var(--Ultramarine-blue);\n}\n\n#main__task-list__add-task,\n#todo__task-list__add-todo {\n  width: 100%;\n  border: none;\n  padding: 0rem 0.2rem;\n}\n\n#main__task-list__add-task:focus,\n#todo__task-list__add-todo:focus {\n  outline: none;\n}\n'],sourceRoot:""}]);const s=o},511:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,".middle-section__noprojects__container {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transition: var(--opacity-transition);\n  text-align: center;\n}\n\n.middle-section__noprojects__container.visible {\n  /* display: flex; */\n}\n\n.middle-section__noprojects__container > svg {\n  height: auto;\n  width: 200px;\n}\n\n.middle-section__noprojects__container h2 {\n}\n","",{version:3,sources:["webpack://./src/css/middle-section/noproject-style.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;EACR,gCAAgC;EAChC,qCAAqC;EACrC,kBAAkB;AACpB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,YAAY;AACd;;AAEA;AACA",sourcesContent:[".middle-section__noprojects__container {\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  transition: var(--opacity-transition);\n  text-align: center;\n}\n\n.middle-section__noprojects__container.visible {\n  /* display: flex; */\n}\n\n.middle-section__noprojects__container > svg {\n  height: auto;\n  width: 200px;\n}\n\n.middle-section__noprojects__container h2 {\n}\n"],sourceRoot:""}]);const s=o},534:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(537),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,":root {\n  --rich-black: #0e0e0f;\n  --eerie-black: #212121;\n  --gainsboro: #dbd6dd;\n  --battleship-gray: #898989;\n  --desert-sand: #ebbca1;\n  --white: #ffff;\n  --canary: #fff689;\n  --Verdigris: #28afb0;\n  --Orange-Yellow-Crayola: #f4d35e;\n  --Orange-red-crayola: #ff5757;\n  --Paradise-Pink: #ef476f;\n  --Caribian-Green: #06cfd6;\n  --Ultra-Red: #ff6978;\n  --Baby-Powder: #fffcf9;\n  --Celeste: #b1ede8;\n  --Carolina-blue: #4e9fd1;\n  --Robin-egg-blue: #42c7c8;\n  --Blue-yonder: #4874a8;\n  --Cyber-grape: #5e4170;\n  --Purple-Navy: #595386;\n  --Pistachio: #8ac06d;\n  --Maximum-yellow-red: #ffcc74;\n  --Blue-sapphire: #125d82;\n  --Magnolia: #e5e2eb;\n  --Ghost-white: #f1f4fd;\n  --Ghost-white2: #f7f6fb;\n  --Ghost-white3: #e3e6ed;\n  --Ultramarine-blue: #5468ea;\n  --White: #ffffff;\n  --Dark-liver: #7b7c8e;\n\n  /* ----border--- */\n  --top-radius: 30px 30px 0px 0px;\n  --bottom-radius: 0px 0px 30px 30px;\n  --bottom-radius-section: 0px 0px 0px 30px;\n\n  /* DATE Input border radius */\n  --border-radius-value: 10px;\n\n  /* Box-Shadows */\n  --box-shadows: 1px 1px 2px 1px #ededed;\n\n  /* Opacity transition */\n  --opacity-transition: 0.25s;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 62.5%;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 5rem;\n  background-color: var(--Magnolia);\n  display: grid;\n  font-size: 1.6rem;\n  color: var(--Dark-liver);\n  font-family: Arial, Helvetica, sans-serif;\n  /*   --jb-date-input-value-color: var(--White);\n  --jb-date-input-bgcolor: var(--Ultramarine-blue);\n  --jb-date-input-box-height: max-content;\n  --jb-date-input-margin: 1rem; */\n}\n\nbutton {\n  padding: 1.2rem 2rem;\n  border: none;\n  cursor: pointer;\n  border-radius: var(--border-radius-value);\n  background-color: var(--Ultramarine-blue);\n  color: var(--Ghost-white);\n}\n\nbutton:hover {\n  transform: scaleX(1.025);\n  transition: 0.1s;\n  background-color: var(--Ultra-Red);\n}\n\nbutton:active {\n  transform: translateY(2px);\n  transition: 0.1s;\n  background-color: var(--Paradise-Pink);\n}\n\nbutton,\nlabel,\ninput,\ntextarea,\nselect,\noption {\n  font-size: 1.6rem;\n  font-family: inherit;\n}\n\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\nh2,\nh3 {\n  color: var(--eerie-black);\n}\n\nsvg {\n  fill: var(--Dark-liver);\n  height: auto;\n  width: 24px;\n}\n\n#bg {\n  border-radius: 35px;\n  background-color: var(--White);\n  display: grid;\n  grid-template-rows: max-content auto;\n}\n\nheader {\n  background-color: var(--White);\n  padding: 2rem;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n}\n\nmain {\n  display: flex;\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\n\n.visible {\n  display: block;\n}\n\n.flex {\n  display: flex !important;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.active {\n  background-color: var(--Ghost-white);\n}\n\n.opacityOn {\n  opacity: 1 !important;\n}\n\n.opacityOff {\n  opacity: 0 !important;\n}\n","",{version:3,sources:["webpack://./src/css/shared-style.css"],names:[],mappings:"AAAA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,oBAAoB;EACpB,0BAA0B;EAC1B,sBAAsB;EACtB,cAAc;EACd,iBAAiB;EACjB,oBAAoB;EACpB,gCAAgC;EAChC,6BAA6B;EAC7B,wBAAwB;EACxB,yBAAyB;EACzB,oBAAoB;EACpB,sBAAsB;EACtB,kBAAkB;EAClB,wBAAwB;EACxB,yBAAyB;EACzB,sBAAsB;EACtB,sBAAsB;EACtB,sBAAsB;EACtB,oBAAoB;EACpB,6BAA6B;EAC7B,wBAAwB;EACxB,mBAAmB;EACnB,sBAAsB;EACtB,uBAAuB;EACvB,uBAAuB;EACvB,2BAA2B;EAC3B,gBAAgB;EAChB,qBAAqB;;EAErB,kBAAkB;EAClB,+BAA+B;EAC/B,kCAAkC;EAClC,yCAAyC;;EAEzC,6BAA6B;EAC7B,2BAA2B;;EAE3B,gBAAgB;EAChB,sCAAsC;;EAEtC,uBAAuB;EACvB,2BAA2B;AAC7B;;AAEA;;;EAGE,sBAAsB;EACtB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,aAAa;EACb,iCAAiC;EACjC,aAAa;EACb,iBAAiB;EACjB,wBAAwB;EACxB,yCAAyC;EACzC;;;iCAG+B;AACjC;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,eAAe;EACf,yCAAyC;EACzC,yCAAyC;EACzC,yBAAyB;AAC3B;;AAEA;EACE,wBAAwB;EACxB,gBAAgB;EAChB,kCAAkC;AACpC;;AAEA;EACE,0BAA0B;EAC1B,gBAAgB;EAChB,sCAAsC;AACxC;;AAEA;;;;;;EAME,iBAAiB;EACjB,oBAAoB;AACtB;;AAEA;;EAEE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;;EAEE,yBAAyB;AAC3B;;AAEA;EACE,uBAAuB;EACvB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,mBAAmB;EACnB,8BAA8B;EAC9B,aAAa;EACb,oCAAoC;AACtC;;AAEA;EACE,8BAA8B;EAC9B,aAAa;EACb,+BAA+B;EAC/B,gCAAgC;AAClC;;AAEA;EACE,aAAa;EACb,kCAAkC;EAClC,mCAAmC;AACrC;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,oCAAoC;AACtC;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,qBAAqB;AACvB",sourcesContent:[":root {\n  --rich-black: #0e0e0f;\n  --eerie-black: #212121;\n  --gainsboro: #dbd6dd;\n  --battleship-gray: #898989;\n  --desert-sand: #ebbca1;\n  --white: #ffff;\n  --canary: #fff689;\n  --Verdigris: #28afb0;\n  --Orange-Yellow-Crayola: #f4d35e;\n  --Orange-red-crayola: #ff5757;\n  --Paradise-Pink: #ef476f;\n  --Caribian-Green: #06cfd6;\n  --Ultra-Red: #ff6978;\n  --Baby-Powder: #fffcf9;\n  --Celeste: #b1ede8;\n  --Carolina-blue: #4e9fd1;\n  --Robin-egg-blue: #42c7c8;\n  --Blue-yonder: #4874a8;\n  --Cyber-grape: #5e4170;\n  --Purple-Navy: #595386;\n  --Pistachio: #8ac06d;\n  --Maximum-yellow-red: #ffcc74;\n  --Blue-sapphire: #125d82;\n  --Magnolia: #e5e2eb;\n  --Ghost-white: #f1f4fd;\n  --Ghost-white2: #f7f6fb;\n  --Ghost-white3: #e3e6ed;\n  --Ultramarine-blue: #5468ea;\n  --White: #ffffff;\n  --Dark-liver: #7b7c8e;\n\n  /* ----border--- */\n  --top-radius: 30px 30px 0px 0px;\n  --bottom-radius: 0px 0px 30px 30px;\n  --bottom-radius-section: 0px 0px 0px 30px;\n\n  /* DATE Input border radius */\n  --border-radius-value: 10px;\n\n  /* Box-Shadows */\n  --box-shadows: 1px 1px 2px 1px #ededed;\n\n  /* Opacity transition */\n  --opacity-transition: 0.25s;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nhtml {\n  font-size: 62.5%;\n}\n\nbody {\n  min-height: 100vh;\n  padding: 5rem;\n  background-color: var(--Magnolia);\n  display: grid;\n  font-size: 1.6rem;\n  color: var(--Dark-liver);\n  font-family: Arial, Helvetica, sans-serif;\n  /*   --jb-date-input-value-color: var(--White);\n  --jb-date-input-bgcolor: var(--Ultramarine-blue);\n  --jb-date-input-box-height: max-content;\n  --jb-date-input-margin: 1rem; */\n}\n\nbutton {\n  padding: 1.2rem 2rem;\n  border: none;\n  cursor: pointer;\n  border-radius: var(--border-radius-value);\n  background-color: var(--Ultramarine-blue);\n  color: var(--Ghost-white);\n}\n\nbutton:hover {\n  transform: scaleX(1.025);\n  transition: 0.1s;\n  background-color: var(--Ultra-Red);\n}\n\nbutton:active {\n  transform: translateY(2px);\n  transition: 0.1s;\n  background-color: var(--Paradise-Pink);\n}\n\nbutton,\nlabel,\ninput,\ntextarea,\nselect,\noption {\n  font-size: 1.6rem;\n  font-family: inherit;\n}\n\nul,\nli {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\nh2,\nh3 {\n  color: var(--eerie-black);\n}\n\nsvg {\n  fill: var(--Dark-liver);\n  height: auto;\n  width: 24px;\n}\n\n#bg {\n  border-radius: 35px;\n  background-color: var(--White);\n  display: grid;\n  grid-template-rows: max-content auto;\n}\n\nheader {\n  background-color: var(--White);\n  padding: 2rem;\n  border-top-left-radius: inherit;\n  border-top-right-radius: inherit;\n}\n\nmain {\n  display: flex;\n  border-bottom-left-radius: inherit;\n  border-bottom-right-radius: inherit;\n}\n\n.visible {\n  display: block;\n}\n\n.flex {\n  display: flex !important;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.active {\n  background-color: var(--Ghost-white);\n}\n\n.opacityOn {\n  opacity: 1 !important;\n}\n\n.opacityOff {\n  opacity: 0 !important;\n}\n"],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,a,i){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);r&&o[A[0]]||(void 0!==i&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=i),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),a&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=a):A[4]="".concat(a)),t.push(A))}},t}},537:n=>{n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var d=n[s],l=r.base?d[0]+r.base:d[0],A=i[l]||0,c="".concat(l," ").concat(A);i[l]=A+1;var u=e(c),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var _=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:c,updater:_,references:1})}o.push(c)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var d=r(n,a),l=0;l<i.length;l++){var A=e(i[l]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}i=d}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,a&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},312:(n,t,e)=>{var r=e(379),a=e.n(r),i=e(795),o=e.n(i),s=e(569),d=e.n(s),l=e(565),A=e.n(l),c=e(216),u=e.n(c),m=e(589),_=e.n(m),h=e(534),p={};p.styleTagTransform=_(),p.setAttributes=A(),p.insert=d().bind(null,"head"),p.domAPI=o(),p.insertStyleElement=u(),a()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var f=e(973),C={};C.styleTagTransform=_(),C.setAttributes=A(),C.insert=d().bind(null,"head"),C.domAPI=o(),C.insertStyleElement=u(),a()(f.Z,C),f.Z&&f.Z.locals&&f.Z.locals;var g=e(112),b={};b.styleTagTransform=_(),b.setAttributes=A(),b.insert=d().bind(null,"head"),b.domAPI=o(),b.insertStyleElement=u(),a()(g.Z,b),g.Z&&g.Z.locals&&g.Z.locals;var v=e(480),E={};E.styleTagTransform=_(),E.setAttributes=A(),E.insert=d().bind(null,"head"),E.domAPI=o(),E.insertStyleElement=u(),a()(v.Z,E),v.Z&&v.Z.locals&&v.Z.locals;var B=e(239),y={};y.styleTagTransform=_(),y.setAttributes=A(),y.insert=d().bind(null,"head"),y.domAPI=o(),y.insertStyleElement=u(),a()(B.Z,y),B.Z&&B.Z.locals&&B.Z.locals;var w=e(78),k={};k.styleTagTransform=_(),k.setAttributes=A(),k.insert=d().bind(null,"head"),k.domAPI=o(),k.insertStyleElement=u(),a()(w.Z,k),w.Z&&w.Z.locals&&w.Z.locals;var x=e(993),T={};T.styleTagTransform=_(),T.setAttributes=A(),T.insert=d().bind(null,"head"),T.domAPI=o(),T.insertStyleElement=u(),a()(x.Z,T),x.Z&&x.Z.locals&&x.Z.locals;var D=e(243),S={};S.styleTagTransform=_(),S.setAttributes=A(),S.insert=d().bind(null,"head"),S.domAPI=o(),S.insertStyleElement=u(),a()(D.Z,S),D.Z&&D.Z.locals&&D.Z.locals;var j=e(413),M={};M.styleTagTransform=_(),M.setAttributes=A(),M.insert=d().bind(null,"head"),M.domAPI=o(),M.insertStyleElement=u(),a()(j.Z,M),j.Z&&j.Z.locals&&j.Z.locals;var U=e(356),W={};W.styleTagTransform=_(),W.setAttributes=A(),W.insert=d().bind(null,"head"),W.domAPI=o(),W.insertStyleElement=u(),a()(U.Z,W),U.Z&&U.Z.locals&&U.Z.locals;var P=e(511),L={};L.styleTagTransform=_(),L.setAttributes=A(),L.insert=d().bind(null,"head"),L.domAPI=o(),L.insertStyleElement=u(),a()(P.Z,L),P.Z&&P.Z.locals&&P.Z.locals;var I=e(628),q={};q.styleTagTransform=_(),q.setAttributes=A(),q.insert=d().bind(null,"head"),q.domAPI=o(),q.insertStyleElement=u(),a()(I.Z,q),I.Z&&I.Z.locals&&I.Z.locals;const Y=document.querySelector("#main__task-list__add-task"),Z=document.querySelector(".left-section__projects__container ul"),N=(document.querySelectorAll(".project-list__item"),document.querySelector("#project"),document.querySelector(".left-section__home-container")),G=document.querySelector(".middle-section__noprojects__container"),O=(document.getElementById("middle-section"),document.querySelector(".main__container__header")),z=document.querySelector(".main__container__header h2"),R=document.querySelector(".main__header__sort-container__options"),F=(document.querySelector(".main__sorting-order"),document.querySelector(".middle__task-list__add-task_container")),$=document.querySelector(".main__task-list__list"),H=document.querySelector(".main__header__sort-container"),X=(document.querySelector(".main__sorting-order svg"),[]);function Q(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function J(n){Q(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function V(n){Q(1,arguments);var t=J(n);return t.setHours(0,0,0,0),t}function K(n,t){Q(2,arguments);var e=V(n),r=V(t);return e.getTime()===r.getTime()}function nn(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function tn(n,t){Q(2,arguments);var e=J(n),r=nn(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}const en=e.p+"0be814bb653e77d8cd3d.png",rn=e.p+"d2b37933bf5bce199fde.png";function an(){const n=document.createElement("li");n.id=this.id,n.setAttribute("data-project-id",this.id),n.className="project-list__item";const t=`\n         <input value="${this.name}" id="projectInput">\n            <img src=${en} id="garbageIcon">`;return n.insertAdjacentHTML("beforeend",t),Z.append(n),Z}function on(){const n=document.querySelector(".main__task-list__list"),t=`<li \n  class="main__task-list__list-item ${_n.call(this)} visible" \n  data-todo-id = ${this.todoId} data-projectId = ${this.projectId} >\n   \x3c!-- Header --\x3e\n   <div class="main__task-list__list-item__title-container">\n      <div>\n         <label for="main__task-list__list-item__checkbox"></label>\n         <input\n         type="checkbox" ${this.checkbox}\n         id="main__task-list__list-item__checkbox "\n         />\n         <label for="main__task-list__list-item__title"></label>\n         <input type="text" id="main__task-list__list-item__title" class="${this.checkbox}"\n         value="${this.todoName}"\n         ${hn.call(this)} />\n      </div>\n      <div>\n         <p class="main__task-list__list-item__date-reference"\n         data-reference-id = ${this.todoId}>\n         Due Date ${gn.call(this)}</p>\n        <img src=${rn} id="list-arrow" data-chevron-id=${this.todoId} alt="chevron icon" />\n\n      </div>\n   </div>\n   \x3c!-- Notes --\x3e\n   <div class="main__task-list__list-item__notes-container hidden">\n      <label for="main__task-list__list-item__textarea"\n         >Notes</label\n         >\n      <textarea\n         id="main__task-list__list-item__textarea"\n         data-textarea-id = ${this.todoId}\n         placeholder = "Add your notes here..."\n         >${this.notes}</textarea>\n   </div>\n   \x3c!-- Date --\x3e\n   <div class="main__task-list__list-item__date-container hidden">\n      <p class="main__task-list__list-item__date-title">Due Date</p>\n      <div>\n         <button \n         id="today-btn" \n         data-date="today" \n         data-today-id=${this.todoId}\n         class="${pn.call(this)}" >\n         Today\n         </button>\n\n         <button \n         id="tomorrow-btn"\n         data-date="tomorrow" \n         data-tomorrow-id = ${this.todoId}\n         class="${fn.call(this)}"\n         >Tomorrow\n         </button>\n\n         <label for="main__task-list__list-item__date">\n         </label>\n         <input type="date" \n         value ="${bn.call(this)}" \n         id="main__task-list__list-item__date" \n         class="${Cn.call(this)}"\n         data-date="specific" \n         data-specific-id="${this.todoId}">\n      </div>\n   </div>\n   \x3c!-- Priority --\x3e\n   <div class="main__task-list__list-item__priority-container hidden">\n      <label for="main__task-list__list-item__priority"\n         >Priority</label\n         >\n      <select\n         name="select-priority"\n         id="main__task-list__list-item__priority"\n         data-select-id = ${this.todoId}\n         >\n         <option value="none" selected="Select an option" disabled hidden>\n            ${mn.call(this)}\n         </option>\n         <option value="low">Low</option>\n         <option value="medium">Medium</option>\n         <option value="high">High</option>\n         <option value="no">None</option>\n      </select>\n   </div>\n   \x3c!-- Delete Btn --\x3e\n   <button id="delete" class="main__task-list__list-item__delete-task__btn hidden">\n   Delete\n   </button>\n</li>`;return n.insertAdjacentHTML("beforeend",t)}let sn;function dn(n){sn&&sn.classList.remove("active"),sn=n,sn.classList.add("active")}function ln(){X.length||localStorage.length?G.classList.add("hidden"):G.classList.remove("hidden")}function An(){return Math.floor(9999*Math.random())}function cn(){return JSON.parse(localStorage.getItem("projects")||[])}function un(n){localStorage.setItem("projects",JSON.stringify(n))}function mn(){return this.priority?this.priority?this.priority.charAt(0).toUpperCase()+this.priority.slice(1):void 0:"Select an option"}function _n(){return this.priority?this.priority?this.priority.toLowerCase():void 0:this.priority}function hn(){return this.checkbox?this.checkbox?"disabled":void 0:""}function pn(){return this.dateId?"today"===this.dateId?"activeDate":void 0:""}function fn(){return this.dateId?"tomorrow"===this.dateId?"activeDate":void 0:""}function Cn(){return this.dateId?"specific"===this.dateId?"activeDate":void 0:""}function gn(){return this.date}function bn(){const n=new Date(this.date),t=function(n){return Q(1,arguments),K(n,Date.now())}(n),e=function(n){return Q(1,arguments),K(n,tn(Date.now(),1))}(n);return t||e?"":this.date}function vn(){let n=[];cn().forEach((t=>{n.push(...t.todoList)}));const t=n.filter((n=>"today"===n.dateId)),e=n.filter((n=>"tomorrow"===n.dateId)),r=n.filter((n=>"specific"===n.dateId));return{allArray:n,todayArray:t,tomorrowArray:e,scheduledArray:r}}function En(){const n=vn(),t=document.querySelector(".left-section__home-container__all-tasks"),e=document.querySelector(".left-section__home-container__today"),r=document.querySelector(".left-section__home-container__tomorrow"),a=document.querySelector(".left-section__home-container__scheduled");t.lastElementChild.textContent=n.allArray.length,e.lastElementChild.textContent=n.todayArray.length,r.lastElementChild.textContent=n.tomorrowArray.length,a.lastElementChild.textContent=n.scheduledArray.length}function Bn(n,t){return n.findIndex((n=>n.id===+t))}class yn{constructor(n,t){this.name=n,this.id=t,this.todoList=[]}}class wn{constructor(n,t,e){this.todoName=n,this.projectId=t,this.todoId=e,this.date="",this.notes="",this.priority="",this.checkbox="",this.dateId=""}}function kn(){O.setAttribute("data-project-id",this.id),F.lastElementChild.setAttribute("data-project-Todo-ID",this.id)}function xn(n){return Q(1,arguments),n instanceof Date||"object"==typeof n&&"[object Date]"===Object.prototype.toString.call(n)}function Tn(n){if(Q(1,arguments),!xn(n)&&"number"!=typeof n)return!1;var t=J(n);return!isNaN(Number(t))}var Dn={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Sn(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}const jn={date:Sn({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Sn({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Sn({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Mn={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Un(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,d=a.width?String(a.width):n.defaultWidth;r=n.values[d]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}const Wn={ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:Un({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Un({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:Un({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Un({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Un({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function Pn(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(d)?In(d,(function(n){return n.test(s)})):Ln(d,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=e.valueCallback?e.valueCallback(o):o;var A=t.slice(s.length);return{value:o,rest:A}}}function Ln(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function In(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}var qn,Yn={ordinalNumber:(qn={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(qn.matchPattern);if(!e)return null;var r=e[0],a=n.match(qn.parsePattern);if(!a)return null;var i=qn.valueCallback?qn.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:Pn({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:Pn({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:Pn({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:Pn({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:Pn({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const Zn={code:"en-US",formatDistance:function(n,t,e){var r,a=Dn[n];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+r:r+" ago":r},formatLong:jn,formatRelative:function(n,t,e,r){return Mn[n]},localize:Wn,match:Yn,options:{weekStartsOn:0,firstWeekContainsDate:1}};function Nn(n,t){Q(2,arguments);var e=J(n).getTime(),r=nn(t);return new Date(e+r)}function Gn(n,t){Q(2,arguments);var e=nn(t);return Nn(n,-e)}var On=864e5;function zn(n){Q(1,arguments);var t=1,e=J(n),r=e.getUTCDay(),a=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function Rn(n){Q(1,arguments);var t=J(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=zn(r),i=new Date(0);i.setUTCFullYear(e,0,4),i.setUTCHours(0,0,0,0);var o=zn(i);return t.getTime()>=a.getTime()?e+1:t.getTime()>=o.getTime()?e:e-1}function Fn(n){Q(1,arguments);var t=Rn(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=zn(e);return r}var $n=6048e5;function Hn(n,t){Q(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.weekStartsOn,i=null==a?0:nn(a),o=null==e.weekStartsOn?i:nn(e.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=J(n),d=s.getUTCDay(),l=(d<o?7:0)+d-o;return s.setUTCDate(s.getUTCDate()-l),s.setUTCHours(0,0,0,0),s}function Xn(n,t){Q(1,arguments);var e=J(n),r=e.getUTCFullYear(),a=t||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:nn(o),d=null==a.firstWeekContainsDate?s:nn(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(r+1,0,d),l.setUTCHours(0,0,0,0);var A=Hn(l,t),c=new Date(0);c.setUTCFullYear(r,0,d),c.setUTCHours(0,0,0,0);var u=Hn(c,t);return e.getTime()>=A.getTime()?r+1:e.getTime()>=u.getTime()?r:r-1}function Qn(n,t){Q(1,arguments);var e=t||{},r=e.locale,a=r&&r.options&&r.options.firstWeekContainsDate,i=null==a?1:nn(a),o=null==e.firstWeekContainsDate?i:nn(e.firstWeekContainsDate),s=Xn(n,t),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var l=Hn(d,t);return l}var Jn=6048e5;function Vn(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const Kn=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return Vn("yy"===t?r%100:r,t.length)},nt=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):Vn(e+1,2)},tt=function(n,t){return Vn(n.getUTCDate(),t.length)},et=function(n,t){return Vn(n.getUTCHours()%12||12,t.length)},rt=function(n,t){return Vn(n.getUTCHours(),t.length)},at=function(n,t){return Vn(n.getUTCMinutes(),t.length)},it=function(n,t){return Vn(n.getUTCSeconds(),t.length)},ot=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return Vn(Math.floor(r*Math.pow(10,e-3)),t.length)};var st={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return Kn(n,t)},Y:function(n,t,e,r){var a=Xn(n,r),i=a>0?a:1-a;return"YY"===t?Vn(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):Vn(i,t.length)},R:function(n,t){return Vn(Rn(n),t.length)},u:function(n,t){return Vn(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return Vn(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return Vn(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return nt(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return Vn(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){Q(1,arguments);var e=J(n),r=Hn(e,t).getTime()-Qn(e,t).getTime();return Math.round(r/Jn)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):Vn(a,t.length)},I:function(n,t,e){var r=function(n){Q(1,arguments);var t=J(n),e=zn(t).getTime()-Fn(t).getTime();return Math.round(e/$n)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):Vn(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):tt(n,t)},D:function(n,t,e){var r=function(n){Q(1,arguments);var t=J(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=e-r;return Math.floor(a/On)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):Vn(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return Vn(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return Vn(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return Vn(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return et(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):rt(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):Vn(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):Vn(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):at(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):it(n,t)},S:function(n,t){return ot(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return lt(a);case"XXXX":case"XX":return At(a);default:return At(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return lt(a);case"xxxx":case"xx":return At(a);default:return At(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+dt(a,":");default:return"GMT"+At(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+dt(a,":");default:return"GMT"+At(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return Vn(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return Vn((r._originalDate||n).getTime(),t.length)}};function dt(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+Vn(i,2)}function lt(n,t){return n%60==0?(n>0?"-":"+")+Vn(Math.abs(n)/60,2):At(n,t)}function At(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+Vn(Math.floor(a/60),2)+e+Vn(a%60,2)}const ct=st;function ut(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function mt(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}const _t={p:mt,P:function(n,t){var e,r=n.match(/(P+)(p+)?/)||[],a=r[1],i=r[2];if(!i)return ut(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",ut(a,t)).replace("{{time}}",mt(i,t))}};function ht(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}var pt=["D","DD"],ft=["YY","YYYY"];function Ct(n){return-1!==pt.indexOf(n)}function gt(n){return-1!==ft.indexOf(n)}function bt(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var vt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Bt=/^'([^]*?)'?$/,yt=/''/g,wt=/[a-zA-Z]/;function kt(n,t,e){Q(2,arguments);var r=String(t),a=e||{},i=a.locale||Zn,o=i.options&&i.options.firstWeekContainsDate,s=null==o?1:nn(o),d=null==a.firstWeekContainsDate?s:nn(a.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=i.options&&i.options.weekStartsOn,A=null==l?0:nn(l),c=null==a.weekStartsOn?A:nn(a.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var u=J(n);if(!Tn(u))throw new RangeError("Invalid time value");var m=ht(u),_=Gn(u,m),h={firstWeekContainsDate:d,weekStartsOn:c,locale:i,_originalDate:u},p=r.match(Et).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,_t[t])(n,i.formatLong,h):n})).join("").match(vt).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return xt(e);var o=ct[r];if(o)return!a.useAdditionalWeekYearTokens&&gt(e)&&bt(e,t,n),!a.useAdditionalDayOfYearTokens&&Ct(e)&&bt(e,t,n),o(_,e,i.localize,h);if(r.match(wt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return p}function xt(n){return n.match(Bt)[1].replace(yt,"'")}const Tt="today",Dt="tomorrow",St="specific";function jt(n,t){const e=document.querySelector(`[data-specific-id="${t}"]`),r=document.querySelector(`[data-reference-id="${t}"]`);var a,i,o,s,d;"today"===n&&(this.dateId=n,this.date=kt(new Date,"yyyy-MM-dd")),"tomorrow"===n&&(this.dateId=n,this.date=kt((i=(a=new Date).getFullYear(),o=a.getMonth(),s=a.getDate(),(d=new Date(0)).setFullYear(i,o,s+1),d.setHours(0,0,0,0),d),"yyyy-MM-dd")),"specific"===n&&(this.dateId=n,this.date=e.value),r.textContent=`Due Date ${this.date}`,un(X)}const Mt=function(){let n=!0;return function(){return n=!n,n}}();function Ut(n){let t;return"low"===n?(t=3,t):"medium"===n?(t=2,t):"high"===n?(t=1,t):n&&"no"!==n?void 0:(t=4,t)}window.addEventListener("load",(function(){localStorage.length&&(cn().forEach((n=>{X.push(n),an.call(n)})),En(),ln())})),N.addEventListener("click",(function(n){const t=n.target.closest("div"),e=t.children[1].textContent,r=n.target.closest("div").dataset.array;if(!localStorage.length||!r)return;const{[r]:a}=vn();var i,o,s;a.length&&(i=r,o=e,s=a,dn(t),H.setAttribute("data-mode",`${i}`),z.textContent=o,O.classList.add("visible"),F.classList.remove("visible"),$.replaceChildren(),s.forEach((n=>on.call(n))))})),Y.addEventListener("keypress",(function(n){const t=n.target.value,e=An(),r=new yn(t,e);"Enter"===n.key&&""!==Y.value&&(X.push(r),un(X),Y.value="",an.call(r)),ln()})),Z.addEventListener("click",(function(n){const t=n.target.closest("li");if(!t)return;const e=t.parentElement,r=n.target.parentElement.dataset.projectId||t.dataset.projectId,a=Bn(X,r),i=X[a];var o,s,d,l;dn(t),z.textContent=i.name,kn.call(i),O.classList.add("visible"),F.classList.add("visible"),o=i,H.setAttribute("data-mode",!1),$.replaceChildren(),o.todoList.forEach((n=>{on.call(n)})),"garbageIcon"===n.target.id&&(s=t,d=e,l=a,O.classList.remove("visible"),F.classList.remove("visible"),z.textContent="",function(n,t,e){!function(n,t){n.splice(t,1)}(X,e),t.removeChild(n),$.replaceChildren()}(s,d,l),un(X),En(),X.length||($.replaceChildren(),localStorage.clear(),ln()))})),Z.addEventListener("keypress",(function(n){const t=n.target.value,e=n.target.parentElement.dataset.projectId;"Enter"===n.key&&t&&X.filter((n=>n.id===Number(e))).map((n=>(n.name=t,z.textContent=n.name,un(X),n)))})),F.addEventListener("keypress",(function(n){const t=n.target.closest("input"),e=t.value,r=n.target.dataset.projectTodoId,a=Bn(X,r);if("Enter"===n.key&&""!==t.value){const n=new wn(e,r,An());X[a].todoList.push(n),un(X),on.call(n),t.value="",En()}})),$.addEventListener("click",(function(n){const t=n.target.closest("li");if(!t)return;const e=t.dataset.todoId,r=t.dataset.projectid,a=Bn(X,r),i=X[a].todoList,o=(s=e,i.findIndex((n=>n.todoId===+s)));var s;X[a];const d=n.target.dataset,l=n.target.id,A=n.target.checked,c=n.target.parentElement.lastElementChild,u=document.querySelector(`[data-select-id ="${e}"]`),m=i[o],_=document.getElementById("main__task-list__list-item__date");!function(n,t,e){const r=document.querySelector(`[data-chevron-id="${e}"]`);if("list-arrow"===n){r.classList.toggle("rotate"),t.classList.toggle("visible");for(let n=1;n<t.childElementCount;n++)t.children[n].classList.toggle("hidden")}}(l,t,e),function(n,t,e,r){"delete"===n&&(X[t].todoList.splice(e,1),$.removeChild(r),un(X),En())}(l,a,o,t),function(n,t,e,r,a){"checkbox"===n.target.type&&t.classList.toggle("checked",e),e&&"checkbox"===n.target.type&&(r[a].checkbox="checked",t.disabled=e,un(X)),e||"checkbox"!==n.target.type||(r[a].checkbox="",t.disabled=e,un(X))}(n,c,A,i,o),function(n,t,e,r){n.date!==Tt&&n.date!==Dt&&n.date!==St||(jt.call(e,n.date,t),$.addEventListener("change",(()=>{const r=document.querySelector(`[data-reference-id="${t}"]`),{date:a}=e;r.textContent=a,jt.call(e,n.date,t),En()})),En(),function(n,t,e,r,a){const i=document.querySelector(`[data-today-id="${n}"]`),o=document.querySelector(`[data-tomorrow-id="${n}"]`),s=document.querySelector(`[data-specific-id ="${n}"]`);i.classList.toggle("activeDate","today"===a.date),o.classList.toggle("activeDate","tomorrow"===a.date),s.classList.toggle("activeDate","specific"===a.date)}(t,0,0,0,n),function(n,t){n.date!==Tt&&n.date!==Dt||(t.value="")}(n,r))}(d,e,m,_),function(n,t,e){"none"!==e.value&&n.hasOwnProperty("priority")&&(n.priority=e.value,t.classList.toggle("low","low"===e.value),t.classList.toggle("medium","medium"===e.value),t.classList.toggle("high","high"===e.value),un(X))}(m,t,u)})),$.addEventListener("keypress",(function(n){const t=n.target.closest("input");if(!t)return;const e=n.target.value,r=Number(t.parentElement.parentElement.parentElement.dataset.projectid),a=Number(t.parentElement.parentElement.parentElement.dataset.todoId),i=Bn(X,r);!function(n,t,e,r,a){"Enter"===n.key&&t.filter((n=>n.todoId===a)).map((n=>(n.todoName=r,e.value=n.todoName,un(X),n)))}(n,X[i].todoList,t,e,a)})),$.addEventListener("keypress",(function(n){const t=n.target.closest("textarea");if(!t)return;const e=t.dataset.textareaId,r=Number(t.parentElement.parentElement.dataset.projectid),a=X.findIndex((n=>n.id===Number(r))),i=X[a].todoList.findIndex((n=>n.todoId===Number(e))),o=X[a];X.includes(o)&&function(n,t,e,r){"Enter"===n.key&&(t[r].notes=e.value,un(X))}(n,X[a].todoList,t,i)})),H.addEventListener("click",(function(){R.classList.toggle("visible")})),R.addEventListener("click",(function(n){const t=n.target.closest("div div > p");if(!t)return;const e=+O.dataset.projectId||X[0].id,r=Bn(X,e),a=X[r].todoList,i="Priority"===(o=t.textContent)?"priority":"Alphabetically"===o?"todoName":"Due Date"===o?"date":"";var o;const s=function(n,t,e,r){const{[n]:a=t}=vn();return a.sort(function(n,t){return"priority"===n?t?function(t,e){return Ut(t[n])<Ut(e[n])?-1:Ut(t[n])>Ut(e[n])?1:0}:function(t,e){return Ut(t[n])>Ut(e[n])?-1:Ut(t[n])<Ut(e[n])?1:0}:t?function(t,e){return t[n].toLowerCase()<e[n].toLowerCase()?-1:t[n].toLowerCase()>e[n].toLowerCase()?1:0}:function(t,e){return t[n].toLowerCase()>e[n].toLowerCase()?-1:t[n].toLowerCase()<e[n].toLowerCase()?1:0}}(e,r))}(H.getAttribute("data-mode"),a,i,Mt());var d;d=t,R.classList.toggle("visible",!d),function(n){$.innerHTML="",n.forEach((n=>{on.call(n)}))}(s)}))}},n=>{n(n.s=312)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,